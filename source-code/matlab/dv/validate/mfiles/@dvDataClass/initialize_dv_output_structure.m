function [dvResultsStruct] = initialize_dv_output_structure(dvDataObject, ...
normalizedFluxTimeSeriesArray, alerts)
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% function [dvResultsStruct] = initialize_dv_output_structure(dvDataObject, ...
% normalizedFluxTimeSeriesArray, alerts)
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% Initialize the DV output structure. Append the alerts already generated
% in DV.
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% 
% Copyright 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% 
% NASA acknowledges the SETI Institute's primary role in authoring and
% producing the Kepler Data Processing Pipeline under Cooperative
% Agreement Nos. NNA04CC63A, NNX07AD96A, NNX07AD98A, NNX11AI13A,
% NNX11AI14A, NNX13AD01A & NNX13AD16A.
% 
% This file is available under the terms of the NASA Open Source Agreement
% (NOSA). You should have received a copy of this agreement with the
% Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
% 
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
% TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% 
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.
%


% Get fields and structures from the DV data object.
fluxTypeConfigurationStruct = dvDataObject.fluxTypeConfigurationStruct;
skyGroupId = dvDataObject.skyGroupId;
transitParameterModelDescription = dvDataObject.transitParameterModelDescription;
transitNameModelDescription = dvDataObject.transitNameModelDescription;
externalTceModelDescription = dvDataObject.externalTceModelDescription;

cadenceTimes = dvDataObject.dvCadenceTimes;
cadenceGapIndicators = cadenceTimes.gapIndicators;

barycentricCadenceTimes = dvDataObject.barycentricCadenceTimes;

dvConfigurationStruct = dvDataObject.dvConfigurationStruct;
koiMatchingEnabled = dvConfigurationStruct.koiMatchingEnabled;

tpsConfigurationStruct = dvDataObject.tpsConfigurationStruct;

targetStruct = dvDataObject.targetStruct;
targetTableDataStruct = dvDataObject.targetTableDataStruct;

% Get the number of targets and trial transit pulses.
nTargets = length(targetStruct);

[trialTransitPulseInHours] = ...
    compute_trial_transit_durations(tpsConfigurationStruct);
nTransitPulses = length(trialTransitPulseInHours);

% Set the target results structure.
nTables = length(targetTableDataStruct);
modelName = dvConfigurationStruct.limbDarkeningModelName;

limbDarkeningStruct = repmat(struct( ...
    'keplerId', 0, ...
    'targetTableId', 0, ...
    'quarter', 0, ...
    'ccdModule', 0, ...
    'ccdOutput', 0, ...
    'startCadence', 0, ...
    'endCadence', 0, ...
    'modelName', modelName, ...
    'coefficient1', 0, ...
    'coefficient2', 0, ...
    'coefficient3', 0, ...
    'coefficient4', 0), [1, nTables]);

for iTable = 1 : nTables
    limbDarkeningStruct(iTable).targetTableId = ...
        targetTableDataStruct(iTable).targetTableId;
    limbDarkeningStruct(iTable).quarter = ...
        targetTableDataStruct(iTable).quarter;
    limbDarkeningStruct(iTable).ccdModule = ...
        targetTableDataStruct(iTable).ccdModule;
    limbDarkeningStruct(iTable).ccdOutput = ...
        targetTableDataStruct(iTable).ccdOutput;
    limbDarkeningStruct(iTable).startCadence = ...
        targetTableDataStruct(iTable).startCadence;
    limbDarkeningStruct(iTable).endCadence = ...
        targetTableDataStruct(iTable).endCadence;
end % for iTable

timeSeries = struct( ...
    'values', zeros(size(cadenceGapIndicators)), ...
    'uncertainties', zeros(size(cadenceGapIndicators)), ...
    'gapIndicators', true(size(cadenceGapIndicators)), ...
    'filledIndices', []);

statisticSeries = struct( ...
    'values', zeros(size(cadenceGapIndicators)), ...
    'gapIndicators', true(size(cadenceGapIndicators)));

deemphasisSeries = struct( ...
    'values', zeros(size(cadenceGapIndicators)) );

singleEventStatistics = repmat(struct( ...
    'trialTransitPulseDuration', 0, ...
    'correlationTimeSeries', statisticSeries, ...
    'normalizationTimeSeries', statisticSeries, ...
    'deemphasisWeights', deemphasisSeries), [1, nTransitPulses]);

transitPulseCellArray = num2cell(trialTransitPulseInHours);
[singleEventStatistics(1 : nTransitPulses).trialTransitPulseDuration] = ...
    transitPulseCellArray{ : };

parameterStruct = struct( ...
    'provenance', '', ...
    'uncertainty', NaN, ...
    'value', NaN);

if ~isempty(targetStruct)
    
    targetResultsStruct = repmat(struct( ...
        'keplerId', 0, ...
        'koiId', '', ...
        'keplerName', '', ...
        'matchedKoiIds', [], ...
        'unmatchedKoiIds', [], ...
        'quartersObserved', '', ...
        'raHours', parameterStruct, ...
        'decDegrees', parameterStruct, ...
        'keplerMag', parameterStruct, ...
        'radius', parameterStruct, ...
        'effectiveTemp', parameterStruct, ...
        'log10SurfaceGravity', parameterStruct, ...
        'log10Metallicity', parameterStruct, ...
        'barycentricCorrectedTimestamps', zeros(size(cadenceGapIndicators)), ...
        'limbDarkeningStruct', limbDarkeningStruct, ...
        'planetResultsStruct', [], ...
        'residualFluxTimeSeries', timeSeries, ...
        'singleEventStatistics', singleEventStatistics, ...
        'reportFilename', ''), [1, nTargets]);
    
    for iTarget = 1 : nTargets
        
        tStruct = targetStruct(iTarget);
        
        keplerId = tStruct.keplerId;
        targetResultsStruct(iTarget).keplerId = keplerId;
        
        if koiMatchingEnabled && ~isempty(tStruct.transits)
            targetResultsStruct(iTarget).koiId = ...
                strtok(tStruct.transits(1).koiId, '.');
        end % if
        
        for iKoi = 1 : length(tStruct.transits)
            if koiMatchingEnabled && ~isempty(tStruct.transits(iKoi).keplerName)
                targetResultsStruct(iTarget).keplerName = ...
                    strtok(tStruct.transits(iKoi).keplerName, ' ');
            end % if
        end % for iKoi
        
        if koiMatchingEnabled && ~isempty(tStruct.transits)
            targetResultsStruct(iTarget).unmatchedKoiIds = ...
                {tStruct.transits.koiId};
        end % if
        
        thresholdCrossingEvent = tStruct.thresholdCrossingEvent(1);
        normalizedFluxTimeSeries = normalizedFluxTimeSeriesArray(iTarget);
        
        planetResultsStruct = initialize_planet_results_structure(dvDataObject, ...
            keplerId, 1, thresholdCrossingEvent, normalizedFluxTimeSeries) ;
        targetResultsStruct(iTarget).planetResultsStruct = ...
            planetResultsStruct;
        
        quartersObserved = sprintf('%032d', 0);
        for iTable = 1 : length(tStruct.targetDataStruct)
            quarter = tStruct.targetDataStruct(iTable).quarter;
            if quarter > 0 && quarter <= 32
                quartersObserved(quarter) = '1';
            end % if
        end % for iTable
        targetResultsStruct(iTarget).quartersObserved = quartersObserved;
        
        targetResultsStruct(iTarget).raHours = ...
            tStruct.raHours;
        targetResultsStruct(iTarget).decDegrees = ...
            tStruct.decDegrees;
        targetResultsStruct(iTarget).keplerMag = ...
            tStruct.keplerMag;
        targetResultsStruct(iTarget).radius = ...
            tStruct.radius;
        targetResultsStruct(iTarget).effectiveTemp = ...
            tStruct.effectiveTemp;
        targetResultsStruct(iTarget).log10SurfaceGravity = ...
            tStruct.log10SurfaceGravity;
        targetResultsStruct(iTarget).log10Metallicity = ...
            tStruct.log10Metallicity;
        
        targetResultsStruct(iTarget).barycentricCorrectedTimestamps = ...
            barycentricCadenceTimes(iTarget).midTimestamps;
        
        for iTable = 1 : nTables
            targetResultsStruct(iTarget).limbDarkeningStruct(iTable).keplerId = ...
                keplerId;
        end % for iTable
        
        targetResultsStruct(iTarget).residualFluxTimeSeries = ...
            normalizedFluxTimeSeries;
        
    end % for iTarget
    
else % target data structure is empty
    
    targetResultsStruct = [];
    
end % if / else

% Initialize the DV results structure.
dvResultsStruct = struct( ...
    'fluxType', fluxTypeConfigurationStruct.fluxType, ...
    'skyGroupId', skyGroupId, ...
    'transitParameterModelDescription', transitParameterModelDescription, ...
    'transitNameModelDescription', transitNameModelDescription, ...
    'externalTceModelDescription', externalTceModelDescription, ...
    'targetResultsStruct', targetResultsStruct, ...
    'alerts', alerts);

% Return.
return
