function [planetResultsStruct] = ...
initialize_planet_results_structure(dvDataObject, ...
keplerId, planetNumber, thresholdCrossingEvent, initialFluxTimeSeries )
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% function [planetResultsStruct] = ...
% initialize_planet_results_structure(dvDataObject, 
% keplerId, planetNumber, thresholdCrossingEvent, initialFluxTimeSeries)
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% Initialize the planet results structure.
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% 
% Copyright 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% 
% NASA acknowledges the SETI Institute's primary role in authoring and
% producing the Kepler Data Processing Pipeline under Cooperative
% Agreement Nos. NNA04CC63A, NNX07AD96A, NNX07AD98A, NNX11AI13A,
% NNX11AI14A, NNX13AD01A & NNX13AD16A.
% 
% This file is available under the terms of the NASA Open Source Agreement
% (NOSA). You should have received a copy of this agreement with the
% Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
% 
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
% TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% 
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.
%

% Define constant.
MAX_SEVERITY_LEVEL = 4;

% Get fields and structures from the DV data object.
cadenceTimes = dvDataObject.dvCadenceTimes;
cadenceGapIndicators = cadenceTimes.gapIndicators;

dvConfigurationStruct = dvDataObject.dvConfigurationStruct;
transitModelName = dvConfigurationStruct.transitModelName;
limbDarkeningModelName = dvConfigurationStruct.limbDarkeningModelName;
weakSecondaryTestEnabled = dvConfigurationStruct.weakSecondaryTestEnabled;
externalTcesEnabled = dvConfigurationStruct.externalTcesEnabled;

differenceImageConfigurationStruct = ...
    dvDataObject.differenceImageConfigurationStruct;
qualityThreshold = differenceImageConfigurationStruct.qualityThreshold;

bootstrapConfigurationStruct = dvDataObject.bootstrapConfigurationStruct;
bootstrapSkipCount           = bootstrapConfigurationStruct.skipCount;

targetStruct                 = dvDataObject.targetStruct;

bootstrapHistogram = struct( ...
    'statistics',                   [], ...
    'probabilities',                [], ...
    'finalSkipCount',               bootstrapSkipCount);

weakSecondaryStruct = thresholdCrossingEvent.weakSecondaryStruct;

if ~weakSecondaryTestEnabled || weakSecondaryStruct.mesMad == -1
    weakSecondaryStruct.maxMesPhaseInDays = ...
        thresholdCrossingEvent.orbitalPeriod / 2;
    weakSecondaryStruct.maxMes = 0;
    weakSecondaryStruct.minMesPhaseInDays = ...
        thresholdCrossingEvent.orbitalPeriod / 2;
    weakSecondaryStruct.minMes = 0;
    weakSecondaryStruct.medianMes = 0;
    weakSecondaryStruct.mesMad = -1;
    weakSecondaryStruct.nValidPhases = -1;
    weakSecondaryStruct.robustStatistic = -1;
    weakSecondaryStruct.depthPpm.value = 0;
    weakSecondaryStruct.depthPpm.uncertainty = -1;
end % if

weakSecondaryStruct.phaseInDays = [];
weakSecondaryStruct.mes = [];

if externalTcesEnabled
    thresholdCrossingEvent.robustStatistic = -1;
    thresholdCrossingEvent.chiSquare1 = -1;
    thresholdCrossingEvent.chiSquareDof1 = -1;
    thresholdCrossingEvent.chiSquare2 = -1;
    thresholdCrossingEvent.chiSquareDof2 = -1;
    thresholdCrossingEvent.chiSquareGof = -1;
    thresholdCrossingEvent.chiSquareGofDof = -1;
    thresholdCrossingEvent.thresholdForDesiredPfa = -1;
end % if

planetCandidate = struct( ...
    'keplerId',                     keplerId, ...
    'planetNumber',                 planetNumber, ...
    'initialFluxTimeSeries',        initialFluxTimeSeries, ...
    'trialTransitPulseDuration',    thresholdCrossingEvent.trialTransitPulseDuration, ...
    'epochMjd',                     thresholdCrossingEvent.epochMjd, ...
    'orbitalPeriod',                thresholdCrossingEvent.orbitalPeriod, ...
    'maxSingleEventSigma',          thresholdCrossingEvent.maxSingleEventSigma, ...
    'maxMultipleEventSigma',        thresholdCrossingEvent.maxMultipleEventSigma, ...
    'maxSesInMes',                  thresholdCrossingEvent.maxSesInMes, ...
    'robustStatistic',              thresholdCrossingEvent.robustStatistic, ...
    'chiSquare1',                   thresholdCrossingEvent.chiSquare1, ...
    'chiSquareDof1',                thresholdCrossingEvent.chiSquareDof1, ...
    'chiSquare2',                   thresholdCrossingEvent.chiSquare2, ...
    'chiSquareDof2',                thresholdCrossingEvent.chiSquareDof2, ...
    'chiSquareGof',                 thresholdCrossingEvent.chiSquareGof, ...
    'chiSquareGofDof',              thresholdCrossingEvent.chiSquareGofDof, ...
    'thresholdForDesiredPfa',       thresholdCrossingEvent.thresholdForDesiredPfa, ...
    'modelChiSquare2',              -1, ...
    'modelChiSquareDof2',           -1, ...
    'modelChiSquareGof',            -1, ...
    'modelChiSquareGofDof',         -1, ...
    'weakSecondaryStruct',          weakSecondaryStruct, ...
    'deemphasizedNormalizationTimeSeries', thresholdCrossingEvent.deemphasizedNormalizationTimeSeries, ...
    'suspectedEclipsingBinary',     false, ...
    'statisticRatioBelowThreshold', false, ...
    'expectedTransitCount',         0, ...
    'observedTransitCount',         0, ...
    'bootstrapHistogram',           bootstrapHistogram, ...
    'significance',                 -1, ...
    'bootstrapThresholdForDesiredPfa', -1, ...
    'bootstrapMesMean', -1, ...
    'bootstrapMesStd', -1);

planetModelFit = struct( ...
    'keplerId',                     keplerId, ...
    'planetNumber',                 planetNumber, ...
    'transitModelName',             transitModelName, ...
    'limbDarkeningModelName',       limbDarkeningModelName, ...
    'fullConvergence',              false, ...
    'seededWithPriorFit',           false, ...
    'modelChiSquare',               -1, ...
    'modelDegreesOfFreedom',        -1, ...
    'modelFitSnr',                  -1, ...
    'robustWeights',                zeros(size(cadenceGapIndicators)), ...
    'modelParameters',              [], ...
    'modelParameterCovariance',     []);

trapezoidalModelFit = planetModelFit;
trapezoidalModelFit.transitModelName = 'trapezoidal_model';
trapezoidalModelFit.limbDarkeningModelName = '';

statistic = struct( ...
    'value',                        0, ...
    'significance',                 -1);

comparisonStatistic = struct( ...
    'planetNumber',                 0, ...
    'value',                        0, ...
    'significance',                 -1);

quantity = struct( ...
    'value',                        0, ...
    'uncertainty',                  -1);

centroidMotionResults = struct( ...
    'motionDetectionStatistic',     statistic, ...
    'peakRaOffset',                 quantity, ...
    'peakDecOffset',                quantity, ...
    'peakOffsetArcSec',             quantity, ...
    'sourceRaOffset',               quantity, ...
    'sourceDecOffset',              quantity, ...
    'sourceOffsetArcSec',           quantity, ...
    'sourceRaHours',                quantity, ...
    'sourceDecDegrees',             quantity, ...
    'outOfTransitCentroidRaHours',  quantity, ...
    'outOfTransitCentroidDecDegrees', quantity);

mqImageCentroid = struct( ...
    'raHours', quantity, ...
    'decDegrees', quantity);

mqCentroidOffsets = struct( ...
    'meanRaOffset',                 quantity, ...
    'meanDecOffset',                quantity, ...
    'meanSkyOffset',                quantity, ...
    'singleFitRaOffset',            quantity, ...
    'singleFitDecOffset',           quantity, ...
    'singleFitSkyOffset',           quantity);

summaryQualityMetric = struct( ...
    'qualityThreshold',             qualityThreshold, ...
    'numberOfAttempts',             0, ...
    'numberOfMetrics',              0, ...
    'numberOfGoodMetrics',          0, ...
    'fractionOfGoodMetrics',        -1);

summaryOverlapMetric = struct( ...
    'imageCount',                   0, ...
    'imageCountNoOverlap',          0, ...
    'imageCountFractionNoOverlap',  -1);

differenceImageMotionResults = struct( ...
    'mqControlImageCentroid',       mqImageCentroid, ...
    'mqDifferenceImageCentroid',    mqImageCentroid, ...
    'mqKicCentroidOffsets',         mqCentroidOffsets, ...
    'mqControlCentroidOffsets',     mqCentroidOffsets, ...
    'summaryQualityMetric',         summaryQualityMetric, ...
    'summaryOverlapMetric',         summaryOverlapMetric);

pixelCorrelationMotionResults = struct( ...
    'mqControlImageCentroid',       mqImageCentroid, ...
    'mqCorrelationImageCentroid',   mqImageCentroid, ...
    'mqKicCentroidOffsets',         mqCentroidOffsets, ...
    'mqControlCentroidOffsets',     mqCentroidOffsets);

centroidResults = struct( ...
    'prfMotionResults',              centroidMotionResults, ...
    'fluxWeightedMotionResults',     centroidMotionResults, ...
    'differenceImageMotionResults',  differenceImageMotionResults, ...
    'pixelCorrelationMotionResults', pixelCorrelationMotionResults);

keplerIds = [targetStruct.keplerId];
iTarget = find(keplerIds == keplerId);
nTables = length(targetStruct(iTarget).targetDataStruct);

covariance = repmat(-1, [2, 2]);

qualityMetric = struct( ...
    'attempted',                     false, ...
    'valid',                         false, ...
    'value',                         0);

imageCentroid = struct( ...
    'row',                           quantity, ...
    'column',                        quantity, ...
    'raHours',                       quantity, ...
    'decDegrees',                    quantity, ...
    'rowColumnCovariance',           covariance, ...
    'raDecCovariance',               covariance, ...
    'transformationCadenceIndices',  []);

centroidOffsets = struct( ...
    'rowOffset',                     quantity, ...
    'columnOffset',                  quantity, ...
    'focalPlaneOffset',              quantity, ...
    'raOffset',                      quantity, ...
    'decOffset',                     quantity, ...
    'skyOffset',                     quantity);

differenceImageResults = repmat(struct( ...
    'targetTableId',                 0, ...
    'quarter',                       0, ...
    'ccdModule',                     0, ...
    'ccdOutput',                     0, ...
    'startCadence',                  0, ...
    'endCadence',                    0, ...
    'numberOfTransits',              0, ...
    'numberOfCadencesInTransit',     0, ...
    'numberOfCadenceGapsInTransit',  0, ...
    'numberOfCadencesOutOfTransit',  0, ...
    'numberOfCadenceGapsOutOfTransit', 0, ...
    'overlappedTransits',            false, ...
    'qualityMetric',                 qualityMetric, ...
    'mjdTimestamp',                  0, ...
    'differenceImagePixelStruct',    [], ...
    'kicReferenceCentroid',          imageCentroid, ...
    'controlImageCentroid',          imageCentroid, ...
    'differenceImageCentroid',       imageCentroid, ...
    'kicCentroidOffsets',            centroidOffsets, ...
    'controlCentroidOffsets',        centroidOffsets), [1, nTables]);

for iTable = 1 : nTables
    
    differenceImageResults(iTable).targetTableId = ...
        targetStruct(iTarget).targetDataStruct(iTable).targetTableId;
    differenceImageResults(iTable).quarter = ...
        targetStruct(iTarget).targetDataStruct(iTable).quarter;
    differenceImageResults(iTable).ccdModule = ...
        targetStruct(iTarget).targetDataStruct(iTable).ccdModule;
    differenceImageResults(iTable).ccdOutput = ...
        targetStruct(iTarget).targetDataStruct(iTable).ccdOutput;
    differenceImageResults(iTable).startCadence = ...
        targetStruct(iTarget).targetDataStruct(iTable).startCadence;
    differenceImageResults(iTable).endCadence = ...
        targetStruct(iTarget).targetDataStruct(iTable).endCadence;
    
    pixelDataFileName = ...
        targetStruct(iTarget).targetDataStruct(iTable).pixelDataFileName;
    [pixelMetaDataStruct, status, path, name, ext] = ...
        file_to_struct(pixelDataFileName, 'pixelMetaDataStruct');                           %#ok<ASGLU>
    if ~status
        error('dv:initializePlanetResultsStructure:unknownDataFileType', ...
            'unknown pixel data file type (%s%s)', ...
            name, ext);
    end % if
    nPixels = length(pixelMetaDataStruct);
    
    differenceImagePixelStruct = repmat(struct( ...
        'ccdRow',                      0, ...
        'ccdColumn',                   0, ...
        'meanFluxInTransit',           quantity, ...
        'meanFluxOutOfTransit',        quantity, ...
        'meanFluxDifference',          quantity, ...
        'meanFluxForTargetTable',      quantity), [1, nPixels]);
    
    for iPixel = 1 : nPixels
        differenceImagePixelStruct(iPixel).ccdRow = ...
            pixelMetaDataStruct(iPixel).ccdRow;
        differenceImagePixelStruct(iPixel).ccdColumn = ...
            pixelMetaDataStruct(iPixel).ccdColumn;
    end % for iPixel
        
    differenceImageResults(iTable).differenceImagePixelStruct = ...
        differenceImagePixelStruct;
    
    clear pixelMetaDataStruct
    
end % for iTable

pixelCorrelationResults = repmat(struct( ...
    'targetTableId',                   0, ...
    'quarter',                         0, ...
    'ccdModule',                       0, ...
    'ccdOutput',                       0, ...
    'startCadence',                    0, ...
    'endCadence',                      0, ...
    'mjdTimestamp',                    0, ...
    'pixelCorrelationStatisticStruct', [], ...
    'kicReferenceCentroid',            imageCentroid, ...
    'controlImageCentroid',            imageCentroid, ...
    'correlationImageCentroid',        imageCentroid, ...
    'kicCentroidOffsets',              centroidOffsets, ...
    'controlCentroidOffsets',          centroidOffsets), [1, nTables]);

for iTable = 1 : nTables
    
    pixelCorrelationResults(iTable).targetTableId = ...
        targetStruct(iTarget).targetDataStruct(iTable).targetTableId;
    pixelCorrelationResults(iTable).quarter = ...
        targetStruct(iTarget).targetDataStruct(iTable).quarter;
    pixelCorrelationResults(iTable).ccdModule = ...
        targetStruct(iTarget).targetDataStruct(iTable).ccdModule;
    pixelCorrelationResults(iTable).ccdOutput = ...
        targetStruct(iTarget).targetDataStruct(iTable).ccdOutput;
    pixelCorrelationResults(iTable).startCadence = ...
        targetStruct(iTarget).targetDataStruct(iTable).startCadence;
    pixelCorrelationResults(iTable).endCadence = ...
        targetStruct(iTarget).targetDataStruct(iTable).endCadence;
    
    pixelDataFileName = ...
        targetStruct(iTarget).targetDataStruct(iTable).pixelDataFileName;
    [pixelMetaDataStruct, status, path, name, ext] = ...
        file_to_struct(pixelDataFileName, 'pixelMetaDataStruct');                           %#ok<ASGLU>
    if ~status
        error('dv:initializePlanetResultsStructure:unknownDataFileType', ...
            'unknown pixel data file type (%s%s)', ...
            name, ext);
    end % if
    nPixels = length(pixelMetaDataStruct);
    
    pixelCorrelationStatisticStruct = repmat(struct( ...
        'ccdRow',                      0, ...
        'ccdColumn',                   0, ...
        'value',                       0, ...
        'significance',                -1), [1, nPixels]);
    
    for iPixel = 1 : nPixels
        pixelCorrelationStatisticStruct(iPixel).ccdRow = ...
            pixelMetaDataStruct(iPixel).ccdRow;
        pixelCorrelationStatisticStruct(iPixel).ccdColumn = ...
            pixelMetaDataStruct(iPixel).ccdColumn;
    end % for iPixel
        
    pixelCorrelationResults(iTable).pixelCorrelationStatisticStruct = ...
        pixelCorrelationStatisticStruct;
    
    clear pixelMetaDataStruct
    
end % for iTable

binaryDiscriminationResults = struct( ...
    'oddEvenTransitDepthComparisonStatistic',   statistic, ...
    'oddEvenTransitEpochComparisonStatistic',   statistic, ...
    'singleTransitDepthComparisonStatistic',    statistic, ...
    'singleTransitDurationComparisonStatistic', statistic, ...
    'singleTransitEpochComparisonStatistic',    statistic, ...
    'shorterPeriodComparisonStatistic',         comparisonStatistic, ...
    'longerPeriodComparisonStatistic',          comparisonStatistic);

planetParameters = struct( ...
    'geometricAlbedo',                quantity, ...
    'planetEffectiveTemp',            quantity);

comparisonTests = struct( ...
    'albedoComparisonStatistic',      statistic, ...
    'tempComparisonStatistic',        statistic);

secondaryEventResults = struct( ...
    'planetParameters',               planetParameters, ...
    'comparisonTests',                comparisonTests);
    
severityLevels = (0 : MAX_SEVERITY_LEVEL)';

transitMetadata = repmat(struct( ...
    'severityLevel',                  -1, ...
    'numbers',                        [], ...
    'epochs',                         []), [1, MAX_SEVERITY_LEVEL]);

for iLevel = 1 : MAX_SEVERITY_LEVEL
    transitMetadata(iLevel).severityLevel = iLevel;
end % for iLevel

rollingBandContaminationHistogram = struct( ...
    'testPulseDurationLc',             -1, ...
    'severityLevels',                  severityLevels, ...
    'transitCounts',                   zeros(size(severityLevels)), ...
    'transitFractions',                repmat(-1, size(severityLevels)), ...
    'transitMetadata',                 transitMetadata);

imageArtifactResults = struct( ...
    'rollingBandContaminationHistogram', rollingBandContaminationHistogram);

timeSeriesStruct = struct( ...
    'values',                          zeros(size(cadenceGapIndicators)), ...
    'gapIndicators',                   true(size(cadenceGapIndicators)));

fluxTimeSeriesStruct = struct( ...
    'values',                          zeros(size(cadenceGapIndicators)), ...
    'uncertainties',                   zeros(size(cadenceGapIndicators)), ...
    'gapIndicators',                   true(size(cadenceGapIndicators)), ...
    'filledIndices',                   []);

% ghostDiagnosticResults
ghostDiagnosticResults = struct( ...
    'coreApertureCorrelationStatistic',  statistic, ...
    'haloApertureCorrelationStatistic',  statistic);

planetResultsStruct = struct( ...
    'keplerId',                        keplerId, ...
    'planetNumber',                    planetNumber, ...
    'koiId',                           '', ...
    'keplerName',                      '', ...
    'koiCorrelation',                  -1, ...
    'detrendFilterLength',             -1, ...
    'planetCandidate',                 planetCandidate, ...
    'allTransitsFit',                  planetModelFit, ...
    'oddTransitsFit',                  planetModelFit, ...
    'evenTransitsFit',                 planetModelFit, ...
    'reducedParameterFits',            [], ...
    'trapezoidalFit',                  trapezoidalModelFit, ...
    'foldedPhase',                     zeros(size(cadenceGapIndicators)), ...
    'modelLightCurve',                 timeSeriesStruct, ...
    'whitenedModelLightCurve',         timeSeriesStruct, ...
    'trapezoidalModelLightCurve',      timeSeriesStruct, ...
    'whitenedFluxTimeSeries',          timeSeriesStruct, ...
    'detrendedFluxTimeSeries',         fluxTimeSeriesStruct, ...
    'differenceImageResults',          differenceImageResults, ...
    'centroidResults',                 centroidResults, ...
    'ghostDiagnosticResults',          ghostDiagnosticResults, ...
    'pixelCorrelationResults',         pixelCorrelationResults, ...
    'binaryDiscriminationResults',     binaryDiscriminationResults, ...
    'secondaryEventResults',           secondaryEventResults, ...
    'imageArtifactResults',            imageArtifactResults, ...
    'reportFilename',                  '');

% Return.
return
