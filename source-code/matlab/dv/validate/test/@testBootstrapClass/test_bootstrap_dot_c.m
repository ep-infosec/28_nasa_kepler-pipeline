%% test_bootstrap_dot_c
%
% function [self] = test_bootstrap_dot_c(self)
%
% Unit test to test false alarm rate generated with bootstrap.c
% The false alarm rate generated by bootstrap.c is compared to the false
% alarm rate generated by NullStatisticsPDF.cpp using parameters specified
% in setup.txt.  Since the binning algorithms are slightly different, the
% false alarm rate will not be an exact match, but should be (subjectively)
% within a factor of two.
% 
% Run with:
%   run(text_test_runner, testBootstrapClass('test_bootstrap_dot_c'));
%%
% 
% Copyright 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% 
% NASA acknowledges the SETI Institute's primary role in authoring and
% producing the Kepler Data Processing Pipeline under Cooperative
% Agreement Nos. NNA04CC63A, NNX07AD96A, NNX07AD98A, NNX11AI13A,
% NNX11AI14A, NNX13AD01A & NNX13AD16A.
% 
% This file is available under the terms of the NASA Open Source Agreement
% (NOSA). You should have received a copy of this agreement with the
% Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
% 
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
% TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% 
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.
%
function [self] = test_bootstrap_dot_c(self)

% Add test-meta-data path
initialize_soc_variables;
testDataRoot = fullfile(socTestDataRoot, 'dv', 'unit-tests', 'bootstrap');
testMetaDataRoot = fullfile(socTestMetaDataRoot, 'dv', 'unit-tests', 'bootstrap');
addpath(testDataRoot);
addpath(testMetaDataRoot);

bootstrapInputStruct = generate_bootstrapinputstruct_with_soho_data;

% Instantiate the bootstrap object and set parameters to be the same
% as in the "setup.txt" file used for running the cpp version and
% generating "out_60.txt"
bsObject = bootstrapClass(bootstrapInputStruct);
bsObject = set(bsObject, 'nullTailMaxSigma', 12);
bsObject = set(bsObject, 'nullTailMinSigma', 4);
bsObject = set(bsObject, 'searchTransitThreshold', 6);
bsObject = set(bsObject, 'bootstrapSkipCount', 25);
bsObject = set(bsObject, 'bootstrapAutoSkipCountEnabled', false);
bsObject = set(bsObject, 'dvFiguresRootDirectory', './');
bsObject = set(bsObject, 'targetNumber', 1);
skipCount = get(bsObject, 'bootstrapSkipCount');

iPulse = 1;
statistics = (4:0.1:11.9)';

% Create structure to allocate results
bootstrapResultsStruct = create_bootstrapResultsStruct(bsObject);
bootstrapResultsStruct.statistics = statistics;
bootstrapResultsStruct.finalSkipCount = skipCount;

% Create dvResultsStruct with a hypothetical maxMultipleEventSigma = 6.0,
dvResultsStruct.targetResultsStruct(1).planetResultsStruct(1).planetCandidate.maxMultipleEventSigma = 6.0;
dvResultsStruct.alerts = [];

% This function contains the call to bootstrap.c
fprintf('\nBootstrapping soho data with searchTransitThreshold=6.0, this can take up to 30 minutes...\n')
[bootstrapResultsStruct] = generate_histogram(bsObject, bootstrapResultsStruct, skipCount, iPulse);

% Get the false alarm rates for the c generated histogram
[bootstrapResultsStruct dvResultsStruct] = ...
    compute_false_alarm(bsObject, bootstrapResultsStruct, dvResultsStruct, 0);

lengthSES = 153817;

% Get the false alarm rates for the cpp generated histogram
[probabilities_cpp statistics_cpp] = ...
    Create_CDF_From_Histogram_Modified('out_60.txt', lengthSES, skipCount); %#ok<NASGU>
index = find(statistics >= 6.0, 1, 'first');
significance_cpp = probabilities_cpp(index);
fprintf('\n\t False alarm rate produced with C++ = %1.4e, searchTransitThreshold=6.0\n', significance_cpp)
fprintf('\t False alarm rate produced with C = %1.4e, searchTransitThreshold=6.0\n\n', bootstrapResultsStruct.significance)

% Compare the two false alarm rates and let pass if within a factor of 2,
% These two numbers will not be the same as the cpp version has a slightly
% different binning algorithm.
msg = 'False alarm rate computed from c function differs from cpp function by more than a factor of 2';
mlunit_assert(significance_cpp <= 2*bootstrapResultsStruct.significance, msg)

%--------------------------------------------------------------------------
clear bootstrapInputStruct bsObject bootstrapResultsStruct
% Repeat, now with searchTransitThreshold = 7.1

bootstrapInputStruct = generate_bootstrapinputstruct_with_soho_data;

% Instantiate the object and set parameters to be the same
% as in the "setup.txt" file used for running the cpp version and
% generating "out_60.txt"
bsObject = bootstrapClass(bootstrapInputStruct);
bsObject = set(bsObject, 'nullTailMaxSigma', 12);
bsObject = set(bsObject, 'nullTailMinSigma', 4);
bsObject = set(bsObject, 'searchTransitThreshold', 7.1);
bsObject = set(bsObject, 'bootstrapSkipCount', 25);
bsObject = set(bsObject, 'targetNumber', 1);
skipCount = get(bsObject, 'bootstrapSkipCount');
iPulse = 1;
statistics = (4:0.1:11.9)';

% Create structure to allocate results
bootstrapResultsStruct = create_bootstrapResultsStruct(bsObject);
bootstrapResultsStruct.statistics = statistics;
bootstrapResultsStruct.finalSkipCount = skipCount;

% Create dvResultsStruct with a hypothetical maxMultipleEventSigma = 7.1,
dvResultsStruct.targetResultsStruct(1).planetResultsStruct(1).planetCandidate.maxMultipleEventSigma = 7.1;
dvResultsStruct.alerts = [];

% This function contains the call to bootstrap.c
fprintf('Bootstrapping soho data with searchTransitThreshold=7.1, this can take upto 5 minutes...\n')
[bootstrapResultsStruct] = generate_histogram(bsObject, bootstrapResultsStruct, skipCount, iPulse);

% Get the false alarm rates for the c generated histogram
[bootstrapResultsStruct dvResultsStruct] = ...
    compute_false_alarm(bsObject, bootstrapResultsStruct, dvResultsStruct, 0); %#ok<NASGU>

% Compare counts to the values in "out.txt"
[statistics_cpp, counts_cpp] = textread('out_71.txt', '%f %f'); %#ok<NASGU,ASGLU>
lengthSES = 153817;

% Get the false alarm rates for the cpp generated histogram
[probabilities_cpp statistics_cpp] = ...
    Create_CDF_From_Histogram_Modified('out_71.txt', lengthSES, skipCount); %#ok<NASGU>
index = find(statistics >= 7.1, 1, 'first');
significance_cpp = probabilities_cpp(index);
fprintf('\n\t False alarm rate produced with C++ = %1.4e, searchTransitThreshold=7.1\n', significance_cpp)
fprintf('\t False alarm rate produced with C = %1.4e, searchTransitThreshold=7.1\n\n', bootstrapResultsStruct.significance)

% Compare the two false alarm rates and let pass if within a factor of 2,
% These two numbers will not be the same as the cpp version has a slightly
% different binning algorithm.
msg = 'False alarm rate computed from c function differs from cpp function by more than a factor of 2';
mlunit_assert(0.5*significance_cpp <= bootstrapResultsStruct.significance && bootstrapResultsStruct.significance <= 2*significance_cpp , msg)

rmpath(testDataRoot);
rmpath(testMetaDataRoot);

return



