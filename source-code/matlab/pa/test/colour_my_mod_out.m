function result = colour_my_mod_out( mod, out, fillColor )
% function result = colour_my_mod_out( mod, out, fillColor )
%
% This function is designed to fill the selected mod/out blocks with the color
% specified by fillColor. It assumes the current figure is the mod/out map on 
% the focal plane generated by the function call; pad_draw_ccd(1:42)
%
% INPUTS:   mod, out    Each pair defines mod/out to colorfill. Each is [n x 1]
%           fillColor   Single MATLAB color character; {'r','g','b','c','m','y','k','w'}
%                       OR
%                       A MATLAB color triple; 1x3 array; double with all elements [0,1]
%                       To assign a different color to each of the n mod out pairs a n x 1 cell array
%                       of fillColor may be used.
% OUTPUTS:  result      Boolean; [n x 1]. True = successful fill. Scalar boolean false
%                       is returned on inputs failure.
% 
% Copyright 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% 
% NASA acknowledges the SETI Institute's primary role in authoring and
% producing the Kepler Data Processing Pipeline under Cooperative
% Agreement Nos. NNA04CC63A, NNX07AD96A, NNX07AD98A, NNX11AI13A,
% NNX11AI14A, NNX13AD01A & NNX13AD16A.
% 
% This file is available under the terms of the NASA Open Source Agreement
% (NOSA). You should have received a copy of this agreement with the
% Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
% 
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
% TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% 
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.
%


allowedColorCharacters = {'r','g','b','c','m','y','k','w'};

% check mod out inputs
if( isempty(mod) || isempty(out))
    result = false;
    disp([mfilename,': mod out not color filled: mod and/or out input vectors are empty.']);
    return;
elseif( ~isvector(mod) || ~isvector(out) ||...
        ~isequal(size(mod),size(out)) )    
    result = false;
    disp([mfilename,': mod out not color filled: mod and/or out input size not consistent.']);
    return;
end

result = false(size(mod));

% check fillColor input
if( iscell(fillColor) )
    if( length(fillColor) ~= 1 && length(fillColor) ~= length(mod) )
        disp([mfilename,': mod out not color filled: fillColor cell array size not 1 or length of mod and out.']);
        return;
    elseif( ischar(fillColor{1}) && ~ismember(fillColor{1}, allowedColorCharacters) )
        disp([mfilename,': mod out not color filled: fillColor character not member of {r,g,b,c,m,y,k,w}.']);
        return;
    elseif( ~isequal(size(fillColor{1}),[1,3]) || ~all(fillColor{1}>=0 & fillColor{1}<=1) )
        disp([mfilename,': mod out not color filled: fillColor not a valid color triple.']);
        return;
    end
else
    if( ischar(fillColor) )
        if( ~ismember(fillColor, allowedColorCharacters) )
            disp([mfilename,': mod out not color filled: fillColor character not member of {r,g,b,c,m,y,k,w}.']);
            return;
        end
    else
        if( ~isequal(size(fillColor),[1,3]) || ~all(fillColor>=0 & fillColor<=1) )
            disp([mfilename,': mod out not color filled: fillColor not a valid color triple.']);
            return;
        end
    end
end

        
% get x and y cordinates for approximate center of each mod out
[x,y] = morc_to_focal_plane_coords( mod(:), out(:), 535.*ones(size(mod(:))), 566.*ones(size(mod(:))), 'one-based' );


colorThisIdx = fillColor;

figure(gcf);

for iMO=1:length(mod)
    
    % get the color
    if( iscell(fillColor) )
        colorThisIdx = fillColor{iMO};
    end
    
    % check the color
    if( (ischar(colorThisIdx) && ismember(colorThisIdx, allowedColorCharacters)) ||...
            (isequal(size(colorThisIdx),[1,3]) && all(colorThisIdx>=0 & colorThisIdx<=1) ) )
        
        ch = get(gca,'Children');
        for i=1:length(ch)
            X = get(ch(i),'XData');
            Y = get(ch(i),'YData');
            if( is_inside_polygon(x(iMO),y(iMO),X,Y) )
                fill(X,Y,colorThisIdx);
                result(iMO) = true;
                break;
            end
        end
    else
        disp([mfilename,': mod out not color filled: fillColor not valid for mod/out ',num2str(mod(iMO)),'/',num2str(out(iMO)),'.']);
    end
end

