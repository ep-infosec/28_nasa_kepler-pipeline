function [paResultsStruct] = initialize_pa_output_structure(paDataObject)
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% function [paResultsStruct] = initialize_pa_output_structure(paDataObject)
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% Initialize the PA output structure. The output structure is fully
% documented in the header of the pa_matlab_controller function.
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% 
% Copyright 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% 
% NASA acknowledges the SETI Institute's primary role in authoring and
% producing the Kepler Data Processing Pipeline under Cooperative
% Agreement Nos. NNA04CC63A, NNX07AD96A, NNX07AD98A, NNX11AI13A,
% NNX11AI14A, NNX13AD01A & NNX13AD16A.
% 
% This file is available under the terms of the NASA Open Source Agreement
% (NOSA). You should have received a copy of this agreement with the
% Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
% 
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
% TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% 
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.
%


% Get fields and structures from the PA data object.
targetStarDataStruct = paDataObject.targetStarDataStruct;
nTargets = length(targetStarDataStruct);

% Set the target star results structure.
timeSeries = struct( ...
    'values', [], ...
    'uncertainties', [], ...
    'gapIndicators', [] );

simpleTimeSeries = struct( ...
    'values', 0, ...
    'uncertainties', 0);

offsetsStruct = struct( ...
    'row', 0, ...
    'column', 0);

% Initializing all of these to -1 so that when PA-COA is not enabled a
% value of other than emty set is passed to output (see KSOC-4140)
optimalApertureStruct = struct( ...
    'keplerId', -1, ...              
    'signalToNoiseRatio', -1, ...                  
    'fluxFractionInAperture', -1, ...              
    'crowdingMetric', -1, ...                      
    'skyCrowdingMetric', -1, ...                   
    'badPixelCount', -1, ...                       
    'distanceFromEdge', -1, ...                    
    'referenceRow', -1, ...                        
    'referenceColumn', -1, ...                     
    'saturatedRowCount', -1, ...                   
    'offsets', offsetsStruct, ...
    'apertureUpdatedWithPaCoa', false);


centroidTimeSeries = struct( ...
    'rowTimeSeries', timeSeries, ...
    'columnTimeSeries', timeSeries);

barycentricTimeOffset = struct( ...
    'values', [], ...
    'gapIndicators', []);

if ~isempty(paDataObject.rollingBandArtifactFlags) && ...
        strcmpi(paDataObject.cadenceType, 'long')
    
    testPulseDurations = ...
        unique([paDataObject.rollingBandArtifactFlags.testPulseDurationLc]);
    nPulses = length(testPulseDurations);

    contaminationTimeSeries = struct( ...
        'values', [], ...
        'gapIndicators', []);

    rollingBandContaminationStruct = repmat(struct( ...
        'testPulseDurationLc', 0, ...
        'severityFlags', contaminationTimeSeries), [1, nPulses]);

    for iPulse = 1 : nPulses
        rollingBandContaminationStruct(iPulse).testPulseDurationLc = ...
            testPulseDurations(iPulse);
    end % for iPulse

else
    
    rollingBandContaminationStruct = [];
    
end % if / else

if ~isempty(targetStarDataStruct)
    
    targetStarResultsStruct = repmat(struct( ...
        'keplerId', [], ...
        'keplerMag', [], ...
        'raHours', [], ...
        'decDegrees', [], ...
        'referenceRow', [], ...
        'referenceColumn', [], ...
        'fluxTimeSeries', timeSeries, ...
        'backgroundFluxTimeSeries', timeSeries,...
        'signalToNoiseRatioTimeSeries', simpleTimeSeries, ...
        'fluxFractionInApertureTimeSeries', simpleTimeSeries, ...
        'crowdingMetricTimeSeries', simpleTimeSeries, ...
        'skyCrowdingMetricTimeSeries', simpleTimeSeries, ...
        'prfCentroids', centroidTimeSeries,...
        'fluxWeightedCentroids', centroidTimeSeries, ...
        'barycentricTimeOffset', barycentricTimeOffset, ...
        'pixelApertureStruct', [], ...
        'optimalAperture', optimalApertureStruct, ...
        'rollingBandContaminationStruct', rollingBandContaminationStruct, ...
        'medianPhotocurrentAdded',0), [1, nTargets]);
    
    keplerIdCellArray = num2cell([targetStarDataStruct.keplerId]);
    [targetStarResultsStruct(1 : nTargets).keplerId] = keplerIdCellArray{:};
    
    % Note that keplerMag is not part of the Java/Matlab interface, but is
    % needed for excluding out of family centroids from the motion
    % polynomial fit.
    keplerMagCellArray = num2cell([targetStarDataStruct.keplerMag]);
    [targetStarResultsStruct(1 : nTargets).keplerMag] = keplerMagCellArray{:};
    
    raHoursCellArray = num2cell([targetStarDataStruct.raHours]);
    [targetStarResultsStruct(1 : nTargets).raHours] = raHoursCellArray{:};
    
    decDegreesCellArray = num2cell([targetStarDataStruct.decDegrees]);
    [targetStarResultsStruct(1 : nTargets).decDegrees] = decDegreesCellArray{:};
    
    referenceRowCellArray = num2cell([targetStarDataStruct.referenceRow]);
    [targetStarResultsStruct(1 : nTargets).referenceRow] = referenceRowCellArray{:};
    
    referenceColumnCellArray = num2cell([targetStarDataStruct.referenceColumn]);
    [targetStarResultsStruct(1 : nTargets).referenceColumn] = referenceColumnCellArray{:};

    % The following are generated by PA-COA
    nCadences = length(paDataObject.cadenceTimes.midTimestamps);
    fluxTimeSeriesStruct = struct('values', zeros(nCadences,1), 'gapIndicators', false(nCadences,1));
    fluxTimeSeriesCellArray = num2cell(repmat(fluxTimeSeriesStruct, [nTargets,1]));
    [targetStarResultsStruct(1 : nTargets).signalToNoiseRatioTimeSeries] = fluxTimeSeriesCellArray{:};
    [targetStarResultsStruct(1 : nTargets).fluxFractionInApertureTimeSeries] = fluxTimeSeriesCellArray{:};
    [targetStarResultsStruct(1 : nTargets).crowdingMetricTimeSeries] = fluxTimeSeriesCellArray{:};
    [targetStarResultsStruct(1 : nTargets).skyCrowdingMetricTimeSeries] = fluxTimeSeriesCellArray{:};
    
    % Initialize the pixel aperture structure for each target.
    for iTarget = 1 : nTargets
        
        pixelDataStruct = ...
            paDataObject.targetStarDataStruct(iTarget).pixelDataStruct;
        nPixels = length(pixelDataStruct);
        
        ccdRowCellArray = num2cell([pixelDataStruct.ccdRow]);
        [pixelApertureStruct(1 : nPixels).ccdRow] = ccdRowCellArray{:};
        
        ccdColumnCellArray = num2cell([pixelDataStruct.ccdColumn]);
        [pixelApertureStruct(1 : nPixels).ccdColumn] = ccdColumnCellArray{:};
        
        apertureIndicatorsCellArray = num2cell(false([1, nPixels]));
        [pixelApertureStruct(1 : nPixels).inPrfCentroidAperture] = ...
            apertureIndicatorsCellArray{:};
        [pixelApertureStruct(1 : nPixels).inFluxWeightedCentroidAperture] = ...
            apertureIndicatorsCellArray{:};
        
        targetStarResultsStruct(iTarget).pixelApertureStruct = ...
            pixelApertureStruct;
        clear pixelApertureStruct
        
    end % for iTarget
    
else % target star data structure is empty
    
    targetStarResultsStruct = [];
    
end % if / else

% Set the background and target results cosmic ray metrics structures.
cosmicRayTimeSeries = struct( ...
    'values', [], ...
    'gapIndicators', [] );

cosmicRayMetrics = struct( ...
    'empty', true, ...
    'hitRate', cosmicRayTimeSeries, ...
    'meanEnergy', cosmicRayTimeSeries, ...
    'energyVariance', cosmicRayTimeSeries, ...
    'energySkewness', cosmicRayTimeSeries, ...
    'energyKurtosis', cosmicRayTimeSeries);

% Set the encircled energy and brightness metrics. These are only computed
% on the last call for long cadence data.
encircledEnergyMetrics = timeSeries;
brightnessMetrics = timeSeries;

% Initialize the PA results structure.
paResultsStruct = struct( ...
    'processingState', paDataObject.processingState, ...
    'ccdModule', paDataObject.ccdModule, ...
    'ccdOutput', paDataObject.ccdOutput, ...
    'cadenceType', paDataObject.cadenceType, ...
    'startCadence', paDataObject.startCadence, ...
    'endCadence', paDataObject.endCadence, ...
    'targetStarResultsStruct', targetStarResultsStruct, ...
    'backgroundCosmicRayEvents', [], ...
    'backgroundCosmicRayMetrics', cosmicRayMetrics, ...
    'targetStarCosmicRayEvents', [], ...
    'targetStarCosmicRayMetrics', cosmicRayMetrics, ...
    'encircledEnergyMetrics', encircledEnergyMetrics, ...
    'brightnessMetrics', brightnessMetrics, ...
    'argabrighteningIndices', [], ...
    'reactionWheelZeroCrossingIndices', [],...
    'definiteThrusterActivityIndicators', [],...
    'possibleThrusterActivityIndicators', [],...
    'badPixels', [], ...
    'backgroundBlobFileName', '', ...
    'motionBlobFileName', '', ...
    'uncertaintyBlobFileName', '', ...
    'simulatedTransitsBlobFile','',...
    'alerts', []);

% Return.
return
