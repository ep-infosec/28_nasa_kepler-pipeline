function paDataStruct = pa_convert_82_data_to_83(paDataStruct)
%
% function paDataStruct = pa_convert_82_data_to_83(paDataStruct)
%
% Update 8.2-era PA input structures to 8.3. This is useful when testing
% with existing data sets.
%
% INPUTS:       paDataStruct    = SOC 8.2 paInputsStruct
% OUTPUTS:      paDataStruct    = SOC 8.3 paInputsStruct
%
% 
% Copyright 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% 
% NASA acknowledges the SETI Institute's primary role in authoring and
% producing the Kepler Data Processing Pipeline under Cooperative
% Agreement Nos. NNA04CC63A, NNX07AD96A, NNX07AD98A, NNX11AI13A,
% NNX11AI14A, NNX13AD01A & NNX13AD16A.
% 
% This file is available under the terms of the NASA Open Source Agreement
% (NOSA). You should have received a copy of this agreement with the
% Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
% 
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
% TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% 
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.
%

    % Set verbosity of assert_field()
    verbosity = false; 

    % Create config struct harmonicsIdentificationConfigurationStruct if it
    % doesn't exist.
    if ~isfield(paDataStruct,'harmonicsIdentificationConfigurationStruct')
        paDataStruct.harmonicsIdentificationConfigurationStruct = struct();
    end

    % Insert fields and default values into
    % harmonicsIdentificationConfigurationStruct, if necessary.
    paDataStruct.harmonicsIdentificationConfigurationStruct = ...
        assert_field(paDataStruct.harmonicsIdentificationConfigurationStruct, ...
        'falseDetectionProbabilityForTimeSeries', 0.0010, verbosity);
    paDataStruct.harmonicsIdentificationConfigurationStruct = ...
        assert_field(paDataStruct.harmonicsIdentificationConfigurationStruct, ...
        'maxHarmonicComponents', 25, verbosity);
    paDataStruct.harmonicsIdentificationConfigurationStruct = ...
        assert_field(paDataStruct.harmonicsIdentificationConfigurationStruct, ...
        'medianWindowLengthForPeriodogramSmoothing', 47, verbosity);
    paDataStruct.harmonicsIdentificationConfigurationStruct = ...
        assert_field(paDataStruct.harmonicsIdentificationConfigurationStruct, ...
        'medianWindowLengthForTimeSeriesSmoothing', 21, verbosity);
    paDataStruct.harmonicsIdentificationConfigurationStruct = ...
        assert_field(paDataStruct.harmonicsIdentificationConfigurationStruct, ...
        'minHarmonicSeparationInBins', 25, verbosity);
    paDataStruct.harmonicsIdentificationConfigurationStruct = ...
        assert_field(paDataStruct.harmonicsIdentificationConfigurationStruct, ...
        'movingAverageWindowLength', 47, verbosity);
    paDataStruct.harmonicsIdentificationConfigurationStruct = ...
        assert_field(paDataStruct.harmonicsIdentificationConfigurationStruct, ...
        'timeOutInMinutes', 2.5000, verbosity);


    % Insert fields and default values into gapFillConfigurationStruct,
    % if necessary. Note that older versions of gapFillConfigurationStruct may
    % be missing some fields required by the 8.3 gap filler.
    paDataStruct.gapFillConfigurationStruct = ...
        assert_field(paDataStruct.gapFillConfigurationStruct, ...
        'madXFactor', 10, verbosity);
    paDataStruct.gapFillConfigurationStruct = ...
        assert_field(paDataStruct.gapFillConfigurationStruct, ...
        'maxGiantTransitDurationInHours', 72, verbosity);
    paDataStruct.gapFillConfigurationStruct = ...
        assert_field(paDataStruct.gapFillConfigurationStruct, ...
        'maxDetrendPolyOrder', 25, verbosity);
    paDataStruct.gapFillConfigurationStruct = ...
        assert_field(paDataStruct.gapFillConfigurationStruct, ...
        'maxArOrderLimit', 25, verbosity);
    paDataStruct.gapFillConfigurationStruct = ...
        assert_field(paDataStruct.gapFillConfigurationStruct, ...
        'maxCorrelationWindowXFactor', 5, verbosity);
    paDataStruct.gapFillConfigurationStruct = ...
        assert_field(paDataStruct.gapFillConfigurationStruct, ...
        'gapFillModeIsAddBackPredictionError', true, verbosity);
    paDataStruct.gapFillConfigurationStruct = ...
        assert_field(paDataStruct.gapFillConfigurationStruct, ...
        'waveletFamily', 'daub', verbosity);
    paDataStruct.gapFillConfigurationStruct = ...
        assert_field(paDataStruct.gapFillConfigurationStruct, ...
        'waveletFilterLength', 12, verbosity);
    paDataStruct.gapFillConfigurationStruct = ...
        assert_field(paDataStruct.gapFillConfigurationStruct, ...
        'giantTransitPolyFitChunkLengthInHours', 72, verbosity);
    paDataStruct.gapFillConfigurationStruct = ...
        assert_field(paDataStruct.gapFillConfigurationStruct, ...
        'removeEclipsingBinariesOnList', true, verbosity);
    paDataStruct.gapFillConfigurationStruct = ...
        assert_field(paDataStruct.gapFillConfigurationStruct, ...
        'arAutoCorrelationThreshold', 0.0500, verbosity);
    paDataStruct.gapFillConfigurationStruct = ...
        assert_field(paDataStruct.gapFillConfigurationStruct, ...
        'cadenceDurationInMinutes', 30, verbosity);


    % Insert fields and default values into cosmicRayConfigurationStruct,
    % if necessary. 
    paDataStruct.cosmicRayConfigurationStruct = ...
        assert_field(paDataStruct.cosmicRayConfigurationStruct, ...
        'gapLengthThreshold', 10, verbosity);
    paDataStruct.cosmicRayConfigurationStruct = ...
        assert_field(paDataStruct.cosmicRayConfigurationStruct, ...
        'longMedianFilterLength', 49, verbosity);
    paDataStruct.cosmicRayConfigurationStruct = ...
        assert_field(paDataStruct.cosmicRayConfigurationStruct, ...
        'shortMedianFilterLength', 3, verbosity);
    paDataStruct.cosmicRayConfigurationStruct = ...
        assert_field(paDataStruct.cosmicRayConfigurationStruct, ...
        'arOrder', 50, verbosity);
    paDataStruct.cosmicRayConfigurationStruct = ...
        assert_field(paDataStruct.cosmicRayConfigurationStruct, ...
        'detectionThreshold', 4, verbosity);

return
