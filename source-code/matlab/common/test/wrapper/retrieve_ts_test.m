
%
% Copyright 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% 
% This file is available under the terms of the NASA Open Source Agreement
% (NOSA). You should have received a copy of this agreement with the
% Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
% 
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
% TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% 
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.
%

ppa_targets = retrieve_kepler_ids_by_label('quarter2_summer2009_lc', 'labels', {'PPA_STELLAR'});
ppa_keps = [ppa_targets.keplerId];
dataRange = retrieve_available_data_ranges();
tic; ts = retrieve_ts('PdcSapCorrectedFlux', ppa_keps, dataRange(5).startMjd, dataRange(5).endMjd); toc

%   Extract the PA flux time series and uncertainties for three keplerIds
%   for the first of 501 cadences and plot the ungapped data points with
%   errorbars:

keplerIds = [8413815 8348641 8480304];
startCadence = 0;
endCadence = 500;
tsFlux              = retrieve_ts('SapRawFluxLong',       keplerIds, startCadence, endCadence);
tsFluxUncertainties = retrieve_ts('SapRawFluxLongUncert', keplerIds, startCadence, endCadence);
% errorbar(tsFlux(1).mjds.mjdMidTime, tsFlux(1).tseries(~tsFlux(1).gapIndicators), tsFluxUncertainties(1).tseries(~tsFluxUncertainties(1).gapIndicators))

lotsKeplerIds = [10391217 10391218 10391219 10391220 10391221 10391222 10391223 ...
    10391224 10391225 10391226 10391227 10391228 10391229 10391230 10391231 ...
    10391232 10391233 10391234 10391235 10391236 10391237 10391238 10391239 ...
    10391240 10391241 10391242 10391243 10391244 10391245 10391246 10391247 ...
    10391248 10391249 10391250 10391251 10391252 10390976 10390977 10390978 ...
    10390979 10390980 10390981 10390982 10390983 10390984 10390985 10390986 ...
    10390987 10390988 10390989 10390990 10390991 10390992 10390993 10391253 ...
    10391254 10391255 10391256 10391051 10391052 10391053 10391054 10391055 ...
    10391056 10391057 10391058 10391059 10391060 10391061 10391062 10391063 ...
    10391064 10391065 10391066 10391067 10391068 10391069 10391070 10391071 ...
    10391072 10391073 10391074 10391075 10391076 10391077 10391078 10391079 ...
    10391080 10391081 10391082 10391083 10391084 10391085 10391086 10391087 ...
    10391088 10391089 10391794 10391795 10391796 10391797 10391798 10391799 ...
    10391800 10391801 10391802 10391803 10391804 10391805 10391806 10391807 ...
    10391808 10391809 10391810 10391811 10391812 10391813 10391814 10391815 ...
    10391816 10391817 10391818 10391819 10391820 10391821 10391822 10391823 ...
    10391824 10391825 10391826 10391827 10391828 10391829 10391830 10392683 ...
    10392686 10392687 10392688 10392689 10392690 10392691 10392692 10392693 ...
    10392695 10392696 10392697 10392700 10392701 10392702 10391853 10391854 ...
    10391855 10391856 10391857 10391858 10391859 10391860 10391861 10391862 ...
    10391863 10391864 10391865 10391866 10391867 10391868 10391869 10391870 ...
    10391871 10391872 10391873 10391874 10391875 10391876 10391877 10391878 ...
    10391879 10391880 10391881 10391882 10391883 10391884 10391885 10391886 ...
    10391887 10391888 10392737 10392738 10392743 10392744 10392745 10392746 ...
    10392747 10392748 10392749 10392750 10392752 10392755 10391257 10392112 ...
    10392113 10392114 10392115 10392116 10392117 10392118 10392119 10392120 ...
    10392121 10392122 10392123 10392124 10392125 10392126 10392127 10392128 ...
    10392193 10392194 10392195 10392196 10392197 10392198 10392199 10392200 ...
    10392201 10392202 10392203 10392204 10392205 10392206 10392207 10392208 ...
    10392209 10392210 10392211 10392212 10392213 10392214 10392215 10392216 ...
    10392217 10392218 10392219 10392220 10392221 10392222 10392223 10392224 ...
    10392225 10392017 10392018 10392019 10392020 10392021 10392022 10392023 ...
    10392024 10392025 10392026 10392027 10392028 10392029 10392030 10392031 ...
    10392032 10392033 10392034 10392035 10392036 10392037 10392038 10392039 ...
    10392040 10392041 10392042 10392043 10392044 10392045 10392046 10392047 ...
    10392048 10392049 10392050 10392051 10392052 10392053 10392054 10392055 ...
    10392056 10392908 10392917 10392924 10521304 10521305 10521306 10521307 ...
    10521308 10521309 10521310 10521311 10521312 10521313 10521314 10521315 ...
    10521316 10521317 10521318 10521319 10521320 10521321 10521322 10521323 ...
    10521324 10521325 10521326 10521327 10521328 10521329 10521330 10521331 ...
    10521332 10521333 10521334 10521335 10521336 10521337 10521338 10521339 ...
    10521340 10521341 10521342 10521343 10521344 10521345 10521346 10521347 ...
    10521348 10521349 10521350 10521351 10521352 10521353 10521354 10521355 ...
    10521356 10521357 10521358 10522219 10522220 10522221 10392285 10392286 ...
    10392287 10391665 10391666 10391667 10391513 10391514 10391515 10391516 ...
    10391517 10391518 10391519 10391520 10391521 10391522 10391523 10391524 ...
    10391525 10391526 10391527 10391528 10391529 10391530 10391531 10391532 ...
    10391533 10391534 10391535 10391536 10391537 10391538 10391539 10391540 ...
    10391541 10391542 10391543 10391544 10391545 10392400 10392401 10392402 ...
    10392403 10392404 10392405 10392406 10392407 10392408 10391394 10391395 ...
    10391396 10391397 10391398 10391399 10391400 10391401 10391402 10391403 ...
    10391404 10391405 10391406 10391407 10391408 10391409 10391410 10391411 ...
    10391412 10391413 10391414 10391415 10391416 10391417 10391418 10391419 ...
    10391420 10391421 10391422 10391423 10391424 10391425 10391426 10391427 ...
    10391428 10391429 10391430 10392288 10392289 10392290 10392291 10392292 ...
    10392293 10392294 10392295 10392296 10392297 10392298 10392299 10392300 ...
    10392301 10390766 10390767 10390768 10390769 10390772 10390774 10390776 ...
    10390777 10390778 10390779 10390781 10390782 10390784 10390786 10390790 ...
    10390792 10390794 10390798 10391660 10391661 10391662 10391663 10391664 ...
    10391668 10391669 10391670 10391671 10391672 10391673 10391674 10391675 ...
    10391676 10391677 10391678 10391679 10391680 10391681 10391682 10391890 ...
    10391891 10391892 10391731 10391732 10391733 10391734 10391735 10391736 ...
    10391737 10391738 10391739 10391740 10391741 10391742 10391743 10391744 ...
    10391745 10391746 10391747 10391748 10391749 10391750 10391751 10391752 ...
    10391753 10391754 10391755 10391756 10391757 10391758 10391759 10391760 ...
    10391761 10391762 10391763 10391764 10391765 10391766 10391767 10391768 ...
    10391769 10392478 10392479 10392480 10392481 10392482 10392483 10392484 ...
    10392485 10392486 10392487 10392488 10392489 10392490 10392491 10392492 ...
    10392493 10392494 10392495 10392496 10392497 10392498 10392499 10392500 ...
    10392501 10392502 10392503 10392504 10392505 10392506 10392507 10392508 ...
    10392509 10392510 10392511 10392512 10392537 10392538 10392539 10392540 ...
    10392541 10392542 10392543 10392544 10392545 10392546 10392547 10392548 ...
    10392549 10392550 10392551 10392552 10392553 10392554 10392555 10392556 ...
    10392557 10392558 10392559 10392560 10392561 10392562 10392563 10392564 ...
    10392565 10392566 10392567 10392568 10392569 10392570 10390994 10390995 ...
    10390996 10390997 10390998 10390999 10391000 10391001 10391002 10391003 ...
    10391004 10391005 10391006 10391007 10391008 10391009 10391010 10391011 ...
    10391012 10391013 10391014 10391015 10391016 10391017 10391018 10391019 ...
    10391020 10391021 10391022 10391023 10391024 10391025 10391026 10391027 ...
    10391028 10391029 10391030 10391031 10391889 10391893 10391894 10391895 ...
    10391896 10391897 10391898 10391899 10391900 10391901 10391902 10391903 ...
    10391904 10391905 10391258 10391259 10391260 10391261 10391960 10391961 ...
    10391962 10391963 10391964 10391965 10391966 10391967 10391968 10391969 ...
    10391970 10391971 10391972 10391973 10391974 10391975 10391976 10391977 ...
    10391978 10391979 10391980 10391981 10391982 10391983 10391984 10391985 ...
    10391986 10391987 10391988 10391989 10391990 10391991 10391992 10391993 ...
    10391994 10391995 10391996 10391997 10392703 10392704 10392705 10392707 ...
    10392708 10392710 10392711 10392712 10392713 10392714 10392715 10392719 ...
    10392720 10392721 10392722 10392723 10392725 10392727 10392728 10392729 ...
    10392731 10392732 10392734 10392735 10392736 10392758 10392759 10392760 ...
    10392761 10392762 10392763 10392765 10392766 10392767 10392768 10392770 ...
    10392772 10392777 10392779 10392781 10392782 10392783 10392786 10392787 ...
    10392792 10391145 10391146 10392129 10392130 10392131 10392132 10392133 ...
    10392134 10392135 10392136 10392137 10392138 10392139 10392140 10392141 ...
    10392142 10392143 10392144 10392145 10392146 10392147 10392148 10392149 ...
    10392150 10392151 10392152 10392153 10392154 10392155 10392156 10392157 ...
    10392158 10392159 10392160 10392161 10392162 10392163 10392164 10392165 ...
    10392166 10392167 10392168 10391378 10391379 10391380 10392928 10391315 ...
    10391435 10391436 10391437 10391438 10391439 10391440 10391147 10391148 ...
    10391149 10391150 10391151 10391152 10391153 10391154 10391155 10391156 ...
    10391157 10391158 10391375 10391376 10391377 10391381 10391382 10391383 ...
    10391384 10391385 10391386 10391387 10391388 10391389 10391390 10391391 ...
    10391392 10391393 10392302 10392303 10392304 10392305 10392306 10392307 ...
    10392308 10392309 10392310 10392311 10392312 10392313 10392314 10392315 ...
    10392316 10392317 10392318 10392319 10392320 10392321 10392322 10392323 ...
    10392324 10392325 10392326 10392327 10392328 10392329 10392330 10392331 ...
    10392332 10392333 10392334 10392335 10392336 10392337 10392338 10392339 ...
    10392340 10392577 10392578 10392579 10392425 10392426 10392427 10392428 ...
    10392429 10392430 10392431 10392432 10392433 10392434 10392435 10392436 ...
    10392437 10392438 10392439 10392440 10392441 10392442 10392443 10392444 ...
    10392445 10392446 10392447 10392448 10392449 10392450 10392451 10392452 ...
    10392453 10392454 10392455 10392456 10391316 10391317 10391318 10391319 ...
    10391320 10391321 10391322 10391323 10391324 10391325 10391326 10391327 ...
    10391328 10391329 10391330 10391331 10391332 10391333 10391334 10391335 ...
    10391441 10391442 10391443 10391444 10391445 10391446 10391447 10391448 ...
    10391449 10391450 10391451 10391452 10391453 10391454 10391455 10391456 ...
    10391457 10391458 10391459 10391460 10391461 10391462 10391463 10391464 ...
    10391465 10391466 10391467 10391468 10391469 10391470 10391471 10391472 ...
    10391473 10391474 10391475 10391476 10391477 10391478 10391479 10391480 ...
    10391481 10391482 10391483 10391484 10391485 10391683 10391684 10391685 ...
    10391686 10391687 10391688 10391689 10391690 10391691 10391692 10391693 ...
    10391694 10391695 10391696 10391697 10391698 10391699 10391700 10391701 ...
    10391702 10391703 10391704 10391705 10391706 10391707 10391708 10391709 ...
    10391710];

tsFlux              = retrieve_ts('SapRawFluxLong',       lotsKeplerIds, startCadence, endCadence);
tsFluxUncertainties = retrieve_ts('SapRawFluxLongUncert', lotsKeplerIds, startCadence, endCadence);
tsFlux              = retrieve_ts('SapRawFluxShort',       lotsKeplerIds, startCadence, endCadence);
tsFluxUncertainties = retrieve_ts('SapRawFluxShortUncert', lotsKeplerIds, startCadence, endCadence);

%   Get the PA PRF centroid row values/uncertainties for three keplerIds for the first
%   501 cadences and plot the ungapped data with errorbars:
keplerIds = [8738591 8480097 8415474];
tsPrfCentRow       = retrieve_ts('PrfCentroidRows',       keplerIds, startCadence, endCadence);
tsPrfCentRow       = retrieve_ts('PrfCentroidRowsShort',       keplerIds, startCadence, endCadence);
tsPrfCentRowUncert = retrieve_ts('PrfCentroidRowsUncert', keplerIds, startCadence, endCadence);
tsPrfCentRowUncert = retrieve_ts('PrfCentroidRowsUncertShort', keplerIds, startCadence, endCadence);
% errorbar([tsPrfCentRow(1).mjds.mjdMidTime], tsPrfCentRow(1).tseries(~tsPrfCentRow(1).gapIndicators), tsPrfCentRowUncert(1).tseries(~tsPrfCentRowUncert(1).gapIndicators))

tsPrfCentCol       = retrieve_ts('PrfCentroidCols',       keplerIds, startCadence, endCadence);
tsPrfCentColUncert = retrieve_ts('PrfCentroidColsUncert', keplerIds, startCadence, endCadence);
tsPrfCentCol       = retrieve_ts('PrfCentroidColsShort',       keplerIds, startCadence, endCadence);
tsPrfCentColUncert = retrieve_ts('PrfCentroidColsUncertShort', keplerIds, startCadence, endCadence);
% errorbar([tsPrfCentCol(1).mjds.mjdMidTime], tsPrfCentCol(1).tseries(~tsPrfCentCol(1).gapIndicators), tsPrfCentColUncert(1).tseries(~tsPrfCentColUncert(1).gapIndicators))



%   Get the flux-weighted centroids and plot them against cadence number
%   with errorbars, and also on a row/column plot:
keplerIds = [8804455 8148841 8609873];
fwcRows       = retrieve_ts('FluxWeightedCentroidRows', keplerIds, startCadence, endCadence);
fwcRowsUncert = retrieve_ts('FluxWeightedCentroidRowsUncert', keplerIds, startCadence, endCadence);
fwcCols       = retrieve_ts('FluxWeightedCentroidCols', keplerIds, startCadence, endCadence);
fwcColsUncert = retrieve_ts('FluxWeightedCentroidColsUncert', keplerIds, startCadence, endCadence);
fwcRows       = retrieve_ts('FluxWeightedCentroidRowsShort', keplerIds, startCadence, endCadence);
fwcRowsUncert = retrieve_ts('FluxWeightedCentroidRowsUncertShort', keplerIds, startCadence, endCadence);
fwcCols       = retrieve_ts('FluxWeightedCentroidColsShort', keplerIds, startCadence, endCadence);
fwcColsUncert = retrieve_ts('FluxWeightedCentroidColsUncertShort', keplerIds, startCadence, endCadence);
row = fwcRows(1).tseries(~fwcRows(1).gapIndicators);
col = fwcCols(1).tseries(~fwcRows(1).gapIndicators);
rowe = fwcRowsUncert(1).tseries(~fwcRowsUncert(1).gapIndicators);
cole = fwcColsUncert(1).tseries(~fwcRowsUncert(1).gapIndicators);
% errorbar([fwcRows(1).mjds.mjdMidTime], row, rowe)
% errorbar([fwcCols(1).mjds.mjdMidTime], col, cole)
plot(row,col,'x')



%   Get the SAP centroids and uncertainties for three Kepler IDS, plot them
%   individually with errorbars, and also display a row/column plot:
keplerIds = [7875476  8218649 8150327];
sapCols       = retrieve_ts('SapCentroidCols',       keplerIds, startCadence, endCadence);
sapColsUncert = retrieve_ts('SapCentroidColsUncert', keplerIds, startCadence, endCadence);
sapRows       = retrieve_ts('SapCentroidRows',       keplerIds, startCadence, endCadence);
sapRowsUncert = retrieve_ts('SapCentroidRowsUncert', keplerIds, startCadence, endCadence);
sapCols       = retrieve_ts('SapCentroidColsShort',       keplerIds, startCadence, endCadence);
sapColsUncert = retrieve_ts('SapCentroidColsUncertShort', keplerIds, startCadence, endCadence);
sapRows       = retrieve_ts('SapCentroidRowsShort',       keplerIds, startCadence, endCadence);
sapRowsUncert = retrieve_ts('SapCentroidRowsUncertShort', keplerIds, startCadence, endCadence);
% errorbar([sapCols(1).mjds.mjdMidTime], sapCols(1).tseries(~sapCols(1).gapIndicators), sapColsUncert(1).tseries(~sapCols(1).gapIndicators));
% errorbar([sapCols(1).mjds.mjdMidTime], sapRows(1).tseries(~sapRows(1).gapIndicators), sapRowsUncert(1).tseries(~sapRows(1).gapIndicators));
plot(sapRows(1).tseries(~sapRows(1).gapIndicators), sapCols(1).tseries(~sapCols(1).gapIndicators),'x')



%   Get the CR mean energy for a mod/out and plot it:
%
startCadence = 0; endCadence = 355;
ccdMod = 7; ccdOut = 3;
cosmicRayMeanEnergy = retrieve_ts('PaLcCosmicRayMeanEnergy', ccdMod, ccdOut, startCadence, endCadence);
plot(cosmicRayMeanEnergy.tseries(~cosmicRayMeanEnergy.gapIndicators),'x-')
ts = retrieve_ts('PaBrightness', 7, 3, 0, 360);
tsUncert = retrieve_ts('PaBrightnessUncert', 7, 3, 0, 360);
% errorbar([ts.mjds.mjdMidTime], ts.tseries(~ts.gapIndicators), tsUncert.tseries(~tsUncert.gapIndicators))


ts = retrieve_ts('CalAchievedCompEfficiencyCounts', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalTheoreticalCompEffCounts', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalAchievedCompEfficiency', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalBlackLevel', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalBlackLevelUncert', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalDarkCurrent', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalDarkCurrentUncert', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalSmearLevel', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalSmearLevelUncert', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalTheoreticalCompEff', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalAchievedCompEfficiencyCountsShort', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalTheoreticalCompEffCountsShort', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalAchievedCompEfficiencyShort', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalBlackLevelShort', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalBlackLevelUncertShort', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalDarkCurrentShort', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalDarkCurrentUncertShort', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalSmearLevelShort', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalSmearLevelUncertShort', 7, 3, 0, 360); plot(ts.tseries);
ts = retrieve_ts('CalTheoreticalCompEffShort', 7, 3, 0, 360); plot(ts.tseries);

ts = retrieve_ts('PaLcCosmicRayMeanEnergy', 7, 3, 0, 360); %plot(ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PaBrightness', 7, 3, 0, 360); %plot(ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PaBrightnessUncert', 7, 3, 0, 360); %plot(ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PaBgCosmicRayEnergyKurtosis', 7, 3, 0, 360); %plot(ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PaBgCosmicRayEnergySkewness', 7, 3, 0, 360); %plot(ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PaBgEnergyVariance', 7, 3, 0, 360); %plot(ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PaBgHitRate', 7, 3, 0, 360); %plot(ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PaBgMeanEnergy', 7, 3, 0, 360); %plot(ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PaLcEnergyKurtosis', 7, 3, 0, 360); %plot(ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PaLcEnergySkewness', 7, 3, 0, 360); %plot(ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PaLcEnergyVariance', 7, 3, 0, 360); %plot(ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PaLcHitRate', 7, 3, 0, 360); %plot(ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PaLcMeanEnergy', 7, 3, 0, 360); %plot(ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PaEncircledEnergy', 7, 3, 0, 360); %plot(ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PaEncircledEnergyUncert', 7, 3, 0, 360); %plot(ts.tseries(~ts.gapIndicators));


list = retrieve_ts('DrCollateralLongVirtualSmear', 7, 3, 37, 0, 400);
list = retrieve_ts('DrCollateralLongMaskedSmear', 7, 3, 37, 0, 400);
list = retrieve_ts('DrCollateralLongBlack', 7, 3, 37, 0, 400);

ts = retrieve_ts('PpaMaxAttitudeFocalPlaneResidual', 0, 400); %plot([ts.mjds.mjdMidTime], ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PpaCovarianceMatrix13', 0, 400); %plot([ts.mjds.mjdMidTime], ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PpaCovarianceMatrix11', 0, 400); %plot([ts.mjds.mjdMidTime], ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PpaCovarianceMatrix12', 0, 400); %plot([ts.mjds.mjdMidTime], ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PpaCovarianceMatrix23', 0, 400); %plot([ts.mjds.mjdMidTime], ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PpaCovarianceMatrix33', 0, 400); %plot([ts.mjds.mjdMidTime], ts.tseries(~ts.gapIndicators));
ts = retrieve_ts('PpaCovarianceMatrix22', 0, 400); %plot([ts.mjds.mjdMidTime], ts.tseries(~ts.gapIndicators));

fsIdStrings = {'/pa/targets/Sap/FluxWeighted/CentroidRows/long/8804455', '/pa/targets/Sap/FluxWeighted/CentroidRows/long/8148841'};
fsIdType = 'ts';
tsl = retrieve_ts('user_specified_fs_ids', fsIdStrings, fsIdType, startCadence, endCadence);

fsIdStrings = {'/pa/targets/Sap/FluxWeighted/CentroidCols/short/5105070', '/pa/targets/Sap/CentroidRowsUncertainties/short/12104686'};
fsIdType = 'ts';
tss = retrieve_ts('user_specified_fs_ids_short', fsIdStrings, fsIdType, startCadence*30, endCadence*30);
assert_equals(length([tss(1).mjds.mjdStartTime]), length([tss(2).mjds.mjdStartTime]));
assert_equals(true, length([tss(1).mjds.mjdStartTime]) > 100);


ts = retrieve_ts('PdcSapCorrectedFlux', 9283708, 16, 35);
ts = retrieve_ts('PdcSapCorrectedFluxUncert', 9283708, 16, 35);
ts = retrieve_ts('PdcSapFilledIndices', 9283708, 16, 35);

%  List the available FS IDs for all of Cal:
fsids = retrieve_ts('ls', '/cal');
%  all of Cal's long cadence calibrated pixels values:
fsids = retrieve_ts('ls', '/cal/pixels/SocCal/lct');
%  Cal's long candence calibrated pixel uncertainties:
fsids = retrieve_ts('ls', '/cal/pixels/SocCalUncertainties/lct');

startCadence = 0;
endCadence = 1500;
barycentricTimeOffsetLong  = retrieve_ts('PaBarycentricTimeOffsetLong',  1723671, startCadence, endCadence);
barycentricTimeOffsetShort = retrieve_ts('PaBarycentricTimeOffsetShort', 3425564, startCadence, endCadence);


