function marByQuarter = retrieve_pdq_mar(reportFile)
%function marByQuarter = retrieve_pdq_mar(reportFile)
%
% Retrieve the Maximum Attitude Residual (MAR) time series generated by PDQ.
%
% The reportFile argument is optional.  If present, a textual report will
% be written to the file specified.
%
% OUTPUTS:
%
% 1xN struct array (1 per reference pixel target table) with fields:
%    refPixelTargetTableId         Target table ID 
%    maxAttitudeResidualInPixels   
%       values                     MAR value per cadence
%       gapIndicators              MAR gap indicators
%       uncertainties              MAR uncertainties
%    timestamps
%       startTimes                 MJD start time per cadence
%       refPixelFileNames          Name of the .rp files
%       processed                  Flag indicating whether PDQ has
%                                  processed this cadence
%       excluded                   Not used (always false)
%
% EXAMPLE:
%
% To plot MAR for all available quarters on the same plot, you could do:
%
% marByQuarter = retrieve_pdq_mar;
% figure;
% hold on;
%
% for i = 1:length(marByQuarter.quarters)
%     q = marByQuarter.quarters(i)
%     plot(q.timestamps.startTimes, q.maxAttitudeResidualInPixels.values, '.-b');
% end
%
% 
% Copyright 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% 
% This file is available under the terms of the NASA Open Source Agreement
% (NOSA). You should have received a copy of this agreement with the
% Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
% 
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
% TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% 
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.
%
    
import gov.nasa.kepler.systest.sbt.SandboxTools;
SandboxTools.displayDatabaseConfig;

import gov.nasa.kepler.systest.sbt.SbtRetrievePdqMar;

sbt = SbtRetrievePdqMar;
pathJava = sbt.retrieveMar();

path = pathJava.toCharArray()';

marByQuarter = sbt_sdf_to_struct(path);

if(nargin == 1)
    % generate a report to the specified file
    fid = fopen(reportFile,'wt');
    
    fprintf(fid,'MJD\t\t\tTTID\t\tGAP\t\tMAR (pixels)\tMAR uncertainty\n');
    
    for i = 1:length(marByQuarter.quarters);
        q = marByQuarter.quarters(i);
        ttid = q.refPixelTargetTableId;
        mjds = q.timestamps.startTimes;
        gaps = q.maxAttitudeResidualInPixels.gapIndicators;
        mars = q.maxAttitudeResidualInPixels.values;
        marsu= q.maxAttitudeResidualInPixels.uncertainties;
        
        for j = 1:length(mjds);
            fprintf(fid,'%10.5f\t\t%d\t\t%d\t\t%5.4f\t\t%e\n',...
                mjds(j),ttid,gaps(j),mars(j),marsu(j));            
%            fprintf(fid,'%10.5f\t\t%d\t\t%d\t\t%5.4f\t\t%7.6f\n',...
%                mjds(j),ttid,gaps(j),mars(j),marsu(j));            
        end
    end
    
    fclose(fid);
end

SandboxTools.close;

