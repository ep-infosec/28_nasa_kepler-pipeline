function varargout = invoke_and_save(varargin)
% dataStruct = invoke_and_save(saveDirectory, sbtFunctionName, sbtFunctionArg1, sbtFunctionArg2, ..., lastSbtFunctionArg)
% 
% Run the sandbox tool specified in the second argument (varargin{2}), passing
% it the arguments in varargin{3:end} cell array. Save the output to the directory specified in the first argument 
% varargin{1} to the unique timestamped filename generated by make_save_mat_filename.
%
% E.g.:
%
%     startMjd = 55000;
%     endMjd = 55100;
%     saveDirectory = '/path/to/wrapper_mats/';
%     raDec2PixModel = invoke_and_save(saveDirectory, 'retrieve_ra_dec_2_pix_model', startMjd, endMjd);
%     raDec2PixModel2 = invoke_and_save(saveDirectory, 'retrieve_ra_dec_2_pix_model');
%
%     readNoiseModel = invoke_and_save(saveDirectory, 'retrieve_read_noise_model', startMjd, endMjd);
%
%     tadInputStruct = invoke_and_save(saveDirectory, 'retrieve_tad', 2, 1, 'quarter1_spring2009_lc', 1);
%
% 
% Copyright 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% 
% This file is available under the terms of the NASA Open Source Agreement
% (NOSA). You should have received a copy of this agreement with the
% Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
% 
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
% TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% 
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.
%

    DIR_INDEX = 1;
    SBT_INDEX = 2;
    ARG_START_INDEX = 3;

    % Validate that saveDirectory is a valid directory. If not, error
    % out:
    %
    saveDirectory = varargin{DIR_INDEX};
    isValidDirectory = (7 == exist(saveDirectory, 'dir'));
    if ~isValidDirectory
        error('MATLAB:SBT:wrapper:invoke_and_save', 'Directory "%s" does not exist. Exiting.', saveDirectory);
    end
    
    % Validate the the sbtFunctionName is a valid .m file. If so, create a 
    % function handle for it and separate out the arguments:
    %
    sbtFunctionName = varargin{SBT_INDEX};
    isValidFunction = (2 == exist(sbtFunctionName));
    if ~isValidFunction 
        error('MATLAB:SBT:wrapper:invoke_and_save', 'Function name: "%s" is not a function on MATLAB''s search path. Exiting.', sbtFunctionName);
    end
    sbtFunctionHandle = str2func(sbtFunctionName);
    sbtArgs = varargin(ARG_START_INDEX:end);

    % Generate the filename and allocate the variable-length output cell
    % array:
    %
    filename = make_save_mat_filename(saveDirectory, sbtFunctionName, sbtArgs{:});
    nargoutCount = nargout(sbtFunctionHandle);
    varargout = cell(nargoutCount, 1);

    % Run the specified SBT and catch the nargoutCount number of outputs 
    % in the varargout cell array:
    %
    [varargout{:}] = feval(sbtFunctionHandle, sbtArgs{:});
    
    % Save the output data to the MAT file:
    %
    cacheData = varargout;
    lastwarn('clear the last warning field');
    save(filename, 'cacheData');
    [warningMessage warningId] = lastwarn();
    if strfind(warningMessage, 'is not serializable')
        error('MATLAB:SBT:wrapper:invoke_and_save', ...
              'The ''save'' function failed to serialize one or more fields in the output.  The warning returned was:\n\tWarning ID:%s\n\tWarning Message: %s.', ...
              warningId, warningMessage);
    end
end
