function tpsResults = initialize_tps_results_struct( tpsObject, numTrialTransitDurations )
%
% initialize_tps_results_struct -- initialize the tpsResults struct
%
% tpsResults = initialize_tps_results_struct( tpsObject ) initializes the tpsResults
%    struct.  The struct has dimensions of (nTargets x nPulseLengths) x 1, and the
%    following fields:
%
%       keplerId
%       requiredTrialTransitPulseInHours
%       maxSingleEventStatistic
%       minSingleEventStatistic
%       meanSingleEventStatistic
%       rmsCdpp
%       cdppTimeSeries
%       harmonicTimeSeries
%       correlationTimeSeries
%       normalizationTimeSeries
%       matchedFilterUsed
%       isResultValid
%       correlationTimeSeriesHiRes
%       normalizationTimeSeriesHiRes
%       detrendedFluxTimeSeries
%       bestPhaseInCadences
%       bestOrbitalPeriodInCadences
%       maxMultipleEventStatistic
%       detectedOrbitalPeriodInDays
%       timeToFirstTransitInDays
%       timeOfFirstTransitInMjd
%       bestMicrolensOrbitalPeriodInCadences
%       detectedMicrolensOrbitalPeriodInDays
%       bestMicrolensPhaseInCadences
%       timeToFirstMicrolensInDays
%       timeOfFirstMicrolensInMjd
%       minMultipleEventStatistic
%       isPlanetACandidate
%       foldedStatisticAtTrialPhases
%       phaseLagInCadences
%       foldedStatisticAtTrialPeriods
%       possiblePeriodsInCadences
%       deemphasisWeight
%       deemphasisWeightSuperResolution
%       indexOfSesAdded
%       sesCombinedToYieldMes
%       isShortPeriodEclipsingBinary
%       exceedsMesSesRatio
%       mesSesRatio
%       robustStatisticVetoApplied
%       robustStatistic
%       waveletObject
%
% All real scalars are initialized to -1, time series are initialized to vectors of -1,
% logical scalars are initialized to false with the exception of isResultValid, which is
% initialized to true.  The last 8 fields are initialized to empty, which is legal for
% fields which are not returned to the Java-side.
%
% 
% Copyright 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% 
% NASA acknowledges the SETI Institute's primary role in authoring and
% producing the Kepler Data Processing Pipeline under Cooperative
% Agreement Nos. NNA04CC63A, NNX07AD96A, NNX07AD98A, NNX11AI13A,
% NNX11AI14A, NNX13AD01A & NNX13AD16A.
% 
% This file is available under the terms of the NASA Open Source Agreement
% (NOSA). You should have received a copy of this agreement with the
% Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
% 
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
% TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% 
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.
%

%=========================================================================================

  nCadences = length( tpsObject.cadenceTimes.midTimestamps ) ;
  nTargets = length( tpsObject.tpsTargets ) ;
  superResolutionFactor = tpsObject.tpsModuleParameters.superResolutionFactor ;
  nSuperResolutionCadences = nCadences * superResolutionFactor ;
  tpsModuleParameters = tpsObject.tpsModuleParameters ;
  gapFillParameters   = tpsObject.gapFillParameters ;
  deemphasisParameter = tpsObject.cadenceTimes.deemphasisParameter;
  tpsLiteEnabled      = tpsModuleParameters.tpsLiteEnabled;
  mesHistogramMinMes  = tpsModuleParameters.mesHistogramMinMes ;
  mesHistogramMaxMes  = tpsModuleParameters.mesHistogramMaxMes ;
  mesHistogramBinSize = tpsModuleParameters.mesHistogramBinSize ;
 
  if ~tpsLiteEnabled
      nHistogramBins = length(mesHistogramMinMes:mesHistogramBinSize:mesHistogramMaxMes) - 1 ;
  else
      nHistogramBins = 1 ;
  end
  
  % initialize the weakSecondaryStruct
  
  weakSecondaryStruct = initialize_weak_secondary_struct;
  
  % initialize bootstrap diagnostic struct
  
  bootstrapDiagnosticStruct = initialize_bootstrap_diagnostic_struct;
  
  % initialize a dummy waveletObject

  waveletObject = waveletClass( -1 );

  % initialize a scalar struct with all the desired fields
    % see fold_statistics_and_apply_vetoes.determine_planet_candidate_status for details of this struct. 
    planetCandidateStruct = struct(...
        'isPlanetACandidate',       repmat(false, [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]), ...
        'mesOkay',                  repmat(false, [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]), ...
        'bootstrapOkay',            repmat(false, [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]), ...
        'rsOkay',                   repmat(false, [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]), ...
        'chiSquare2Okay',           repmat(false, [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]), ...
        'chiSquareGofOkay',         repmat(false, [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]), ...
        'maxSesInMesOkay',          repmat(false, [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]), ...
        'searchLoopCount',          repmat(int32(0), [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]), ...
        'maxMes',                   repmat(-1.0, [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]), ...
        'periodDays',               repmat(-1.0, [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]), ...
        'epochKjd',                 repmat(-1.0, [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]), ...
        'numSesInMes',              repmat(int32(0), [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]), ...
        'fitSinglePulse',           repmat(false, [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]), ...
        'robustStatistic',          repmat(-1.0, [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]), ...
        'chiSquare2Statistic',      repmat(-1.0, [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]), ...
        'chiSquareGofStatistic',    repmat(-1.0, [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]), ...
        'maxSesInMesStatistic',     repmat(-1.0, [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]), ...
        'thresholdForDesiredPfa',   repmat(-1.0, [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]), ...
        'falseAlarmProbability',    repmat(-1.0, [tpsModuleParameters.vetoDiagnosticsMaxNumIterationsToRecord,1]));


  tpsResultsScalar = struct( ...
      'keplerId', -1, ...
      'trialTransitPulseInHours', -1, ...
      'isResultValid', true, ...
      'strongestOverallMultipleEventStatistic', -1, ...
      'maxMultipleEventStatistic', -1, ...
      'detectedOrbitalPeriodInDays', -1, ...
      'timeToFirstTransitInDays', -1, ...
      'isPlanetACandidate', false, ...
      'indexOfSesAdded', -1, ...
      'sesCombinedToYieldMes', -1, ...
      'thresholdForDesiredPfa', -1, ...
      'robustStatistic', -1, ...
      'fittedDepth', -1, ...
      'depthUncertainty', -1, ...
      'robustfitFail', false, ...
      'fitSinglePulse', false, ...
      'foldingWallTimeHours', -1, ...
      'exitedOnLoopCountLimit', false, ...
      'exitedOnLoopTimeLimit', false, ...
      'chiSquare2', -1, ...
      'chiSquareGof', -1, ...
      'sesProbability', -1, ...
      'chiSquareDof2', -1, ...
      'chiSquareGofDof', -1, ...
      'sesProbabilityDof', -1, ...
      'searchLoopCount', -1, ...
      'removedFeatureCount', -1, ...
      'detectedFeatureCount', 0, ...
      'nSpsd', 0, ...
      'frontExponentialPpm', -1 , ...
      'backExponentialPpm', -1, ...
      'maxSingleEventStatistic', -1, ...
      'minSingleEventStatistic', -1, ...
      'meanSingleEventStatistic', -1, ...
      'maxSesInMes', -1, ...
      'rmsCdpp', -1, ...
      'cdppTimeSeries', -1 * ones(nCadences,1), ...
      'harmonicTimeSeries', -1 * ones(nCadences,1), ...
      'correlationTimeSeries', -1 * ones(nCadences,1), ...
      'normalizationTimeSeries', -1 * ones(nCadences,1), ...
      'deemphasizedNormalizationTimeSeries', -1 * ones(nCadences,1), ...
      'correlationTimeSeriesHiRes', -1 * ones(nSuperResolutionCadences,1), ...
      'normalizationTimeSeriesHiRes', -1 * ones(nSuperResolutionCadences,1), ...
      'detrendedFluxTimeSeries', -1 * ones(nCadences,1), ...
      'bestPhaseInCadences', -1, ...
      'bestOrbitalPeriodInCadences', -1, ...
      'timeOfFirstTransitInMjd', -1, ...
      'bestMicrolensOrbitalPeriodInCadences', -1, ...
      'detectedMicrolensOrbitalPeriodInDays', -1, ...
      'bestMicrolensPhaseInCadences', -1, ...
      'timeToFirstMicrolensInDays', -1, ...
      'timeOfFirstMicrolensInMjd', -1, ...
      'minMultipleEventStatistic', -1, ...
      'foldedStatisticAtTrialPhases', -1, ...
      'phaseLagInCadences', -1, ...
      'foldedStatisticAtTrialPeriods', -1, ...
      'possiblePeriodsInCadences', -1, ...
      'deemphasisWeight', -1 * ones(nCadences,1), ...
      'deemphasisWeightSuperResolution', -1 * ones(nSuperResolutionCadences,1), ...
      'deemphasisParameter', -1 * ones(nCadences,1), ...
      'isOnEclipsingBinaryList', false, ...
      'numValidCadences', -1, ...
      'dataSpanInCadences', -1, ...
      'waveletObject', waveletObject, ...
      'positiveOutlierIndices', -1, ...
      'spsdIndices', -1, ...
      'weakSecondaryStruct', weakSecondaryStruct, ...
      'chiSquare1', -1, ...
      'chiSquare3', -1, ...
      'chiSquare4', -1, ...
      'chiSquare5', -1, ...
      'chiSquare6', -1, ...
      'chiSquare7', -1, ...
      'chiSquare8', -1, ...
      'chiSquare9', -1, ...
      'chiSquare10', -1, ...
      'chiSquareDof1', -1, ...
      'chiSquareDof3', -1, ...
      'chiSquareDof4', -1, ...
      'chiSquareDof5', -1, ...
      'chiSquareDof6', -1, ...
      'chiSquareDof7', -1, ...
      'chiSquareDof8', -1, ...
      'chiSquareDof9', -1, ...
      'chiSquareDof10', -1, ...
      'zCompSum', -1, ...
      'normCompSum', -1, ...
      'fittedDepthChi', -1, ...
      'meanMesEstimateForSearchPeriods', -1, ...
      'validPhaseSpaceFractionForSearchPeriods', -1, ...
      'mesMeanEstimate', -1, ...
      'mesStdEstimate', -1, ...
      'falseAlarmProbability', -1, ...
      'falseAlarmProbabilities', -1, ...
      'mesBins', -1, ...
      'isThreshForDesiredPfaInterpolated', false, ...
      'isFalseAlarmProbInterpolated', false, ...
      'bootstrapDiagnosticStruct', bootstrapDiagnosticStruct, ...
      'mesHistogram', -1 * ones(nHistogramBins,1), ...
      'maxSesInMesStatistic', -1, ...
      'planetCandidateStruct', planetCandidateStruct);

% construct the full struct by repmat

  tpsResults = repmat( tpsResultsScalar, nTargets * numTrialTransitDurations, 1 ) ;
  
  if tpsObject.tpsModuleParameters.performQuarterStitching
      
      for iTarget = 1:nTargets
          tpsResults(iTarget).frontExponentialPpm = 1e6 * ...
              tpsObject.tpsTargets(iTarget).frontExponentialSize ;
          tpsResults(iTarget).backExponentialPpm = 1e6 * ...
              tpsObject.tpsTargets(iTarget).backExponentialSize ;
          
          % initialize the deemphasis weights with the basic info in hand
          for iPulse = 1:numTrialTransitDurations
              resultIndex = iTarget + (iPulse - 1) * nTargets;
              [deemphasisWeightSuperResolution, deemphasisWeight] = initialize_deemphasis_weights( ...
                  tpsObject.tpsTargets(iTarget), deemphasisParameter, tpsModuleParameters, ...
                  gapFillParameters, [], [], []) ;
              tpsResults(resultIndex).deemphasisWeightSuperResolution = deemphasisWeightSuperResolution ;
              tpsResults(resultIndex).deemphasisWeight = deemphasisWeight ;
          end
          
      end
      
  end
      
  
return

% and that's it!

%
%
%
