function self = test_quarterStitchingClass_constructor( self )
%
% test_quarterStitchingClass_constructor -- unit test of the constructor for the
% quarterStitchingClass
%
% This unit test exercises the following functionality of the constructor:
%
% ==> The constructor returns a properly-formed quarterStitchingClass object when called
%     with all optional fields missing
% ==> The constructor returns a properly-formed quarterStitchingClass object when called
%     with all optional fields present
% ==> The constructor returns a properly-formed quarterStitchingClass object when called
%     with excess fields present in the quarterStitchingParametersStruct
% ==> The constructor converts row-vectors to column vectors in cases where the relevant
%     field is a vector
% ==> The constructor sorts the struct fields it receives into alphabetical order
% ==> The derived fields related to cadence duration have expected values
% ==> The constructor returns an expected error when any of the mandatory fields is
%     missing from the input.
%
% This unit test is meant to be executed in the mlunit context.  For standalone execution,
% use the following syntax:
%
%      run(text_test_runner, testQuarterStitchingClass('test_quarterStitchingClass_constructor'));
%
% Version date:  2011-February-16.
%
% 
% Copyright 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% 
% NASA acknowledges the SETI Institute's primary role in authoring and
% producing the Kepler Data Processing Pipeline under Cooperative
% Agreement Nos. NNA04CC63A, NNX07AD96A, NNX07AD98A, NNX11AI13A,
% NNX11AI14A, NNX13AD01A & NNX13AD16A.
% 
% This file is available under the terms of the NASA Open Source Agreement
% (NOSA). You should have received a copy of this agreement with the
% Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
% 
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
% TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% 
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.
%

% Modification History:
%
%    2011-February-16, PT:
%        update tests of harmonic parameter and gap fill parameter structs to match
%        current design.
%    2010-October-12, PT:
%        add test of medianValues preservation.
%
%=========================================================================================

  disp(' ... testing quarterStitchingClassClass constructor ... ') ;

% set the test data path and retrieve the standard input struct 

  tpsDataFile = 'tps-multi-quarter-struct' ;
  tpsDataStructName = 'tpsInputs' ;
  tps_testing_initialization ;
  load( fullfile( testDataPath, 'quarterStitchingClass-struct' ) ) ;
  
% validate the input and update the quarterStitchingStruct with anything
% new that it might need
  
  nTargets = length(quarterStitchingStruct.timeSeriesStruct) ;
  tpsInputs.tpsTargets = tpsInputs.tpsTargets(1) ;
  tpsInputs.tpsTargets(1:nTargets) = tpsInputs.tpsTargets;
  tpsInputs = validate_tps_input_structure( tpsInputs ) ;
  quarterStitchingStruct.gapFillParametersStruct = tpsInputs.gapFillParameters ;
  quarterStitchingStruct.harmonicsIdentificationParametersStruct = tpsInputs.harmonicsIdentificationParameters ;
  quarterStitchingStruct.randStreams = tpsInputs.randStreams ;  
  
% The initial struct has the optional fields omitted, and the extra fields included, so:

  quarterStitchingObject = quarterStitchingClass( quarterStitchingStruct ) ;
  
% cast the resulting object as a struct and run it through -- this tests the case of a
% struct with the optional fields present the extra fields absent

  quarterStitchingStruct2 = struct( quarterStitchingObject ) ;
  quarterStitchingObject2 = quarterStitchingClass( quarterStitchingStruct2 ) ;
  
% the two structs should be identical, but the two structs should not be because
% quarterStitchingStruct2 has had fields added

  assert_equals( quarterStitchingObject, quarterStitchingObject2, ...
      'quarterStitchingClass objects are not identical!' ) ;
  assert_not_equals( quarterStitchingStruct, quarterStitchingStruct2, ...
      'quarterStitchingClass structs are identical and should not be!' ) ;  
  
% check that the alpha-sorting of fields is performed in all cases

  mlunit_assert( ~isequal( fieldnames( quarterStitchingStruct ) , ...
      fieldnames( orderfields( quarterStitchingStruct ) ) ) && ...
      isequal( fieldnames( quarterStitchingStruct2 ) , ...
      fieldnames( orderfields( quarterStitchingStruct2 ) ) ), ...
      'Top-level field ordering not as expected!' ) ;
  
  topLevelFields = fieldnames( quarterStitchingStruct2 ) ;
  
  for iField = topLevelFields'
      if ~isobject(quarterStitchingStruct2.(iField{1}))
          mlunit_assert(  ...
              isequal( fieldnames( quarterStitchingStruct2.(iField{1}) ), ...
              fieldnames( orderfields( quarterStitchingStruct2.(iField{1}) ) ) ), ...
              ['Field ordering in ',iField{1},' substruct not as expected!'] ) ;
      end
  end
  
% check that the cadence times have been filled

  cadenceTimes  = quarterStitchingStruct.cadenceTimes ;
  cadenceTimes2 = quarterStitchingStruct2.cadenceTimes ;
  mlunit_assert( ~isempty(find(cadenceTimes.startTimestamps==0, 1)) && ...
      ~isempty(find(cadenceTimes.midTimestamps==0, 1)) && ...
      ~isempty(find(cadenceTimes.endTimestamps==0, 1)) && ...
      isempty(find(cadenceTimes2.startTimestamps==0, 1)) && ...
      isempty(find(cadenceTimes2.endTimestamps==0, 1)) && ...
      isempty(find(cadenceTimes2.midTimestamps==0, 1)) , ...
      'Fill of gapped timestamps and cadence numbers not as expected!' ) ;
  
% convert the fields to row vectors and make sure that the constructor converts them back

  quarterStitchingStruct.timeSeriesStruct = quarterStitchingStruct.timeSeriesStruct(:)' ;
  for iTarget = 1:length( quarterStitchingStruct.timeSeriesStruct )
      quarterStitchingStruct.timeSeriesStruct(iTarget).values = ...
          quarterStitchingStruct.timeSeriesStruct(iTarget).values(:)' ;
      quarterStitchingStruct.timeSeriesStruct(iTarget).uncertainties = ...
          quarterStitchingStruct.timeSeriesStruct(iTarget).uncertainties(:)' ;
      quarterStitchingStruct.timeSeriesStruct(iTarget).gapIndicators = ...
          quarterStitchingStruct.timeSeriesStruct(iTarget).gapIndicators(:)' ;
  end
  quarterStitchingStruct.cadenceTimes.startTimestamps = ...
      quarterStitchingStruct.cadenceTimes.startTimestamps(:)' ;
  quarterStitchingStruct.cadenceTimes.midTimestamps = ...
      quarterStitchingStruct.cadenceTimes.midTimestamps(:)' ;
  quarterStitchingStruct.cadenceTimes.endTimestamps = ...
      quarterStitchingStruct.cadenceTimes.endTimestamps(:)' ;
  quarterStitchingStruct.cadenceTimes.gapIndicators = ...
      quarterStitchingStruct.cadenceTimes.gapIndicators(:)' ;
  quarterStitchingStruct.cadenceTimes.cadenceNumbers = ...
      quarterStitchingStruct.cadenceTimes.cadenceNumbers(:)' ;
  
  quarterStitchingObject3 = quarterStitchingClass( quarterStitchingStruct ) ;
  assert_equals( struct( quarterStitchingObject3 ), quarterStitchingStruct2, ...
      'quarterStitchingClass object not as expected after vector conversion to columns!' ) ;
  
% check the values of the fields related to cadence duration
 
  mlunit_assert( abs( 29.424 - ...
      quarterStitchingStruct2.gapFillParametersStruct.cadenceDurationInMinutes ) < 0.001, ...
      'Cadence duration in minutes not as expected!' ) ;
  mlunit_assert( abs( 48.939 - ...
      quarterStitchingStruct2.quarterStitchingParametersStruct.cadencesPerDay ) < 0.001, ...
      'Cadences per day not as expected!' ) ;
  mlunit_assert( abs( 2.039 - ...
      quarterStitchingStruct2.quarterStitchingParametersStruct.cadencesPerHour ) < 0.001, ...
      'Cadences per hour not as expected!' ) ;
  
% check that the optional fields in the time series struct have been added

  mlunit_assert( ~isfield( quarterStitchingStruct.timeSeriesStruct, 'fillIndices' ) && ...
      isfield( quarterStitchingStruct2.timeSeriesStruct, 'fillIndices' ) && ...
      ~isfield( quarterStitchingStruct.timeSeriesStruct, 'keplerId' ) && ...
      isfield( quarterStitchingStruct2.timeSeriesStruct, 'keplerId' ) && ...
      ~isfield( quarterStitchingStruct.timeSeriesStruct, 'medianValues' ) && ...
      isfield( quarterStitchingStruct2.timeSeriesStruct, 'medianValues' ) && ...
      ~isfield( quarterStitchingStruct.timeSeriesStruct, 'timeSeriesType' ) && ...
      isfield( quarterStitchingStruct2.timeSeriesStruct, 'timeSeriesType' ) && ...
      ~isfield( quarterStitchingStruct.timeSeriesStruct, 'harmonicsValues' ) && ...
      isfield( quarterStitchingStruct2.timeSeriesStruct, 'harmonicsValues' ), ...
      'timeSeriesStruct optional fields not added as expected!' ) ;
  
% check that when the optional fields are filled, they are copied to the object unchanged

  quarterStitchingStruct2.timeSeriesStruct(1).harmonicsValues(10:20) = 0.5 ;
  quarterStitchingStruct2.timeSeriesStruct(1).fillIndices = 10:20 ;
  quarterStitchingStruct2.timeSeriesStruct(1).fillIndices = ...
      quarterStitchingStruct2.timeSeriesStruct(1).fillIndices(:) ;
  quarterStitchingStruct2.timeSeriesStruct(1).keplerId = 55 ;
  quarterStitchingStruct2.timeSeriesStruct(1).timeSeriesType = 'flux' ;
  quarterStitchingStruct2.timeSeriesStruct(1).medianValues = randn( size( ...
      quarterStitchingStruct2.timeSeriesStruct(1).medianValues) ) ;
  quarterStitchingObject3 = quarterStitchingClass( quarterStitchingStruct2 ) ;
  quarterStitchingStruct3 = struct( quarterStitchingObject3 ) ;
  
  assert_equals( quarterStitchingStruct2.timeSeriesStruct(1).harmonicsValues, ...
      quarterStitchingStruct3.timeSeriesStruct(1).harmonicsValues, ...
      'harmonicsValues not preserved in quarterStitchingClass constructor!' ) ;
  assert_equals( quarterStitchingStruct2.timeSeriesStruct(1).fillIndices, ...
      quarterStitchingStruct3.timeSeriesStruct(1).fillIndices, ...
      'fillIndices not preserved in quarterStitchingClass constructor!' ) ;
  assert_equals( quarterStitchingStruct2.timeSeriesStruct(1).keplerId, ...
      quarterStitchingStruct3.timeSeriesStruct(1).keplerId, ...
      'keplerId not preserved in quarterStitchingClass constructor!' ) ;
  assert_equals( quarterStitchingStruct2.timeSeriesStruct(1).timeSeriesType, ...
      quarterStitchingStruct3.timeSeriesStruct(1).timeSeriesType, ...
      'timeSeriesType not preserved in quarterStitchingClass constructor!' ) ;
  
% remove the necessary fields, one at a time, and see whether the desired error occurs

  remove_field_and_test_for_failure( quarterStitchingStruct, 'quarterStitchingStruct', ...
      quarterStitchingStruct, 'quarterStitchingStruct', 'quarterStitchingClass', ...
      { 'timeSeriesStruct' ; ...
      'gapFillParametersStruct' ; ...
      'harmonicsIdentificationParametersStruct' ; ...
      'quarterStitchingParametersStruct' ; ...
      'cadenceTimes' } ) ;
  
  remove_field_and_test_for_failure( ...
      quarterStitchingStruct.quarterStitchingParametersStruct, ...
      'quarterStitchingStruct.quarterStitchingParametersStruct', ...
      quarterStitchingStruct, 'quarterStitchingStruct', 'quarterStitchingClass', ...
      { 'debugLevel'; 'medianNormalizationFlag'; ...
      'constrainedPolyMaxOrder'; 'edgeDetrendingSignificanceValue' } ) ;
  
  remove_field_and_test_for_failure( ...
      quarterStitchingStruct.gapFillParametersStruct, ...
      'quarterStitchingStruct.gapFillParametersStruct', ...
      quarterStitchingStruct, 'quarterStitchingStruct', 'quarterStitchingClass', ...
      { 'madXFactor'; 'maxGiantTransitDurationInHours'; ...
      'maxDetrendPolyOrder'; 'maxArOrderLimit'; 'maxCorrelationWindowXFactor'; ...
      'gapFillModeIsAddBackPredictionError'; 'waveletFamily'; 'waveletFilterLength'; ...
      'giantTransitPolyFitChunkLengthInHours' } ) ;
  
  remove_field_and_test_for_failure( ...
      quarterStitchingStruct.harmonicsIdentificationParametersStruct, ...
      'quarterStitchingStruct.harmonicsIdentificationParametersStruct', ...
      quarterStitchingStruct, 'quarterStitchingStruct', 'quarterStitchingClass', ...
      { 'medianWindowLengthForTimeSeriesSmoothing', ...
      'medianWindowLengthForPeriodogramSmoothing', 'movingAverageWindowLength', ...
      'falseDetectionProbabilityForTimeSeries', 'minHarmonicSeparationInBins', ...
      'maxHarmonicComponents', 'timeOutInMinutes' } ) ; 
  
  remove_field_and_test_for_failure( ...
      quarterStitchingStruct.timeSeriesStruct, ...
      'quarterStitchingStruct.timeSeriesStruct', ...
      quarterStitchingStruct, 'quarterStitchingStruct', 'quarterStitchingClass', ...
      { 'values'; 'uncertainties'; 'gapIndicators' } ) ;
  
  remove_field_and_test_for_failure( ...
      quarterStitchingStruct.cadenceTimes, ...
      'quarterStitchingStruct.cadenceTimes', ...
      quarterStitchingStruct, 'quarterStitchingStruct', 'quarterStitchingClass', ...
      { 'startTimestamps'; 'midTimestamps'; 'endTimestamps'; ...
      'gapIndicators'; 'requantEnabled'; 'cadenceNumbers'; 'isSefiAcc'; 'isSefiCad'; ...
      'isLdeOos'; 'isFinePnt'; 'isMmntmDmp'; 'isLdeParEr'; 'isScrcErr'; ...
      'dataAnomalyTypes' } ) ;
  
  disp('') ;
  
return