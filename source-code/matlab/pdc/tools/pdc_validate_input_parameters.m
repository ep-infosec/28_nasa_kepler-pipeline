%% function [problemParameters, inputsStruct] = pdc_validate_input_parameters (inputsStruct, canonicalParamSet, doSetToCanonical)
%
% This is a simple function that examines the input Struct parameters and compares to a default set of
% parameters. Any discrepancies are stored in <problemParameters> and displays to stdio.
%
% Function autodetects if this inputsStruct is for Long Cadence or Short Cadence and uses the appropriate
% parameters.
%
% This function will not validate cells!
%
% Inputs:
%   inputsStruct        -- [struct] The input struct to validate
%   canonicalParamSet   -- [struct (OPTIONAL)] If the default canonical set is not used, this optional set is used
%   doSetToCanonical    -- [logical (OPTIONAL)] If presen and true then inputsStruct set to canonical set
%
% Outputs:
%   pdcValidateFieldsObject -- [pdcValidateFieldsClass]  List of problem Fields, their values and what's wrong with them.
%   inputsStruct        -- [struct] if doSetToCanonical = true then this is the returned inputsStruct with
%                           canonical values, NOTE: only parameter values are modified. The flux values, etc, remain the same
%
%%
% 
% Copyright 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% 
% NASA acknowledges the SETI Institute's primary role in authoring and
% producing the Kepler Data Processing Pipeline under Cooperative
% Agreement Nos. NNA04CC63A, NNX07AD96A, NNX07AD98A, NNX11AI13A,
% NNX11AI14A, NNX13AD01A & NNX13AD16A.
% 
% This file is available under the terms of the NASA Open Source Agreement
% (NOSA). You should have received a copy of this agreement with the
% Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
% 
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
% TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% 
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.
%

function [pdcValidateFieldsObject, inputsStruct] = pdc_validate_input_parameters (inputsStruct, varargin)

doSetToCanonical = false;
% Optional parameters 
if (~isempty(varargin))
    for iVar = 1 : length(varargin)
        if (islogical(varargin{iVar}))
             doSetToCanonical = varargin{iVar};
        elseif (isstruct(varargin{iVar}))
            % TODO: complete this 
            error ('pdc_validate_input_parameters: This optional argument not available yet');
        end
    end
end

% The Canonical Set
% If a vlaue is [] then this field is not checked

canonicalInputsStruct.cadenceType                                           = [];
canonicalInputsStruct.startCadence                                          = [];
canonicalInputsStruct.endCadence                                            = [];
canonicalInputsStruct.fcConstants                                           = [];
canonicalInputsStruct.spacecraftConfigMap                                   = [];
canonicalInputsStruct.cadenceTimes                                          = [];
canonicalInputsStruct.longCadenceTimes                                      = [];
canonicalInputsStruct.raDec2PixModel                                        = [];
canonicalInputsStruct.ancillaryEngineeringConfigurationStruct               = [];
canonicalInputsStruct.thrusterDataAncillaryEngineeringConfigurationStruct   = [];
canonicalInputsStruct.ancillaryEngineeringDataStruct                        = [];
canonicalInputsStruct.ancillaryPipelineConfigurationStruct                  = [];
canonicalInputsStruct.ancillaryDesignMatrixConfigurationStruct              = [];
canonicalInputsStruct.gapFillConfigurationStruct                            = [];
canonicalInputsStruct.saturationSegmentConfigurationStruct                  = [];
canonicalInputsStruct.harmonicsIdentificationConfigurationStruct            = [];
canonicalInputsStruct.discontinuityConfigurationStruct                      = [];
canonicalInputsStruct.channelDataStruct                                     = [];

canonicalInputsStruct.pdcModuleParameters = struct(...
                                          'debugLevel',  0, ...
                     'astrophysicalEventBridgeInDays', 0.1667, ...
                          'attitudeTweakBufferInDays', 0.1667, ...
                               'bandSplittingEnabled', true, ...
                            'coarsePointBufferInDays', 0, ...
                            'cotrendPerformanceLimit', 1.0500, ...
                     'cotrendRatioMaxTimeScaleInDays', 3, ...
                             'earthPointBufferInDays', 0.1667, ...
                                'excludeTargetLabels', [], ... % Based on the run being performed so cannot check
                               'harmonicDetrendOrder', 1, ...
                            'harmonicsRemovalEnabled', false, ...
                                         'mapEnabled', true, ...
                                 'mapSelectionMethod', 'noiseVariabilityEarthpoints', ...
                           'mapSelectionMethodCutoff', 0.8000, ...
                   'mapSelectionMethodMultiscaleBias', 0.1000, ...
   'stellarVariabilityRemoveEclipsingBinariesEnabled', true, ...
                                 'medianFilterLength', 11, ...
                          'minHarmonicsForDetrending', 8, ...
                 'neighborhoodRadiusForAttitudeTweak', 25, ...
                               'normalizationEnabled', true, ...
                            'outlierThresholdXFactor', 12, ...
                                   'preMapIterations', 1, ...
                               'robustCotrendFitFlag', false, ...
                               'safeModeBufferInDays', 0.1667, ...
                     'stellarVariabilityDetrendOrder', 6, ...
                        'stellarVariabilityThreshold', 0.0050, ...
                      'thermalRecoveryDurationInDays', 5, ...
                        'variabilityDetrendPolyOrder', 3, ...
                   'variabilityEpRecoveryMaskEnabled', true, ...
                    'variabilityEpRecoveryMaskWindow', 150, ...
                       'bandSplittingEnabledQuarters', [], ...
          'thrusterSawtoothRemovalDetectionThreshold', 5, ...
          'thrusterSawtoothRemovalMaxDetectionThreshold', 100, ...
          'thrusterSawtoothRemovalMaxIterations', 6);

canonicalInputsStruct.mapConfigurationStruct = struct(...
        'minFractionOfTargetsForSvd',       0.1, ... % If fewer than this fraction of targets left for SVD then crash and burn
        'fractionOfStarsToUseForSvd',       0.5,...
        'useOnlyQuietStarsForSvd',          true, ...
        'fractionOfStarsToUseForPriorPdf',  1.0,...
        'useOnlyQuietStarsForPriorPdf',     true, ...
        'fitNormalizationMethod',           [], ... % Normalization method for fitting
        'svdNormalizationMethod',            [], ... % Normalization method for SVD
        'numPointsForMaximizerFirstGuess',  100,... % number of points to sweep through PDF to bracket maximum
        'maxNumMaximizerIteration',         10,... % maximum number of times the range can be expanded to bracket the maximum
        'maxTolerance',                     1.0e-4,... % tolX for fminbnd
        'randomStreamSeed',                 1,... % if = 0 then use system clock
        'svdOrder',                         0,... % 0 means auto-select svdOrder
        'svdMaxOrder',                      8,... % Maximum number of basis vectors (when svdOrder = 0)
        'svdOrderForReducedRobustFit',      [4 4 8 4 4],...
        'svdSnrCutoff',                     5, ... % Cutoff before rejecting a singular vector
        'ditherFlux',                       false,...
        'ditherMagnitude',                  0.05,...
        'variabilityCutoff',                1.3,... % How many times the median variability
        'coarseDetrendPolyOrder',           3,... % For use with finding prior goodness (NOT GOODNESS METRIC!)
        'priorPdfVariabilityWeight',        2.0,... % Power factor to scale variability by for prior weight
        'priorPdfGoodnessWeight',           1.0,... % power factor to scale prior goodness by for prior weight 
        'priorPdfGoodnessGain',             [1.0 1.0 1.0 20.0 20.0],... % Gain factor to scale prior goodness by for prior weight (needed when changing normalization method)
        'priorWeightGoodnessCutoff',        0.01, ... % if the prior goodness is below this value then zero the prior weight (and use reduced set of basis vectors)
        'priorWeightVariabilityCutoff',     0.5, ... % if the target variability is below this value then zero the prior weight
        'priorGoodnessScalingFactor',       10.0,... % A Prior Goodness above this means bad prior
        'priorGoodnessPowerFactor',         3.0,... % How strong the prior goodness decreases for a bad prior
        'priorKeplerMagnitudeScalingFactor',2.0e0,...
        'priorRaScalingFactor',             1.0e0,...
        'priorDecScalingFactor',            1.0e0,...
        'priorEffTempScalingFactor',        0.0e0,...
        'priorLogRadiusScalingFactor',      0.0e0,...
        'priorCentroidMotionScalingFactor', 0.0e0,...
        'entropyCleaningEnabled',           true,...
        'entropyCleaningCutoff',            -0.7,... % Bad basis vector entropy as this negatice level
        'entropyMadFactor',                 10.0,... % How many times the MAD(V) is considered a basis vector over-dominating
        'entropyMaxIterations',             30,...  % Max number of iterations to entropy clean basis vectors
        'goodnessMetricIterationsEnabled',  [true true true true false], ...
        'goodnessMetricIterationsCutoff',   0.8, ... % A goodness above this value is considered "good"
        'goodnessMetricIterationsPriorWeightStepSize',  2.0, ... % If adjusting prior weight, adjust by this factor
        'goodnessMetricMaxIterations',      40, ...
        'quickMapEnabled',                  false, ...
        'quickMapVariabilityCutoff',        1.0, ... % Variability cutoff below which LC MAP fit is not used
        'useBasisVectorsFromBlob',          false, ... % Use cbvBlobStruct basis vectors for fitting
        'useBasisVectorsAndPriorsFromBlob', false, ... % Use cbvBlobStruct for both CBVs and Priors for fitting
        'useBasisVectorsAndPriorsFromPixels', false, ... % Use cbvBlobStruct for both CBVs and Priors for fitting from Pixel data
        'useCentroidPriors',                false, ...   % Use Jeff K's centroid priors for MAP
        'denoiseBasisVectorsEnabled',       false, ...
        'spikeIsolationEnabled',            [true true false false false], ...
        'spikeBasisVectorWindow',           15, ...
        'forceRobustFit',                   [false false true false false]); % Never do a MAP fit, just the robust fit.
canonicalInputsStruct.mapConfigurationStruct.fitNormalizationMethod = {'mean' 'mean'  'mean'  'std'  'noiseFloor'};
canonicalInputsStruct.mapConfigurationStruct.svdNormalizationMethod  = {'noiseFloor' 'noiseFloor'  'mean'  'std'  'noiseFloor'};


canonicalInputsStruct.bandSplittingConfigurationStruct = struct(...
   'edgeEffectMitigationExtrapolationRange', 500, ...
               'edgeEffectMitigationMethod', 'expointmirrortaper', ...
             'groupingManualBandBoundaries', [1023 3], ...
                           'groupingMethod', 'manual', ...
                            'numberOfBands', 3, ...
                      'numberOfWaveletTaps', 12, ...
                          'splittingMethod', 'wavelet', ...
                            'waveletFamily', 'daubechies');

canonicalInputsStruct.spsdDetectionConfigurationStruct = struct (...
       'discontinuityRatioTolerance', 0.7000, ...
            'endpointFitWindowWidth', 48, ...
            'excludeWindowHalfWidth', 4, ...
            'falsePositiveRateLimit', 0.0050, ...
                  'quickSpsdEnabled', false, ...
    'transitSpsdMinmaxDiscriminator', 0.7000, ...
                      'useCentroids', false, ...
            'maxDetectionIterations', 5, ...
           'harmonicsRemovalEnabled', false, ...
   'validationSignificanceThreshold', 3);

canonicalInputsStruct.spsdDetectorConfigurationStruct = struct(...
         'minWindowWidth', 9, ...
                   'mode', 1, ...
            'sgPolyOrder', 3, ...
        'sgStepPolyOrder', 2, ...
       'shortSgPolyOrder', 1, ...
   'shortSgStepPolyOrder', 1, ...
       'shortWindowWidth', 11, ...
            'windowWidth', 193);

canonicalInputsStruct.spsdRemovalConfigurationStruct = struct(...
                      'bigPicturePolyOrder', 6, ...
                'harmonicFalsePositiveRate', 0.0100, ...
                 'logTimeConstantIncrement', 1, ...
                  'logTimeConstantMaxValue', 0, ...
                'logTimeConstantStartValue', -2, ...
                      'polyWindowHalfWidth', 480, ...
                      'recoveryWindowWidth', 240, ...
        'shortCadencePostCorrectionEnabled', false, ...
     'shortCadencePostCorrectionLeftWindow', 5, ...
         'shortCadencePostCorrectionMethod', 'gapfill', ...
    'shortCadencePostCorrectionRightWindow', 30, ...
                       'useMapBasisVectors', true);
          
canonicalInputsStruct.goodnessMetricConfigurationStruct = struct (...
   'correlationScale', 12, ...
    'earthPointScale', 1, ...
   'variabilityScale', 20000, ...
         'noiseScale', 1.0000e-04, ...
         'spikeScale', 5.0e-6);


%*******
% Short Cadence Modifications
if (strcmp(inputsStruct.cadenceType, 'SHORT'))
    canonicalInputsStruct.mapConfigurationStruct.priorGoodnessScalingFactor = 5.0;
    canonicalInputsStruct.mapConfigurationStruct.svdOrderForReducedRobustFit = 4;
    canonicalInputsStruct.mapConfigurationStruct.priorPdfGoodnessGain = 1;
    canonicalInputsStruct.mapConfigurationStruct.goodnessMetricIterationsEnabled = false;
    canonicalInputsStruct.mapConfigurationStruct.goodnessMetricMaxIterations = 50;
    canonicalInputsStruct.mapConfigurationStruct.quickMapEnabled = true;
    canonicalInputsStruct.mapConfigurationStruct.forceRobustFit = false;
    canonicalInputsStruct.goodnessMetricConfigurationStruct = struct( ...
        'correlationScale',             1.2e1, ...
        'variabilityScale',             1e4, ...
        'earthPointScale',              1e0, ...
        'noiseScale',                   2e-5);
    canonicalInputsStruct.spsdDetectionConfigurationStruct.quickSpsdEnabled = true;
    canonicalInputsStruct.pdcModuleParameters.bandSplittingEnabled = false;
    canonicalInputsStruct.pdcModuleParameters.mapSelectionMethod = 'regular';
    canonicalInputsStruct.pdcModuleParameters.astrophysicalEventBridgeInDays = 0.008333000354469;
    canonicalInputsStruct.pdcModuleParameters.attitudeTweakBufferInDays = 0.008333000354469;
    canonicalInputsStruct.pdcModuleParameters.cotrendPerformanceLimit = 1.025;
    canonicalInputsStruct.pdcModuleParameters.earthPointBufferInDays = 0.008333000354469;
    canonicalInputsStruct.pdcModuleParameters.outlierThresholdXFactor = 8;
    canonicalInputsStruct.pdcModuleParameters.safeModeBufferInDays = 0.008333000354469;
end

%*************************************************
% K2 data modifications

if (isfield(inputsStruct.fcConstants, 'KEPLER_END_OF_MISSION_MJD') && ...
        inputsStruct.cadenceTimes.midTimestamps(find(~inputsStruct.cadenceTimes.gapIndicators,1))  > inputsStruct.fcConstants.KEPLER_END_OF_MISSION_MJD)

    canonicalInputsStruct.pdcModuleParameters.bandSplittingEnabled = false;
    canonicalInputsStruct.pdcModuleParameters.mapSelectionMethod = 'noneRobustMap';
    canonicalInputsStruct.pdcModuleParameters.thrusterSawtoothRemovalDetectionThreshold = 5;
    canonicalInputsStruct.pdcModuleParameters.thrusterSawtoothRemovalMaxDetectionThreshold = 100;
    canonicalInputsStruct.pdcModuleParameters.thrusterSawtoothRemovalMaxIterations = 6;

    canonicalInputsStruct.mapConfigurationStruct = struct(...
     'debugRun',                           false, ...
     'fractionOfStarsToUseForSvd',         0.5, ...
     'fractionOfStarsToUseForPriorPdf',    1.0, ...
     'numPointsForMaximizerFirstGuess',    100, ...
     'maxNumMaximizerIteration',           10, ...
     'maxTolerance',                       1.0E-4, ...
     'minFractionOfTargetsForSvd',         0.1, ...
     'randomStreamSeed',                   1, ...
     'svdMaxOrder',                        12, ...
     'svdOrder',                           0, ...
     'svdOrderForReducedRobustFit',        12, ...
     'svdSnrCutoff',                       -5, ...
     'ditherFlux',                         false, ...
     'ditherMagnitude',                    0.05, ...
     'variabilityCutoff',                  1.3, ...
     'coarseDetrendPolyOrder',             3, ...
     'priorPdfVariabilityWeight',          2.0, ...
     'priorPdfGoodnessGain',               [0.5 0.5], ...
     'priorPdfGoodnessWeight',             1.0, ...
     'priorGoodnessPowerFactor',           3.0, ...
     'priorGoodnessScalingFactor',         10.0, ...
     'priorKeplerMagnitudeScalingFactor',  2.0, ...
     'priorRaScalingFactor',               1.0, ...
     'priorDecScalingFactor',              1.0, ...
     'useOnlyQuietStarsForSvd',            [false true], ...
     'useOnlyQuietStarsForPriorPdf',       [false true], ...
     'priorWeightGoodnessCutoff',          0.01, ...
     'priorWeightVariabilityCutoff',       [0.5 0.5], ...
     'entropyCleaningEnabled',             true, ...
     'entropyCleaningCutoff',              -0.7, ...
     'entropyMadFactor',                   10.0, ...
     'entropyMaxIterations',               30, ...
     'quickMapEnabled',                    false, ...
     'quickMapVariabilityCutoff',          1.0, ...
     'goodnessMetricIterationsEnabled',    false, ...
     'goodnessMetricIterationsCutoff',     0.8, ...
     'goodnessMetricIterationsPriorWeightStepSize', 2.0, ...
     'goodnessMetricMaxIterations',        40, ...
     'forceRobustFit',                     [true false], ...
     'useBasisVectorsFromBlob',            false, ...
     'priorCentroidMotionScalingFactor',   0.0, ...
     'priorEffTempScalingFactor',          0.0, ...
     'priorLogRadiusScalingFactor',        0.0, ...
     'useBasisVectorsAndPriorsFromBlob',   false, ...
     'useBasisVectorsAndPriorsFromPixels', false, ...
     'useCentroidPriors',                  [false true], ...
     'denoiseBasisVectorsEnabled',         false, ...
     'spikeBasisVectorWindow',             15, ...
     'spikeIsolationEnabled',              false);

     canonicalInputsStruct.mapConfigurationStruct.fitNormalizationMethod = {'mean' 'mean'};
     canonicalInputsStruct.mapConfigurationStruct.svdNormalizationMethod  = {'noisefloor' 'noiseFloor'};



end

%*************************************************
% Do the validation

pdcValidateFieldsObject = pdcValidateFieldsClass ('inputsStruct', canonicalInputsStruct, [], doSetToCanonical);
pdcValidateFieldsObject.display_problem_fields(10);

if (doSetToCanonical)
    inputsStruct = pdcValidateFieldsObject.testStruct;
end

%problemParameters = [];
%% pdcModuleParameters
%[problemParameters,inputsStruct.pdcModuleParameters              ] = ...
%    pdc_validate_fields (inputsStruct.pdcModuleParameters,               'pdcModuleParameters',     problemParameters, doSetToCanonical);
%
%[problemParameters,inputsStruct.mapConfigurationStruct           ] = ...
%    pdc_validate_fields (inputsStruct.mapConfigurationStruct,            'mapConfigurationStruct',  problemParameters, doSetToCanonical);
%[problemParameters,inputsStruct.bandSplittingConfigurationStruct ] = ...
%    pdc_validate_fields (inputsStruct.bandSplittingConfigurationStruct,  'bandSplittingConfigurationStruct ',  problemParameters, doSetToCanonical);
%[problemParameters,inputsStruct.spsdDetectionConfigurationStruct ] = ...
%    pdc_validate_fields (inputsStruct.spsdDetectionConfigurationStruct,  'spsdDetectionConfigurationStruct ',  problemParameters, doSetToCanonical);
%[problemParameters,inputsStruct.spsdDetectorConfigurationStruct  ] = ...
%    pdc_validate_fields (inputsStruct.spsdDetectorConfigurationStruct,   'spsdDetectorConfigurationStruct ',  problemParameters, doSetToCanonical);
%[problemParameters,inputsStruct.spsdRemovalConfigurationStruct   ] = ...
%    pdc_validate_fields (inputsStruct.spsdRemovalConfigurationStruct,    'spsdRemovalConfigurationStruct ',  problemParameters, doSetToCanonical);
%[problemParameters,inputsStruct.goodnessMetricConfigurationStruct] = ...
%    pdc_validate_fields (inputsStruct.goodnessMetricConfigurationStruct, 'goodnessMetricConfigurationStruct ',  problemParameters, doSetToCanonical);
%

end
