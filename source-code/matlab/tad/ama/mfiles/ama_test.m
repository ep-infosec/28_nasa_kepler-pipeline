% this script tests aperture mask assignment with the default set of
% configuration parameters and example data sets generated by the TAD coa
% component
% 
% Copyright 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% 
% This file is available under the terms of the NASA Open Source Agreement
% (NOSA). You should have received a copy of this agreement with the
% Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
% 
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
% TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% 
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.
%

close all;
clear;
clear classes;
%%
load small_ama_test_data.mat maskDefinitions apertureStructs;
% add apertures that go up against the edge of the CCD
nAps = length(apertureStructs);
nAps = nAps + 1;
apertureStructs(nAps).keplerId = 1;
apertureStructs(nAps).referenceRow = 2;
apertureStructs(nAps).referenceColumn = 400;
apertureStructs(nAps).badPixelCount = 0;
apertureStructs(nAps).offsets(1).row = 0;
apertureStructs(nAps).offsets(2).row = -1;
apertureStructs(nAps).offsets(3).row = -2;
apertureStructs(nAps).offsets(4).row = -3;
apertureStructs(nAps).offsets(1).column = 0;
apertureStructs(nAps).offsets(2).column = 0;
apertureStructs(nAps).offsets(3).column = 0;
apertureStructs(nAps).offsets(4).column = 0;
nAps = nAps + 1;
apertureStructs(nAps).keplerId = 2;
apertureStructs(nAps).referenceRow = 1068;
apertureStructs(nAps).referenceColumn = 400;
apertureStructs(nAps).badPixelCount = 0;
apertureStructs(nAps).offsets(1).row = 0;
apertureStructs(nAps).offsets(2).row = 1;
apertureStructs(nAps).offsets(3).row = 2;
apertureStructs(nAps).offsets(4).row = 3;
apertureStructs(nAps).offsets(1).column = 0;
apertureStructs(nAps).offsets(2).column = 0;
apertureStructs(nAps).offsets(3).column = 0;
apertureStructs(nAps).offsets(4).column = 0;
nAps = nAps + 1;
apertureStructs(nAps).keplerId = 3;
apertureStructs(nAps).referenceRow = 400;
apertureStructs(nAps).referenceColumn = 3;
apertureStructs(nAps).badPixelCount = 0;
apertureStructs(nAps).offsets(1).row = 0;
apertureStructs(nAps).offsets(2).row = 0;
apertureStructs(nAps).offsets(3).row = 0;
apertureStructs(nAps).offsets(4).row = 0;
apertureStructs(nAps).offsets(1).column = 0;
apertureStructs(nAps).offsets(2).column = -1;
apertureStructs(nAps).offsets(3).column = -2;
apertureStructs(nAps).offsets(4).column = -3;
nAps = nAps + 1;
apertureStructs(nAps).keplerId = 4;
apertureStructs(nAps).referenceRow = 400;
apertureStructs(nAps).referenceColumn = 1130;
apertureStructs(nAps).badPixelCount = 0;
apertureStructs(nAps).offsets(1).row = 0;
apertureStructs(nAps).offsets(2).row = 0;
apertureStructs(nAps).offsets(3).row = 0;
apertureStructs(nAps).offsets(4).row = 0;
apertureStructs(nAps).offsets(1).column = 0;
apertureStructs(nAps).offsets(2).column = 1;
apertureStructs(nAps).offsets(3).column = 2;
apertureStructs(nAps).offsets(4).column = 3;


%%
amaParameterStruct.maskDefinitions = maskDefinitions;
amaParameterStruct.apertureStructs = apertureStructs;
amaParameterStruct.debugFlag = 1;

amaResultStruct = ama_matlab_controller(amaParameterStruct);

