% update_fpg_LC:  script which executes focal plane geometry fitting.  Current version is
% prototype only.
% 
% Copyright 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% 
% NASA acknowledges the SETI Institute's primary role in authoring and
% producing the Kepler Data Processing Pipeline under Cooperative
% Agreement Nos. NNA04CC63A, NNX07AD96A, NNX07AD98A, NNX11AI13A,
% NNX11AI14A, NNX13AD01A & NNX13AD16A.
% 
% This file is available under the terms of the NASA Open Source Agreement
% (NOSA). You should have received a copy of this agreement with the
% Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
% 
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
% TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% 
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.
%

% The user parameters, including the cadences to use, are stored in a mat file as a data
% structure.  The unpack_fpg_options function prompts the user for the parameters file and
% uses it to generate the data which is needed by the fitter:

  if ~exist('fpgTestDataFileName')
      fpgTestDataFileName = [] ; 
  end

  testing = 1 ;
  t0 = clock ;
  [constraintPoints, covariance, fitterArgs, initialParValues, fitterOptions, ...
      dataStatusMap, dPointing, refLCDataStruct] = ...
      unpack_fpg_options( testing, fpgTestDataFileName ) ;
  disp(['Done with unpacking, elapsed time = ',num2str(etime(clock,t0))]) ;
    
% the data generated by unpackFPGOptions is sent to update_fpg for the fit:

  [finalParValues,parCovariance,robustWeights] = update_fpg( constraintPoints, covariance, ...
      fitterArgs, initialParValues, fitterOptions, 1, 0 ) ;

%=========================================================================================
% 
% produce the displays
%
%=========================================================================================
%%
  disp('...Generating displays...') ;
  
  plot_data_status_map ; % # of good mod/outs per cadence, and vice-versa~i
  
  if (strcmpi(fitterOptions(end).Robust,'on'))
      plot_fpg_robust_weights(robustWeights,fitterArgs(end)) ;
  end
  
% fitted 3-2-1 angle changes -- the sense of the result is the final (fitted) minus the
% initial (design) value.
  
  plot_321_angle_changes( fitterArgs(end), initialParValues(end).array, finalParValues, ...
      parCovariance(end).matrix ) ;
  
% fitted row, column, rotation changes:  the sense of the result is final minus initial,
% so for example dRow = +2 pixels means that the CCD is moved 2 pixels in the "+row"
% direction (ie, the direction in which row #'s get bigger).

  [fitParsRowCol, parCovarRowCol] = convert_fit_pars_to_row_column( finalParValues, ...
      parCovariance(end).matrix, fitterArgs(end) ) ;
  plot_ccd_misalignments( fitterArgs(end), fitParsRowCol, parCovarRowCol ) ;
  
% quiver plots, before and after fitting:  the quiver points in the direction the CCD
% needs to move, in the model, to make the model match the data

  plot_fpg_residuals_quiver( fitterArgs(end), constraintPoints(end).array, ...
      initialParValues(end).array ) ;
  title('Fit residuals -- Before Fitting') ;
  plot_fpg_residuals_quiver( fitterArgs(end), constraintPoints(end).array, ...
      finalParValues ) ;
  title('Fit residuals -- After Fitting') ;

  plot_fpg_correlation_matrix( parCovariance(end).matrix, fitterArgs(end) ) ;
  title('FPG Fit Paramater Correlations') ;
  fitCorrelation = covariance_to_correlation( parCovariance(end).matrix) ;
  figure ; surf(fitCorrelation) ; title('FPG Fit Parameter Correlation') ;
  plot_fpg_global_correlation( parCovariance(end).matrix, fitterArgs(end) ) ;
  title('FPG Fit Parameter Total Correlation') ;
%%  
  plot_fpg_fit_residuals( initialParValues(end).array, fitterArgs(end), ...
      constraintPoints(end).array ) ;
  title('FPG Fit Residuals -- Before Fitting') ;
  plot_fpg_fit_residuals( finalParValues, fitterArgs(end), constraintPoints(end).array ) ;
  title('FPG Fit Residuals -- After Fitting') ;
%%  
  figure ;
  hostname = getenv('HOSTNAME') ;
  if ( (strcmp(hostname,'pixel.arc.nasa.gov')) | (strcmp(hostname,'kplt03')) )
      display_reference_cadence( initialParValues(end).array, finalParValues, fitterArgs(end), ...
          refLCDataStruct, 0,12 ) ;
      title('Star Expected Positions Before/After FPG vs Pixels') ;
  end
  
  disp(['Total time needed for this fit:  ',num2str(etime(clock,t0))]) ;
  
