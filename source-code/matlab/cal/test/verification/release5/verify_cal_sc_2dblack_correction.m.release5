function verify_cal_sc_2dblack_correction(dataLocationStr)
%function verify_cal_sc_2dblack_correction(dataLocationStr)
%
% function to verify short cadence CAL 2D black correction using ETEM2 data
%
% clear classes
% verify_cal_sc_2dblack_correction('/path/to/rec/test-data/cal/verification/short_cadence_cal/')
%
%--------------------------------------------------------------------------
%
%  Requirement:
%                   CAL1        The SOC shall remove black on a per mod/out basis.
%
%                   CAL1.CAL.3  CAL shall remove 2-D black level using FC's
%                               2-D black model.
%
%  Test Data Sets:
%                   ETEM2 runs with all motion and noise sources turned off, and
%                       (1) 2Dblack ON, pixels requantized
%                       (2) 2Dblack ON, pixels NOT requantized
%
%
%  Test Data Sets ID:
%               calInputs_calSC_2D_st_sm_dc_nl_lu_ff_rn_qn_sn_rq_cr.mat
%               calInputs_calSC_2D_st_sm_dc_nl_lu_ff_rn_qn_sn_RQ_cr.mat
%
%               calSCIntermediateStructs_2D_st_sm_dc_nl_lu_ff_rn_qn_sn_rq_cr.mat
%               calSCIntermediateStructs_2D_st_sm_dc_nl_lu_ff_rn_qn_sn_RQ_cr.mat
%
%               ccdObject_calSC_2D_st_sm_dc_nl_lu_ff_rn_qn_sn.mat
%               quantStepSizeInADUforBlack_2D_st_sm_dc_nl_lu_ff_rn_qn_sn_RQ_cr.mat
%               runParamsObject_calSC_2D_st_sm_dc_nl_lu_ff_rn_qn_sn.mat
%
% additional files available for analysis:
%               calOutputs_calSC_2D_st_sm_dc_nl_lu_ff_rn_qn_sn_rq_cr.mat
%               calOutputs_calSC_2D_st_sm_dc_nl_lu_ff_rn_qn_sn_RQ_cr.mat
%
%
%  Verification Method: Manual Inspection
%
%
%  Verification Process:
%                   Run verify_cal_2dblack_correction.m:
%
%                   (1) Load pixel data for ETEM run with only 2D black on,
%                   for both requantized and non-requantized data.
%
%                   (2) Plot the 2D black-corrected black pixels (figure 1)
%
%                   (3) Plot the difference in requantized & non-requantized
%                   (RQ - rq) 2D black-corrected black pixels, and show that
%                   the difference is bounded by the quantization step size
%                   error (figure 2)
%
%                   (4) Plot the 2D black-corrected masked/virtual smear pixels
%                   and show that the residuals are close to zero (figure 3)
%
%                   (5) Plot the 2D black-corrected target pixels and show
%                   that the residuals are close to zero (figure 4)
%
%                   (6) Plot the black correction (black fit to 2D black-corrected
%                   pixels) for both requantized and non-requantized pixels (figure 5)
%
%       Output
%                   dataLocationStr/CAL_verification_figures/cal_sc_black_correction_I.fig
%                   dataLocationStr/CAL_verification_figures/cal_sc_black_correction_II.fig
%                   dataLocationStr/CAL_verification_figures/cal_sc_black_correction_III.fig
%                   dataLocationStr/CAL_verification_figures/cal_sc_black_correction_IV.fig
%                   dataLocationStr/CAL_verification_figures/cal_sc_black_correction_V.fig
%--------------------------------------------------------------------------
% 
% Copyright 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% 
% NASA acknowledges the SETI Institute's primary role in authoring and
% producing the Kepler Data Processing Pipeline under Cooperative
% Agreement Nos. NNA04CC63A, NNX07AD96A, NNX07AD98A, NNX11AI13A,
% NNX11AI14A, NNX13AD01A & NNX13AD16A.
% 
% This file is available under the terms of the NASA Open Source Agreement
% (NOSA). You should have received a copy of this agreement with the
% Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
% 
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
% TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% 
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.
%

cd(dataLocationStr);

numShortExposures = 9;

%--------------------------------------------------------------------------
% load data for etem run with 2D black only
%--------------------------------------------------------------------------

% load etem raw data runParamsObject and ccdObject
warning off all
load runParamsObject_calSC_2D_st_sm_dc_nl_lu_ff_rn_qn_sn.mat
load ccdObject_calSC_2D_st_sm_dc_nl_lu_ff_rn_qn_sn.mat
warning on all

% extract etem2 data struct with the black column indices that were spatially coadded
blackCoAddCols = runParamsObject.keplerData.blackCoAddCols(:);        % = 1116:1132;

%--------------------------------------------------------------------------
% load the 2D black corrected pixels for requantized data
%--------------------------------------------------------------------------
load calSCIntermediateStructs_2D_st_sm_dc_nl_lu_ff_rn_qn_sn_RQ_cr.mat

blackPixels2DblackCorrected_RQ  = calCollateralIntermediateStruct.blackPixels2DblackCorrected./ numShortExposures;
mSmearPixels2DblackCorrected_RQ = calCollateralIntermediateStruct.mSmearPixels2DblackCorrected./ numShortExposures;
vSmearPixels2DblackCorrected_RQ = calCollateralIntermediateStruct.vSmearPixels2DblackCorrected./ numShortExposures;

blackGaps  = calCollateralIntermediateStruct.blackGaps;
mSmearGaps = calCollateralIntermediateStruct.mSmearGaps;
vSmearGaps = calCollateralIntermediateStruct.vSmearGaps;

% reset the gapped pixel values for plotting purposes only
highValueForPlots = NaN;

blackPixels2DblackCorrected_RQ(blackGaps)   = highValueForPlots;
mSmearPixels2DblackCorrected_RQ(mSmearGaps) = highValueForPlots;
vSmearPixels2DblackCorrected_RQ(vSmearGaps) = highValueForPlots;

blackCorrection_RQ = calCollateralIntermediateStruct.blackCorrection./ numShortExposures;

photometricPixels2DblackCorrected_RQ = calPhotometricIntermediateStruct_1.photometricPixels2DblackCorrected./ numShortExposures;


%--------------------------------------------------------------------------
% load the 2D black corrected pixels for non-requantized data
%--------------------------------------------------------------------------
load calSCIntermediateStructs_2D_st_sm_dc_nl_lu_ff_rn_qn_sn_rq_cr.mat

blackPixels2DblackCorrected_rq  = calCollateralIntermediateStruct.blackPixels2DblackCorrected./ numShortExposures;
mSmearPixels2DblackCorrected_rq = calCollateralIntermediateStruct.mSmearPixels2DblackCorrected./ numShortExposures;
vSmearPixels2DblackCorrected_rq = calCollateralIntermediateStruct.vSmearPixels2DblackCorrected./ numShortExposures;

% valid non-gapped pixels
blackPixels2DblackCorrected_rq(blackGaps)   = highValueForPlots;
mSmearPixels2DblackCorrected_rq(mSmearGaps) = highValueForPlots;
vSmearPixels2DblackCorrected_rq(vSmearGaps) = highValueForPlots;

blackCorrection_rq = calCollateralIntermediateStruct.blackCorrection./ numShortExposures;

photometricPixels2DblackCorrected_rq = calPhotometricIntermediateStruct_1.photometricPixels2DblackCorrected./ numShortExposures;


%--------------------------------------------------------------------------
% FIGURE 1: plot 2D black-corrected black pixels
%--------------------------------------------------------------------------

figure;
h1 = plot(blackPixels2DblackCorrected_RQ, 'r.');
hold on
h2 = plot(blackPixels2DblackCorrected_rq, 'g.');

legend([h1(1) h2(1)], {'requantized', 'non-requantized'}, 'Location', 'Best');

xlabel('Black row');
ylabel('Flux (ADU/Read)');
title('2Dblack-corrected black (ETEM2 run with only 2Dblack)');

fileNameStr = [dataLocationStr 'CAL_verification_figures/cal_sc_black_correction_I.fig'];
paperOrientationFlag = false;
includeTimeFlag      = false;
printJpgFlag         = false;

plot_to_file(fileNameStr, paperOrientationFlag, includeTimeFlag, printJpgFlag);


%--------------------------------------------------------------------------
% FIGURE 2: plot (RQ-rq) 2D black-corrected black pixels
%--------------------------------------------------------------------------
load quantStepSizeInADUforBlack_2D_st_sm_dc_nl_lu_ff_rn_qn_sn_RQ_cr.mat quantizationStepSizeInADUforBlack

quantizationStepSizeInADUforBlack = quantizationStepSizeInADUforBlack./(length(blackCoAddCols).* numShortExposures);

quantizationStepSizeInADUforBlack(blackGaps) = highValueForPlots;

figure;

h3 = plot(blackPixels2DblackCorrected_RQ(:) - blackPixels2DblackCorrected_rq(:), 'r.');
hold on
h4 = plot(quantizationStepSizeInADUforBlack(:)/2*[-1,1], 'c.');

xlabel('Black row');
ylabel('Diff in Flux (ADU/Read)');
title('Requantized minus non-req 2Dblack-corrected black (ETEM2 run with only 2Dblack)');

legend([h3(1) h4(1)], {'(Req - nonreq) 2Dblack-corrected black', 'quant step size uncertainty'}, 'Location', 'Best');


fileNameStr = [dataLocationStr 'CAL_verification_figures/cal_sc_black_correction_I!.fig'];
paperOrientationFlag = false;
includeTimeFlag      = false;
printJpgFlag         = false;

plot_to_file(fileNameStr, paperOrientationFlag, includeTimeFlag, printJpgFlag);


%--------------------------------------------------------------------------
% FIGURE 3: plot 2D black-corrected masked/virtual smear pixels
%--------------------------------------------------------------------------
figure;
subplot(2, 1, 1)
h5 = plot(mSmearPixels2DblackCorrected_RQ, 'c.');
hold on
h6 = plot(vSmearPixels2DblackCorrected_RQ, 'b.');

xlabel('Smear Column');
ylabel('Flux (ADU/Read)');
title('Requantized 2Dblack-corrected smear  (2Dblack on, stars off)');
legend([h5(1) h6(1)], {'masked smear', 'virtual smear'}, 'Location', 'Best');

subplot(2, 1, 2)

h7 = plot(mSmearPixels2DblackCorrected_rq, 'c.');
hold on
h8 = plot(vSmearPixels2DblackCorrected_rq, 'b.');

xlabel('Smear Column');
ylabel('Flux (ADU/Read)');
title('Non-requantized 2Dblack-corrected smear (2Dblack on, stars off)');
legend([h7(1) h8(1)], {'masked smear', 'virtual smear'}, 'Location', 'Best');


fileNameStr = [dataLocationStr 'CAL_verification_figures/cal_sc_black_correction_III.fig'];
paperOrientationFlag = false;
includeTimeFlag      = false;
printJpgFlag         = false;

plot_to_file(fileNameStr, paperOrientationFlag, includeTimeFlag, printJpgFlag);


%--------------------------------------------------------------------------
% FIGURE 4: plot 2D black-corrected target pixels
%--------------------------------------------------------------------------
figure;
subplot(2, 1, 1)
h9 = plot(photometricPixels2DblackCorrected_RQ, 'r.');
xlabel('Photometric linear idx');
ylabel('Flux (ADU/Read)');
title('Requantized 2Dblack-corrected photometric pixels (2Dblack on, stars off)');
legend(h9(1), 'requantized', 'Location', 'Best');

subplot(2, 1, 2)
h10 = plot(photometricPixels2DblackCorrected_rq, 'b.');
xlabel('Photometric linear idx');
ylabel('Flux (ADU/Read)');
title('Non-requantized 2Dblack-corrected photometric pixels (2Dblack on, stars off)');
legend(h10(1), 'non-requantized', 'Location', 'Best');

fileNameStr = [dataLocationStr 'CAL_verification_figures/cal_sc_black_correction_IV.fig'];
paperOrientationFlag = false;
includeTimeFlag      = false;
printJpgFlag         = false;

plot_to_file(fileNameStr, paperOrientationFlag, includeTimeFlag, printJpgFlag);


%--------------------------------------------------------------------------
% FIGURE 5: plot the black correction for both requantized and non-requantized pixels
%--------------------------------------------------------------------------
figure;
subplot(2, 1, 1)

h11 = plot(blackCorrection_RQ, 'b.');
xlabel('Black row');
ylabel('Black fit correction (ADU/Read)');
title('Black-fit correction (2Dblack on, stars off, requantized b)');
legend(h11(1), 'requantized', 'Location', 'Best');


subplot(2, 1, 2)

h12 = plot(blackCorrection_rq, 'r.');
xlabel('Black row');
ylabel('Black fit correction (ADU/Read)');
title('Black-fit correction (2Dblack on, stars off, non-requantized )');
legend(h12(1), 'non-requantized', 'Location', 'Best');


fileNameStr = [dataLocationStr 'CAL_verification_figures/cal_sc_black_correction_V.fig'];
paperOrientationFlag = false;
includeTimeFlag      = false;
printJpgFlag         = false;

plot_to_file(fileNameStr, paperOrientationFlag, includeTimeFlag, printJpgFlag);


cd(dataLocationStr);

return;

