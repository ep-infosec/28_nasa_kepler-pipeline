<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2017 United States Government as represented by the
  Administrator of the National Aeronautics and Space Administration.
  All Rights Reserved.
  
  This file is available under the terms of the NASA Open Source Agreement
  (NOSA). You should have received a copy of this agreement with the
  Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
  
  No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
  WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
  INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
  WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
  INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
  FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
  TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
  CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
  OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
  OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
  FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
  REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
  AND DISTRIBUTES IT "AS IS."

  Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
  AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
  SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
  THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
  EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
  PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
  SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
  STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
  PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
  REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
  TERMINATION OF THIS AGREEMENT.
-->

<project name="matlab" default="build" basedir=".">

  <!-- Include contributed tasks, such as if. -->
  <taskdef resource="net/sf/antcontrib/antlib.xml"
           classpath="../java/jars/dev/ant-contrib/ant-contrib-1.0b2.jar" />

  <!-- ================== Global properties ====================== -->

  <!-- The following projects directories will be included in the build. -->
  <!-- The current list consists of just those projects where development has started -->
  <!-- All projects:   value="cal,debug,dv,gar,pa,pdc,pdq,ppa,prf,rls,tad,tps" -->

  <property name="build.top" value="${basedir}/.." />

  <if>
    <isset property="pleiades" />
    <then>
      <property name="project.list" value="cal,tps,pa,pdc,dv,debug" />
    </then>
    <else>
      <property name="project.list" value="dynablack,cal,ppa,tps,pdc,pa,dv,pdq,gar,tad,sggen,ar,debug,etem2,bin_to_mat,tip" />
    </else>
  </if>

  <property name="project.list.init"
            value="build,common,fc" />
  
  <property name="jars" value="../java/jars" />

 <!-- Load the environment variables so that they can be accessed using -->
  <!-- the prefix "socenv." -->
  <property environment="socenv" />

  <!-- The number of threads or processes to use when building. -->
  <if>
    <isset property="socenv.SOC_BUILD_NPROC" />
    <then>
      <property name="build.nproc" value="${socenv.SOC_BUILD_NPROC}" />
    </then>
    <else>
      <property name="build.nproc" value="3" />
    </else>
  </if>
  
  <exec executable="matlab" output="matlab-ver.txt" failonerror="true">
    <arg value="-nodesktop" />
    <arg value="-nojvm" /> <!-- This may emit errors when soc_startup.m is evaluated. -->
    <arg value="-r" />
    <arg value="ver; exit;" />
  </exec>
   
  <loadfile property="matlabVersion" srcFile="matlab-ver.txt" failonerror="true"/>
  <if>
    <and>
      <not>
        <contains string="${matlabVersion}" substring="2010b"/>
      </not>
      <not>
        <isset property="socenv.SOC_MATLAB_FORCED" />
      </not>
    </and>
    <then>
      <fail message="Not using MATLAB 2010b.  Found:${matlabVersion}" />
    </then>
  </if>
  
  <!-- ================== Published Targets ====================== -->

  <target name="clean" depends="prep"
          description="Remove all compilation artifacts">
    <antcall target="call-projects">
      <param name="target.name" value="clean"/>
    </antcall>
  </target>

  <target name="clean-matlab" depends="prep"
          description="Remove all compilation artifacts except for the code generated by the java build">
    <antcall target="call-projects">
      <param name="target.name" value="clean-matlab"/>
    </antcall>
  </target>

  <target name="build" depends="prep"
          description="Compile all projects">
    <antcall target="call-projects">
      <param name="target.name" value="all"/>
    </antcall>
  </target>  

  <target name="build-nomcc" depends="prep"
          description="Compile without mcc">
    <antcall target="call-projects">
      <param name="target.name" value="build-nomcc"/>
    </antcall>
  </target>

  <target name="dist" depends="prep"
          description="Assemble binaries into a runtime file structure">
    <antcall target="call-projects">
      <param name="target.name" value="dist"/>
    </antcall>
  </target>

  <target name="test" depends="prep"
          description="Run unit tests">
    <property name="test.failed.file" value="/tmp/matlab-test.failed" />
    <delete file="${test.failed.file}" />

    <antcall target="call-projects">
      <param name="target.name" value="test" />
    </antcall>

    <available file="${test.failed.file}" property="test.failed" />
    <if>
      <isset property="test.failed" />
      <then>
        <fail message="Errors in unit tests" />
      </then>
    </if>
  </target>

  <target name="mlint" depends="prep" description="Run mlint">
    <antcall target="call-projects">
      <param name="target.name" value="mlint"/>
    </antcall>
  </target>

  <target name="doc" depends="prep" description="Produce MATLAB documentation">
    <antcall target="call-projects">
      <param name="target.name" value="doc"/>
    </antcall>
  </target>

  <!-- ================== Internal/Private Targets ====================== -->

  <!-- Define all custom tasks. -->
  <target name="prep">
    <!-- Define ant-contrib tasks. -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <pathelement location="${jars}/dev/ant-contrib/ant-contrib-1.0b2.jar"/>
      </classpath>
    </taskdef>
  </target>

  <!-- Call the named target on in each project's build file. -->
  <target name="call-projects">
    <!-- Call the build target for each project. -->
    <!-- It is assumed that ${target.name} is already set by this point. -->
    <echo> Number of processors to use when building ${build.nproc} </echo>

    <delete file="build.errors" />
    <foreach list="${project.list.init}" target="invoke-project"
             param="invoke.project.name" inheritAll="true" trim="yes" />
    <foreach list="${project.list}" target="invoke-project"
             param="invoke.project.name" inheritAll="true" trim="yes"
             parallel="true" maxThreads="${build.nproc}" />

    <if>
      <available file="build.errors" />
      <then>
        <loadfile property="build.errors" srcFile="build.errors" quiet="true" />
      </then>
    </if>
    <fail status="3" >
      <condition>
        <contains string="${build.errors}" substring=" Error " casesensitive="true" />
      </condition>
The following errors occurred executing this build:
${build.errors}</fail>
  </target>

  <target name="invoke-project">
    <echo>======================== ${target.name} ${invoke.project.name} ========================</echo>
    <!-- Set a property so project builds can know tasks are defined, etc. -->
    <property name="build.top.level" value="true"/>
    <!-- Create temporary properties that use location attribute
    instead of value to canonicalize path. This is required by the
    run_depfun function. Later, the location attribute should be used
    when setting all file or directory properties. -->
    <property name="soc.code.root" location="${build.top}" />
    <property name="soc.dist.root" location="${build.top}/dist" />
    <exec executable="make" errorproperty="exec.errors" failonerror="false" >
      <env key="SOC_CODE_ROOT" value="${soc.code.root}" />
      <env key="SOC_BUILD_NPROC" value="${build.nproc}" />
      <arg value="-w" />
      <arg value="-C" />
      <arg value="${invoke.project.name}" />
      <arg value="${target.name}" />
    </exec>
    <echo message="${exec.errors}" />
    <if>
      <contains string="${exec.errors}" substring=" Error " casesensitive="true" />
      <then>
        <echo file="build.errors" append="true" >
${invoke.project.name} failed:
${exec.errors}
        </echo>
      </then>
    </if>
  </target>

</project>
