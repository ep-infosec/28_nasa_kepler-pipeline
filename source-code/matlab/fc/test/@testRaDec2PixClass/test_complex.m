function self = test_complex(self)
%
% Copyright 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% 
% This file is available under the terms of the NASA Open Source Agreement
% (NOSA). You should have received a copy of this agreement with the
% Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
% 
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
% TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% 
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.
%
    disp('complex');
    ra = 300:0.00001:300.01599; dec = 45.0:0.00001:45.01599; jd = 55000; 

    raDec2PixData = retrieve_ra_dec_2_pix_model(54999, 56001);
    raDec2PixObject = raDec2PixClass(raDec2PixData, 'zero-based');

    [m10 o10 r10 c10]  = ra_dec_2_pix(raDec2PixObject, ra, dec, jd, 0);
    [m11 o11 r11 c11]  = ra_dec_2_pix(raDec2PixObject, ra, dec, jd);
    assert_not_equals(r10, r11);
    assert_not_equals(c10, c11);

    [m0 o0 r0 c0]  = ra_dec_2_pix(raDec2PixObject, 300:.01:300.1, 45:.01:45.1,         55000);
    [m1 o1 r1 c1]  = ra_dec_2_pix(raDec2PixObject, 300:.01:300.1, 45:.01:45.1,         55000:.01:55000.1);
    [m2 o2 r2 c2]  = ra_dec_2_pix(raDec2PixObject, 300:.01:300.1, 45:.01:45.1,         55000:.01:55000.1);
    [m3 o3 r3 c3]  = ra_dec_2_pix(raDec2PixObject, 300.01:.01:300.03, 45.01:.01:45.03, 55801:55803);

    ra = 300:0.00001:300.01599; dec = 45.0:0.00001:45.01599; jd = 55000;
    [m4 o4 r4 c4]  = ra_dec_2_pix(raDec2PixObject, ra, dec, jd);

    ra = 300:0.00001:300.00040; dec = 45.0:0.00001:45.00040; jd = 55000:55100;
    [m5 o5 r5 c5]  = ra_dec_2_pix(raDec2PixObject, ra, dec, jd);

    raStar = [291.1723 290.4567 290.1928 290.6830 291.2110 291.2968 290.9681 291.0413 290.6262 290.6449 290.7705 290.8890 290.1622 290.1511];
    decStar = [50.6331 50.9261 50.7795 50.4716 51.1834 50.7470 50.1154 50.7723 50.0352 51.1383 50.8541 51.0583 50.7684 50.4489];
    julianTime = 0.0551e+06;
    a0 = 290.6667;
    d0 = 44.5000;
    dphi = 0;
    [module, output, row_hat, col_hat] = ra_dec_2_pix_absolute(raDec2PixObject, raStar, decStar, julianTime, a0, d0, dphi);

    assert_equals(1, 1);
return
