function is = update_planet_model_with_derived_parameters(is)
% function is = update_planet_model_with_derived_parameters(is)
%
% This function updates the planet models in the incoming struct array of transit models with a structure that contains the identical
% generating parameters plus the derived parameters (generated by the transitGeneratorClass). The value set in these fields for each target
% are based on the observable transit parameters retruned by transitGeneratorClass given the transit model input from the field
% transitModelStructArray. The cadence time list provided before making the transitGeneratorClass object is taken to be the
% transitEpochBkjd. A config map array is also added. It is assumed configMaps are supplied with the inputStruct. Both cadenceTimes and
% configMaps are set to [] before returning the updated planet models.
%
% INPUTS: is [struct] with the following fields:
%               transitModelStructArray     == [struct array]; nTargets x 1; transit model struct as defined by transitGeneratorClass inputs
%               configMaps                  == [struct array]; nMaps x 1; valid spacecraft config maps 
% OUTPUTS: is [struct] with the following fields updated:
%               planetModel                 == [struct]; planet model struct as defined by transitGeneratorClass 
% 
% Copyright 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% 
% NASA acknowledges the SETI Institute's primary role in authoring and
% producing the Kepler Data Processing Pipeline under Cooperative
% Agreement Nos. NNA04CC63A, NNX07AD96A, NNX07AD98A, NNX11AI13A,
% NNX11AI14A, NNX13AD01A & NNX13AD16A.
% 
% This file is available under the terms of the NASA Open Source Agreement
% (NOSA). You should have received a copy of this agreement with the
% Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
% 
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
% TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% 
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.
%

% hard coded
COUNTER_THRESHOLD = 500;


nTargets = length(is.transitModelStructArray);

disp(['Producing updated planet model for ',num2str(nTargets),' targets ...']);

for iTarget = 1:nTargets
    
    if isequal(floor(iTarget/COUNTER_THRESHOLD)*COUNTER_THRESHOLD, iTarget)
        disp(['Target ',num2str(iTarget),' done ...']);
    end
    
    tStruct = is.transitModelStructArray(iTarget);
    
    if ~isempty(tStruct)
        % add config map
        tStruct.configMaps = is.configMaps;
        % add one timestamp - note transitEpochBkjd is not necessarily in Bkjd. In this tool we have use Bjd to populate this field
        % so this should be in range of the configMaps timestamps which are also in Bjd
        tStruct.cadenceTimes = tStruct.planetModel.transitEpochBkjd;
        
        % make object
        obj = transitGeneratorClass(tStruct);
        
        % retrieve planet model and update data struct        
        p = get(obj,'planetModel');
        
        % It is possible for the transitGeneratorClass to return a complex value for some of the derived parameters if presented with with a
        % non-physical or close to a non-physical model so we will take the real part of the result.
        % I guess there could be more than one planet in general but the transitStructArray from TIP contains only one planet per entry
        % although there could be multiple entries using the same keplerId
        for iPlanet = 1:length(p)            
            pp = p(iPlanet);
            pFields = fieldnames(pp);
            for iName = 1:length(pFields)
                pp.(pFields{iName}) = real(pp.(pFields{iName}));
            end
            p(iPlanet) = pp;
        end
                
        % copy new model into transit model struct
        tStruct.planetModel = p;
        
        % empty configMaps and cadenceTimes in transit model struct
        tStruct.cadenceTimes = [];
        tStruct.configMaps = [];
        
        % replace transit model in array
        is.transitModelStructArray(iTarget) = tStruct;
    end
end
