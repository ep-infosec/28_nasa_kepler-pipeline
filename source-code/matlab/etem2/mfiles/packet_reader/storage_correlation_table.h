/*
 * Copyright 2017 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 * 
 * This file is available under the terms of the NASA Open Source Agreement
 * (NOSA). You should have received a copy of this agreement with the
 * Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
 * 
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
 * WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
 * INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
 * WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
 * INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
 * FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
 * TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
 * CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
 * OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
 * OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
 * FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
 * REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
 * AND DISTRIBUTES IT "AS IS."
 *
 * Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
 * AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
 * SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
 * THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
 * EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
 * PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
 * SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
 * STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
 * PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
 * REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
 * TERMINATION OF THIS AGREEMENT.
 */

#ifndef _STORAGE_CORRELATION_TABLE
#define _STORAGE_CORRELATION_TABLE

#define STC_ENTRY_SSR_SIZE 24

#define LOG_VTC_SEC_OFFSET 0
#define LOG_VTC_SUB_SEC_OFFSET 4
#define DATA_VTC_SEC_OFFSET 8
#define DATA_VTC_SUB_SEC_OFFSET 12
#define APID_OFFSET 13
#define PACKETID_OFFSET 14
#define DATA_OFFSET_OFFSET 15
#define DATA_LENGTH_OFFSET 19

#define LOG_VTC_SEC_NBYTES 4
#define LOG_VTC_SUB_SEC_NBYTES 1
#define DATA_VTC_SEC_NBYTES 4
#define DATA_VTC_SUB_SEC_NBYTES 1
#define APID_NBYTES 1
#define PACKETID_NBYTES 1
#define DATA_OFFSET_NBYTES 4
#define DATA_LENGTH_NBYTES 4

#define LONG_CADENCE_APID 40
#define SHORT_CADENCE_APID 41
#define FFI_CADENCE_APID 42

#define BASELINE_PKTID 100
#define RESIDUAL_PKTID 101
#define ENCODED_PKTID 102
#define RAW_PKTID 103
#define REQUANTIZED_PKTID 104

class sct_table_entry {
	public:
	
	unsigned long int entryNumber;
	
	unsigned long int logVtcSeconds;
	unsigned char logVtcSubSeconds;
	unsigned long int dataVtcSeconds;
	unsigned char dataVtcSubSeconds;
	unsigned char apID;
	unsigned char packetID;
	unsigned long int dataOffset;
	unsigned long int dataLength;
	
	sct_table_entry(void);
	void set(unsigned char *bytes, int n);
	void print(char *hdr = "");
};


class storage_correlation_table {
	public:
	
	sct_table_entry *table;
	int nEntries;
	
	storage_correlation_table(void);
	~storage_correlation_table(void);
	
	void init_table(int nEntries);
	void read_table(char *filename, int nEntries);
	void correct_table(char *filename, int nEntries);
	void print(char *hdr = "");
};

#endif
