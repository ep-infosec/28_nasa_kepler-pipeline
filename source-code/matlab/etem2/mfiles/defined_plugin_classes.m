function pluginList = defined_plugin_classes()

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define the raDec2Pix objects
% 
% Copyright 2017 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration.
% All Rights Reserved.
% 
% NASA acknowledges the SETI Institute's primary role in authoring and
% producing the Kepler Data Processing Pipeline under Cooperative
% Agreement Nos. NNA04CC63A, NNX07AD96A, NNX07AD98A, NNX11AI13A,
% NNX11AI14A, NNX13AD01A & NNX13AD16A.
% 
% This file is available under the terms of the NASA Open Source Agreement
% (NOSA). You should have received a copy of this agreement with the
% Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
% 
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
% TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% 
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.
%

% original (ETEM1) raDec2Pix class
pluginList.oldRaDec2PixData = struct(...
    'className', 'oldRaDec2PixClass');

% SOC pipeline production raDec2Pix class
pluginList.productionRaDec2PixData = struct(...
    'className', 'productionRaDec2PixClass');

% empty raDec2Pix class, used when all results requiring ra_dec_2_pix have
% been pre-computed and the database is not available
pluginList.noRaDec2PixData = struct(...
    'className', 'noRaDec2PixClass');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define the catalog reader objects

% data for the Kepler input catalog reader class
% which reads from the SOC database
pluginList.kicCatalogReaderData = struct(...
    'className', 'kicCatalogReaderClass', ...
    'catalogFileLocation', 'configuration_files', ...
    'besanconCatalogFilename', 'Besancon_Catalog.mat');

% data for object that modifies the kic
pluginList.targetOnlyCatalogData = struct(...
    'className', 'targetOnlyCatalogClass', ...
    'inputCatalogData', pluginList.kicCatalogReaderData);

% data for object that modifies the kic
pluginList.modifyCatalogData = struct(...
    'className', 'modifyCatalogClass', ...
    'inputCatalogData', pluginList.kicCatalogReaderData, ...
    'fakeKicIdStart', 20000000, ...
    'removeStarsList', [], ...
    'modifyMagnitudesList', [], ...
    'addStarsList', []);
pluginList.modifyCatalogData.removeStarsList(1).magnitudeRange = [10 12];
pluginList.modifyCatalogData.removeStarsList(1).nStarsToRemove = 10;
pluginList.modifyCatalogData.modifyMagnitudesList(1).magnitudeRange = [10 12];
pluginList.modifyCatalogData.modifyMagnitudesList(1).nStarsToModify = 10;
pluginList.modifyCatalogData.modifyMagnitudesList(1).magnitudeOffsetCenter = 2;
pluginList.modifyCatalogData.modifyMagnitudesList(1).magnitudeOffsetStd = 0.5;
pluginList.modifyCatalogData.addStarsList(1).magnitudeRange = [10 12];
pluginList.modifyCatalogData.addStarsList(1).nStarsToAdd = 10;


% data for the ETEM 1 catalog reader class
pluginList.etem1CatalogReaderData = struct(...
    'className', 'etem1CatalogReaderClass', ...
    'catalogFileLocation', 'configuration_files', ...
    'besanconCatalogFilename', 'Besancon_Catalog.mat');

% data for the ETEM 1 catalog reader class
pluginList.fakeGridCatalogData = struct(...
    'className', 'fakeGridCatalogClass', ...
    'gridSpacing', 10, ...
    'magnitude', 12.5, ...
    'logSurfaceGravity', 4.5, ...
    'logMetallicity', 0, ...
    'effectiveTemperature', 6000);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define the tad input objects

% data for the tad file reader class
% gets tad input from a pre-existing file
pluginList.tadFileReaderData = struct(...
    'className', 'tadFileReaderClass', ...
    'tadFileLocation', '.', ...
    'tadFilename', 'ETEM2_tad_inputs.mat');

% run tad to create the tad inputs
pluginList.runTadData = struct(...
    'className', 'runTadClass', ...
    'usePointingOffsets', 0);

% get tad inputs from the database
pluginList.databaseTadData = struct(...
    'className', 'databaseTadClass');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define motion objects

% data for the dva motion object
pluginList.dvaMotionData = struct( ...
    'className', 'dvaMotionClass');

% data for the null dva motion object
pluginList.dvaNoMotionData = struct( ...
    'className', 'dvaNoMotionClass');

% data for the pointingJitter motion object
pluginList.pointingJitterMotionData = struct( ...
    'className', 'pointingJitterMotionClass', ...
    'sampleFrequency', 2, ...
    'jitterMotionFilename', 'jitter06a_perf_befDesat_0p5sec144hr.mat', ...
    'jitterMotionFileLocation',  'configuration_files');

% data for the jitter motion object
pluginList.jitterMotionData = struct( ...
    'className', 'jitterMotionClass', ...
    'sampleFrequency', 2, ...
    'jitterMotionFilename', 'jitter06a_perf_befDesat_0p5sec144hr.mat', ...
    'jitterMotionFileLocation',  'configuration_files');

% data for the jitter motion object
pluginList.jitterNoMotionData = struct( ...
    'className', 'jitterNoMotionClass');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define psf objects

% data a specific psf object
pluginList.specificPsfData = struct( ...
    'className', 'specificPsfClass', ...
    'psfDuration', 0, ...
    'psfFilename', [], ...
    'psfFileLocation',  '/path/to/prf/v7/');

% data for getting the psf assigned to a specific mod/out
pluginList.psfByModOutData = struct( ...
    'className', 'psfByModOutClass', ...
    'psfDuration', 0, ...
    'psfFilename', '', ...
    'psfFileLocation',  '/path/to/ETEM_PSFs/all_psf/');

% data for getting the psf built from a prf
% psfDuration is the time duration for which that PSF (PRF) was observed,
% used to filter jitter motion during that time
% the nominal PRF model was measured with 15 minute cadence ~ 900 seconds.
pluginList.psfFromPrfData = struct( ...
    'className', 'psfFromPrfClass', ...
    'psfDuration', 900, ...
    'gridPointsPerPixel', 50, ...
    'mjd', [], ...
    'prfFileHeader', [], ...
    'prfFileLocation',  []);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define star selector objects

% define the random star selector object
pluginList.randomStarSelectorData = struct( ...
    'className', 'randomStarSelectorClass', ...
    'probability', 0.5);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define target selector objects

% define the random star selector object
pluginList.selectTargetByPropertyData = struct( ...
    'className', 'selectTargetByPropertyClass', ...
    'magnitudeRange', [9 17], ...
    'effectiveTemperatureRange', [5240 6530], ...
    'logGRange', [4 5]);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define additive background objects

% define the dark current object
% here value = dark current value
pluginList.darkCurrentData = struct( ...
    'className', 'darkCurrentClass', ...
    'darkCurrentValue', 0.0);

% define the stellar background object
% here value = background magnitude
pluginList.stellarBackgroundData = struct( ...
    'className', 'stellarBackgroundClass', ...
    'stellarBackgroundMagnitude', 22.5);

% define the scalar zodiacal light object
% here value = preferred zodical light flux.
% if value is 0 then it is computed
pluginList.scalarZodiLightData = struct( ...
    'className', 'scalarZodiLightClass', ...
    'zodiFluxValue', 0.0);

% define the zodiacal light object
% here value = preferred zodical light flux.
% if value is 0 then it is computed
pluginList.zodiacalLightData = struct( ...
    'className', 'scalarZodiLightClass', ...
    'meshOrder', 3, ...
    'nMeshRows', 5, ...
    'nMeshCols', 5, ...
    'zodiFluxValue', 0.0);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define flat field component objects

% define the inter-pixel variability object
pluginList.interPixelVariabilityData = struct( ...
    'className', 'interPixelVariabilityClass', ...
    'residualNoiseFileName', 'residualNoise.mat', ...
    'residualNoiseMean', 0.0, ...
    'residualNoiseStandardDeviation', 0.01);

% define the vignetting object
pluginList.vignettingData = struct( ...
    'className', 'vignettingClass', ...
    'vignettingFilename', 'vignettingData.mat', ...
    'vignettingFileLocation', 'configuration_files');

% define the charge transfer efficiency object
pluginList.flatFieldData = struct( ...
    'className', 'etemFlatFieldClass');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define spatially varying well depth object

% define the charge transfer efficiency object
pluginList.spatialWellDepthData = struct( ...
    'className', 'spatialWellDepthClass', ...
    'wellDepthVariation', []);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define charge transfer efficiency objects

% define the charge transfer efficiency object
pluginList.cteData = struct( ...
    'className', 'cteClass');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define the electrons to ADU converter object
% define the nonlinear electrons to ADU converter object
pluginList.nonlinearEtoAData = struct( ...
    'className', 'nonlinearEtoAduClass', ...
    'spatialQeVariation', [], ...
    'timeQeModulationData', []);


% define the linear electrons to ADU converter object
% the default values for this object use the nonlinearEtoAClass,
% so the specification of this object must follow the
% pluginList.nonlinearEtoAData
pluginList.linearEtoAData = struct( ...
    'className', 'linearEtoAduClass', ...
    'electronsPerADU', -1, ...
    'maxElectronsPerExposure', -1, ...
    'nonLinearEtoAData', pluginList.nonlinearEtoAData, ...
    'spatialQeVariation', [], ...
    'timeQeModulationData', []);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define gain modulation objects

% define the linear electrons to ADU converter object
pluginList.gainModulationList = struct( ...
    'className', 'gainModulationListClass');

% define the linear electrons to ADU converter object
pluginList.cadenceFileModulationData = struct( ...
    'className', 'cadenceFileModulationClass', ...
    'inputFileLocation', []);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define the 2d black (bias) object

% define the linear electrons to ADU converter object
pluginList.scalarBlackData = struct( ...
    'className', 'scalarBlackClass');

% define the linear electrons to ADU converter object
pluginList.twoDBlackData = struct( ...
    'className', 'etemTwoDBlackClass', ...
    'filename', []);

pluginList.twoDBlackTestData = struct( ...
    'className', 'etemTwoDBlackTestClass', ...
    'blackArrayAdu', [], ...
    'blackDataDir', './cbd_test_cases', ...
    'blackDataFilename', 'twoDBlackImage.mat');

temperatureFunctionData = struct( ...
    'detector', 'PEDACQ3T', ...
    'tThermal_in', 1/0.0002, ...
    'temp_equilibrium_in', 17, ...
    'deltaT_initial_in', NaN, ...
    'temp_initial', 20.3, ...
    'dTdt_initial', NaN, ...
    'linear_rate', 0.0, ...
    'verbose', false);

pluginList.dynamicNoiseData = struct( ...
    'className', 'dynamicNoiseClass', ...
    'baseline', 0, ...
    'temperatureFunctionData', temperatureFunctionData, ...
    'fgsCrosstalkDataLocation', ...
    '/path/to/science_office/instrument_scientist/SSTT/Etem_modeling/thermal_coeff_images', ...
    'rollingBandDataLocation', 'dynamic_noise_classes');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define pixel noise objects

% define the pixel shot noise object
pluginList.shotNoiseData = struct( ...
    'className', 'shotNoiseClass');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define pixel effect objects

% define the pixel shot noise object
pluginList.etemUndershootData = struct( ...
    'className', 'etemUndershootClass');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% read noise objects

% define the pixel read noise object
pluginList.readNoiseData = struct( ...
    'className', 'etemReadNoiseClass');

% define the pixel read noise object
% read noise is in electrons/exposure
pluginList.constantReadNoiseData = struct( ...
    'className', 'constantReadNoiseClass', ...
    'readNoise', 100);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define astrophysics objects

% define the cosmic ray object
% gcm rate is in cr events/cm^2/second
% minGcmCount is in electrons
pluginList.cosmicRayData = struct( ...
    'className', 'cosmicRayClass', ...
    'cosmicRayFilename', 'gcmshapes_03_16_2005.mat', ...
    'cosmicRayLocation', 'configuration_files', ...
    'gcmRate', 5, ...
    'minGcmCount', 1);

% define the barycentric time correction object
pluginList.barycentricTimeCorrectionData = struct( ...
    'className', 'barycentricTimeCorrectionClass', ...
    'keplerSpiceId', '-227', ...
    'spiceEpoch', 'J2000', ...
    'polyOrder', 10, ...
    'maxTimeLength', 200);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define target light curve objects

% simple test light curve
% depthRange is a fraction < 1
% periodRange is in days
% phaseRange is in days
pluginList.testSineData = struct( ...
    'className', 'testSineClass', ...
    'classType', 'global', ...
    'depthRange', [0.15 0.35], ...
    'periodRange', [1 3], ...
    'phaseRange', [0 1]);

% SOHO-based stellar variability signal
pluginList.sohoSolarVariabilityData = struct( ...
    'className', 'sohoSolarVariabilityClass', ...
    'classType', 'global', ...
    'sohoDataFileName', 'solnew.mat', ...
    'sohoDataLocation', 'configuration_files', ...
    'stellarRotationRange', [0.8, 1.2], ...
    'numRotationSpeeds', 3);

% transiting planet object
pluginList.transitingPlanetData = struct( ...
    'className', 'transitingPlanetClass', ...
    'classType', 'local', ...
    'radiusRange', [0.5 3], ...
    'radiusUnits', 'earthRadius', ...
    'eccentricityRange', [0 0.8], ...
    'orbitalPeriodRange', [10 20], ...
    'orbitalPeriodUnits', 'day', ...
    'periCenterDateRange', [datestr2mjd('1-Jan-2008') datestr2mjd('31-Dec-2008')], ...
    'minimumImpactParameterRange', [0 0.7], ...
    'depthRange', []);

% transiting star (eclipsing binary) object, specification of secondary
% properties
pluginList.transitingStarData = struct( ...
    'className', 'transitingStarClass', ...
    'classType', 'local', ...
    'effectiveTemperatureRange', [4800 6500], ...
    'logGRange', [3 5], ...
    'eccentricityRange', [], ...  % default [] will randomly select eccentricity from Duquennoy & Mayor distribution
    'orbitalPeriodRange', [10 20], ...
    'orbitalPeriodUnits', 'day', ...
    'periCenterDateRange', [datestr2mjd('1-Jan-2008') datestr2mjd('31-Dec-2008')], ...
    'minimumImpactParameterRange', [0 0.7]);

% inject modulation from a file into target flux
pluginList.injectFileModulationData = struct( ...
    'className', 'injectFileModulationClass', ...
    'classType', 'local', ...
    'fileLocation', 'configurationFiles/solarlike1.dat');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define target light curve objects

% background eclipsing binary object, specification of secondary
% properties plus offsets from target
pluginList.backgroundBinaryData = struct( ...
    'className', 'backgroundBinaryData', ...
    'classType', 'local', ...
    'effectiveTemperatureRange', [4800 6500], ...
    'logGRange', [3 5], ...
    'eccentricityRange', [], ...   % default [] will randomly select eccentricity from Duquennoy & Mayor distribution
    'orbitalPeriodRange', [10 20], ...
    'orbitalPeriodUnits', 'day', ...
    'periCenterDateRange', [datestr2mjd('1-Jan-2008') datestr2mjd('31-Dec-2008')], ...
    'minimumImpactParameterRange', [0 0.7], ...
    'pixelOffsetRange', [0.5 1.5], ...
    'magnitudeOffsetRange', [5 7]);
