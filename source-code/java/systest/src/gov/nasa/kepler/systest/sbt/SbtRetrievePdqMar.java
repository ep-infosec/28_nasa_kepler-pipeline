/*
 * Copyright 2017 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 * 
 * This file is available under the terms of the NASA Open Source Agreement
 * (NOSA). You should have received a copy of this agreement with the
 * Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
 * 
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
 * WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
 * INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
 * WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
 * INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
 * FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
 * TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
 * CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
 * OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
 * OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
 * FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
 * REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
 * AND DISTRIBUTES IT "AS IS."
 * 
 * Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
 * AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
 * SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
 * THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
 * EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
 * PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
 * SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
 * STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
 * PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
 * REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
 * TERMINATION OF THIS AGREEMENT.
 */

package gov.nasa.kepler.systest.sbt;

import gov.nasa.kepler.fs.api.FileStoreClient;
import gov.nasa.kepler.fs.api.FloatTimeSeries;
import gov.nasa.kepler.fs.api.FsId;
import gov.nasa.kepler.fs.client.FileStoreClientFactory;
import gov.nasa.kepler.hibernate.dr.LogCrud;
import gov.nasa.kepler.hibernate.dr.RefPixelLog;
import gov.nasa.kepler.mc.fs.PdqFsIdFactory;
import gov.nasa.kepler.pdq.PdqTimestampSeries;
import gov.nasa.kepler.systest.sbt.pdq.MarAll;
import gov.nasa.kepler.systest.sbt.pdq.MarQuarter;
import gov.nasa.spiffy.common.CompoundFloatTimeSeries;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * Sandbox tool to retrieve the Maximum Attitude Residual (MAR) time series
 * generated by PDQ for all available cadences.
 * 
 * @author Todd Klaus tklaus@arc.nasa.gov
 * 
 */
public class SbtRetrievePdqMar extends AbstractSbt {
    static final Log log = LogFactory.getLog(SbtRetrievePdqMar.class);

    public static final String SDF_FILE_NAME = "/tmp/sbt-mar.sdf";
    private static final boolean REQUIRES_DATABASE = true;
    private static final boolean REQUIRES_FILESTORE = true;

    public SbtRetrievePdqMar() {
        super(REQUIRES_DATABASE, REQUIRES_FILESTORE);
    }

    public String retrieveMar() throws Exception {
        if (!validateDatastores()) {
            return "";
        }
        LogCrud logCrud = new LogCrud();
        MarAll marAll = new MarAll();

        // retrieve all ref pixel logs
        List<RefPixelLog> refPixelLogs = logCrud.retrieveAllRefPixelLog();

        if (refPixelLogs == null || refPixelLogs.isEmpty()) {
            throw new IllegalStateException("no reference pixel data exists");
        }

        // bin the ref pixel logs by target table
        Map<Integer, List<RefPixelLog>> logsByTable = new HashMap<Integer, List<RefPixelLog>>();
        List<RefPixelLog> logsCurrentTable = new LinkedList<RefPixelLog>();
        List<Integer> tableIds = new LinkedList<Integer>();

        int currentTableId = 0;

        for (RefPixelLog refPixelLog : refPixelLogs) {
            int tableId = refPixelLog.getTargetTableId();

            if (tableId == -1) {
                continue;
            }

            if (tableId != currentTableId) {
                // crossed a table boundary
                currentTableId = tableId;
                logsCurrentTable = new LinkedList<RefPixelLog>();
                logsByTable.put(currentTableId, logsCurrentTable);
                tableIds.add(currentTableId);
            }

            logsCurrentTable.add(refPixelLog);
        }

        for (Integer id : tableIds) {
            List<RefPixelLog> logs = logsByTable.get(id);
            MarQuarter quarter = retrieveMar(id, logs);
            marAll.add(quarter);
        }

        return makeSdf(marAll, SDF_FILE_NAME);
    }

    private MarQuarter retrieveMar(int refPixelTargetTableId,
        List<RefPixelLog> refPixelLogs) throws Exception {

        PdqTimestampSeries timestamps = new PdqTimestampSeries(refPixelLogs,
            new int[0]);

        FileStoreClient fsClient = FileStoreClientFactory.getInstance();
        FsId[] fsIds = new FsId[2];

        // values
        fsIds[0] = PdqFsIdFactory.getPdqTimeSeriesFsId(
            PdqFsIdFactory.TimeSeriesType.MAX_ATTITUDE_RESIDUAL_IN_PIXELS,
            refPixelTargetTableId);

        // uncertainties
        fsIds[1] = PdqFsIdFactory.getPdqUncertaintiesFsId(
            PdqFsIdFactory.TimeSeriesType.MAX_ATTITUDE_RESIDUAL_IN_PIXELS,
            refPixelTargetTableId);

        FloatTimeSeries[] timeSeriesArray = fsClient.readTimeSeriesAsFloat(
            fsIds, 0, refPixelLogs.size() - 1, false);

        CompoundFloatTimeSeries tsData = new CompoundFloatTimeSeries(
            timeSeriesArray[0].fseries(), timeSeriesArray[1].fseries(),
            timeSeriesArray[0].getGapIndicators());

        MarQuarter q = new MarQuarter(refPixelTargetTableId, tsData, timestamps);

        return q;
    }

    public static void main(String[] args) throws Exception {

        SbtRetrievePdqMar sbt = new SbtRetrievePdqMar();
        String path = sbt.retrieveMar();

        System.out.println("path=" + path);
    }
}
