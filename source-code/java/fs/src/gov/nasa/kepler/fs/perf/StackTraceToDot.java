/*
 * Copyright 2017 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 * 
 * This file is available under the terms of the NASA Open Source Agreement
 * (NOSA). You should have received a copy of this agreement with the
 * Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
 * 
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
 * WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
 * INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
 * WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
 * INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
 * FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
 * TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
 * CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
 * OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
 * OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
 * FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
 * REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
 * AND DISTRIBUTES IT "AS IS."
 * 
 * Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
 * AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
 * SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
 * THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
 * EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
 * PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
 * SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
 * STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
 * PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
 * REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
 * TERMINATION OF THIS AGREEMENT.
 */

package gov.nasa.kepler.fs.perf;

import java.io.*;
import java.util.*;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

/**
 * Generates a Graphvis dot file from a stack trace.  Nothing is done to limit 
 * the trim the stack traces that are generated.  Each [thread, stack frame] 
 * pair will get its own node in the graph.
 * 
 * @author Sean McCauliff
 *
 */
public class StackTraceToDot {

    private static class StackFrame {
        StackFrame(String threadName, String stackName, int frameDepth) {
            this.threadName = threadName;
            this.stackName = stackName;
            this.frameDepth =frameDepth;
            this.nodeId = nodeId;
        }
        
        private final String threadName;
        private final String stackName;
        private final int frameDepth;
        private int nodeId;
        
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result
                + ((stackName == null) ? 0 : stackName.hashCode());
            result = prime * result
                + ((threadName == null) ? 0 : threadName.hashCode());
            return result;
        }
        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            StackFrame other = (StackFrame) obj;
            if (stackName == null) {
                if (other.stackName != null)
                    return false;
            } else if (!stackName.equals(other.stackName))
                return false;
            if (threadName == null) {
                if (other.threadName != null)
                    return false;
            } else if (!threadName.equals(other.threadName))
                return false;
            return true;
        }
        
        String toNodeLabel() {
            return stackName;
        }
        
        String nodeIdAsString() {
            return "Node" + Integer.toString(nodeId);
        }
    }
    
    /**
     * @param args 0 should be the name of the stack trace file as generated by
     * the StackTraceDumper.
     */
    public static void main(String[] args) throws Exception {

        File stackTraceFile = new File(args[0]);
        BufferedReader bufIn = new BufferedReader(new FileReader(stackTraceFile));
        
        
        Map<String, Integer> stackNameToNodeId = Maps.newHashMap();
        List<List<StackFrame>> edges = Lists.newArrayList();
        String lastThread = "";
        List<StackFrame> currentEdgeList = null;
        int nodei=0;
        for (String line = bufIn.readLine();  line != null; line = bufIn.readLine()) {
            String[] parts = line.split("\\|");
            int frameDepth = Integer.parseInt(parts[2]);
            StackFrame stackFrame = new StackFrame(parts[1], parts[3] + '.' + parts[4], frameDepth);
            Integer nodeId = stackNameToNodeId.get(stackFrame.stackName);
            if (nodeId == null) {
                nodeId = nodei++;
                stackNameToNodeId.put(stackFrame.stackName, nodeId);
            }
            stackFrame.nodeId = nodeId;
            if (!lastThread.equals(stackFrame.threadName)) {
                currentEdgeList = Lists.newArrayList();
                edges.add(currentEdgeList);
            }
            currentEdgeList.add(stackFrame);
            lastThread = stackFrame.threadName;
        }
        
        bufIn.close();
        
        
        File outputFile = new File(stackTraceFile.getParentFile(), stackTraceFile.getName() + ".dot");
        BufferedWriter bufOut = new BufferedWriter(new FileWriter(outputFile));
        bufOut.write("digraph D {\n");
        for (Map.Entry<String, Integer> stackNameNodeId : stackNameToNodeId.entrySet()) {
            bufOut.write("\tNode");
            bufOut.write(stackNameNodeId.getValue().toString());
            bufOut.write("[label=\"");
            bufOut.write(stackNameNodeId.getKey());
            bufOut.write("\"];\n");
        }

        
        for (List<StackFrame> edgeList : edges) {
            edgeList = Lists.reverse(edgeList);
            StackFrame prev = null;
            for (StackFrame stackFrame : edgeList) {
                if (prev == null) {
                    prev = stackFrame;
                    continue;
                }
                bufOut.write("\t");
                bufOut.write(prev.nodeIdAsString());
                bufOut.write("->");
                bufOut.write(stackFrame.nodeIdAsString());
                bufOut.write(";\n");
                prev = stackFrame;
            }
        }
        
        bufOut.write("}\n");
        bufOut.close();
    }

}
