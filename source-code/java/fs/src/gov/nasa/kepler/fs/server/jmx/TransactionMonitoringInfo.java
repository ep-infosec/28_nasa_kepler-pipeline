/*
 * Copyright 2017 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 * 
 * This file is available under the terms of the NASA Open Source Agreement
 * (NOSA). You should have received a copy of this agreement with the
 * Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
 * 
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
 * WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
 * INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
 * WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
 * INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
 * FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
 * TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
 * CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
 * OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
 * OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
 * FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
 * REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
 * AND DISTRIBUTES IT "AS IS."
 * 
 * Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
 * AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
 * SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
 * THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
 * EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
 * PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
 * SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
 * STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
 * PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
 * REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
 * TERMINATION OF THIS AGREEMENT.
 */

package gov.nasa.kepler.fs.server.jmx;

import gov.nasa.spiffy.common.jmx.AbstractCompositeData;
import gov.nasa.spiffy.common.jmx.CompositeTypeDescription;
import gov.nasa.spiffy.common.jmx.ConstructorDescription;
import gov.nasa.spiffy.common.jmx.ItemDescription;
import gov.nasa.spiffy.common.jmx.TableIndex;

import java.io.Serializable;
import java.util.Date;

import javax.management.openmbean.CompositeData;
import javax.management.openmbean.OpenDataException;

/**
 * This class contains data about current transactions exported via JMX for 
 * monitoring the file store.  The information may be in consistent since it
 * will be built using unsynchronized reads from the places which contain
 * the information.
 * 
 * @author Sean McCauliff
 *
 */
@CompositeTypeDescription("Information about a current transaction.")
public class TransactionMonitoringInfo 
    extends AbstractCompositeData
    implements Serializable, CompositeData {
    
    /**
     * 
     */
    private static final long serialVersionUID = 8273034750164356644L;
    
    //Would use InetAddress here, but we are stuck with using OpenTypes.
    private final String client;
    private final String xid;
    private final int simpleId;
    private final boolean isXa;
    private final Date startTime;
    private final Date autoRollbackTime;
    private final String state;
    
    /**
     * 
     * @param client
     * @param xid
     * @param simpleId The simple id exists so that it can be referred to by
     * humans in other methods without the need to enter in the entire Xid. 
     * The simpleId is reset between instances of the file store server.
     * @param isXa
     * @param startTime
     * @param autoRollbackTime
     * @param state
     * @throws OpenDataException 
     */
    @ConstructorDescription("Initialize all values constructor.")
    public TransactionMonitoringInfo(String client, String xid,  int simpleId,
                                                         boolean isXa, Date startTime,
                                                         Date autoRollbackTime, String state) 
        throws OpenDataException
    {
        
        this.client = client;
        this.xid = xid;
        this.simpleId = simpleId;
        this.isXa = isXa;
        this.startTime = startTime;
        this.autoRollbackTime = autoRollbackTime;
        this.state = state;
    }
    
    @ItemDescription("The client that started this transaction.")
    public String getClient() {
        return client;
    }
   
    @ItemDescription("The XA transaction ID.  This is generated by the " +
            "TransacitonManager in the case of XA transactions.")
    public String getXid() {
        return xid;
    }
    
    @ItemDescription("If true this is an XA transaction.")
    public boolean isXa() {
        return isXa;
    }
    
    @ItemDescription("The local time on the file store server when the transaction begin.")
    public Date getStartTime() { return startTime; }
    
    @ItemDescription("The local time on the file store server when the " +
            "transaction will be automatically rolledback.")
    public Date getAutoRollbackTime() { return autoRollbackTime; }
    
    @ItemDescription("A human readable description of the current state of the transaction.")
    public String getState() { return state; }
    
    @TableIndex(0)
    @ItemDescription("A simplified ID for the transaction generated on the file store server.")
    public int getSimpleId() { return simpleId; }
    
    @Override
    public String toString() {
        StringBuilder bldr = new StringBuilder(80);
        bldr.append("TransactionMonitoringInfo client ").append(client)
            .append(" xid \"").append(xid).append("\" simple id ")
            .append(simpleId).append(" xa ").append(isXa)
            .append(" start time ").append(startTime)
            .append(" auto rollback time ").append(autoRollbackTime)
            .append(" state ").append(state).append(".");
        return bldr.toString();
    }
    
}