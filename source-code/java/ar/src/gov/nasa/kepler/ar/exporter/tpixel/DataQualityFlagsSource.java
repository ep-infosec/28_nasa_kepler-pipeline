/*
 * Copyright 2017 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 * 
 * This file is available under the terms of the NASA Open Source Agreement
 * (NOSA). You should have received a copy of this agreement with the
 * Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
 * 
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
 * WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
 * INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
 * WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
 * INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
 * FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
 * TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
 * CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
 * OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
 * OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
 * FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
 * REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
 * AND DISTRIBUTES IT "AS IS."
 * 
 * Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
 * AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
 * SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
 * THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
 * EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
 * PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
 * SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
 * STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
 * PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
 * REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
 * TERMINATION OF THIS AGREEMENT.
 */

package gov.nasa.kepler.ar.exporter.tpixel;

import gov.nasa.kepler.ar.exporter.RollingBandFlags;
import gov.nasa.kepler.fs.api.FloatMjdTimeSeries;
import gov.nasa.kepler.fs.api.IntTimeSeries;
import gov.nasa.kepler.hibernate.dr.DataAnomaly;
import gov.nasa.kepler.mc.dr.MjdToCadence;
import gov.nasa.kepler.mc.dr.MjdToCadence.TimestampSeries;

import java.util.Collection;
import java.util.List;

/**
 * Data needed to compute the per cadence data quality flags.
 * 
 * @author Sean McCauliff
 *
 */
public interface DataQualityFlagsSource {

    /**
     * This should be the cadence for the first array element
     * of the generated quality field column.  
     * @return a non-negative integer less than or equal to endCadence
     */
    int startCadence();
    
    /**
     * This should be the cadence for the last array element
     * of the generated quality field column.  
     * @return a non-negative integer greater than or equal to startCadence
     */
    int endCadence();
    
    /**
     * 
     * @return non-null
     */
    List<DataAnomaly> anomalies();
    
    /**
     * This should be the cosmic rays in the optimal aperture.
     * @return This may not be null.
     */
    Collection<FloatMjdTimeSeries> cosmicRays();
    
    /**
     * These are the cosmic rays on the projection of the optimal aperture on
     * the collateral regions.
     * @return This may not be null.
     */
    Collection<FloatMjdTimeSeries> collateralCosmicRays();
    
    /**
     * Dynablack generated flags.
     * @return non-null
     */
    RollingBandFlags rollingBandFlags();
    
    MjdToCadence mjdToCadence();
    
    TimestampSeries timestampSeries();
    
    /**
     * This only matters for short cadence processing.
     * @return  This should return null when the underlying data
     * is short cadence.
     */
    TimestampSeries lcTimestampSeries();
    
    /**
     * These are the outliers generated by PDC.
     * @return  This may return null.
     */
    FloatMjdTimeSeries pdcOutliers();
    
    /**
     * These are the discontinuities generated by PDC.
     * @return  This may return null.
     */
    IntTimeSeries discontinuityTimeSeries();
    
    /**
     * This is the time series produced by PA that describes the mod/out 
     * argabrightening events.  Only the lack of gaps indicates brightening detected.
     * @return A non-null value.
     */
    IntTimeSeries paArgabrighteningTimeSeries();
    
    /**
     * This is a time series produced by PA.  If a cadence has been written to
     * then it indicates that a reaction wheel has crossed zero.
     * @return A non-null value.
     */
    
    IntTimeSeries reactionWheelZeroCrossings();
    
    /**
     * Thruster firing flags generated by PA.
     * @return null allowed
     */
    IntTimeSeries thrusterFire();
    
    /**
     * Thruster firing flags generated by PA.
     * @return null allowed
     */
    IntTimeSeries possibleThusterFire();

    boolean isLcForShortCadence();

    /**
     * 
     * @return this may return null if rolling band flags were not generated or
     * this does not have an optimal aperture.
     */
    RollingBandFlags optimalApertureRollingBandFlags();
    
}
