/*
 * Copyright 2017 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 * 
 * This file is available under the terms of the NASA Open Source Agreement
 * (NOSA). You should have received a copy of this agreement with the
 * Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
 * 
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
 * WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
 * INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
 * WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
 * INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
 * FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
 * TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
 * CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
 * OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
 * OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
 * FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
 * REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
 * AND DISTRIBUTES IT "AS IS."
 * 
 * Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
 * AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
 * SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
 * THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
 * EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
 * PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
 * SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
 * STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
 * PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
 * REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
 * TERMINATION OF THIS AGREEMENT.
 */

package gov.nasa.kepler.ar.exporter;

import java.util.Set;

import gov.nasa.kepler.hibernate.pa.CentroidPixel;
import gov.nasa.kepler.hibernate.pa.TargetAperture;
import gov.nasa.kepler.mc.Pixel;

/**
 * This creates the image in the aperture mask.
 * 
 * @author Sean McCauliff
 *
 */
public class ApertureMaskImageBuilder {
    
    public static final int PIXEL_WAS_COLLECTED =            1 << 0;
    public static final int PIXEL_IN_OPTIMAL_APERTURE =      1 << 1;
    public static final int PIXEL_USED_FOR_FLUX_CENTROID =   1 << 2;
    public static final int PIXEL_USED_FOR_PRF_CENTROID =    1 << 3;
    
    /**
     * @param pixels The set of pixels collected for an ObservedTarget.  This may 
     * not be null.
     * @param referenceRow The address of the lowest numbered CCD row in the image.
     * @param referenceCol The address of the lowest numbered CCD column in the
     * image.
     * @param nRows The number of rows in the image.
     * @param nColumns The number of columns in the image.
     * @param targetAperture The non-null target aperture generated by PA which
     * describes how pixels where used by PA to calculate centroids.
     * @return Array dimension one is the CCD row, array dimension two is the CCD
     * column.
     */
    public int[][] buildImage(Set<Pixel> pixels, int referenceRow, int referenceCol,
        int nColumns, int nRows, TargetAperture targetAperture) {
        
        int[][] apertureMaskImage = new int[nRows][nColumns];
        for (Pixel pixel : pixels) {
            int relativeRow = pixel.getRow() - referenceRow;
            int relativeCol = pixel.getColumn() - referenceCol;
            int flags = PIXEL_WAS_COLLECTED;
            if (pixel.isInOptimalAperture()) {
                flags = flags | PIXEL_IN_OPTIMAL_APERTURE;
            }
            apertureMaskImage[relativeRow][relativeCol] = flags;
        }
        
        if (targetAperture != null) {
	        for (CentroidPixel centroidPixel : targetAperture.getCentroidPixels()) {
	            int relativeRow = centroidPixel.getCcdRow() - referenceRow;
	            int relativeColumn = centroidPixel.getCcdColumn() - referenceCol;
	            apertureMaskImage[relativeRow][relativeColumn] |= flags(centroidPixel);
	        }
        }
        return apertureMaskImage;
    }
    
    private static int flags(CentroidPixel centroidPixel) {
        return 
        (centroidPixel.isInFluxWeightedCentroidAperture() ? 
            PIXEL_USED_FOR_FLUX_CENTROID : 0 )
            |
        (centroidPixel.isInPrfCentroidAperture() ? 
            PIXEL_USED_FOR_PRF_CENTROID : 0);
    }
    
}
