/*
 * Copyright 2017 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 * 
 * This file is available under the terms of the NASA Open Source Agreement
 * (NOSA). You should have received a copy of this agreement with the
 * Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
 * 
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
 * WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
 * INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
 * WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
 * INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
 * FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
 * TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
 * CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
 * OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
 * OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
 * FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
 * REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
 * AND DISTRIBUTES IT "AS IS."
 * 
 * Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
 * AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
 * SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
 * THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
 * EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
 * PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
 * SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
 * STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
 * PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
 * REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
 * TERMINATION OF THIS AGREEMENT.
 */

package gov.nasa.kepler.ar.exporter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import gnu.trove.TLongHashSet;
import gnu.trove.TLongIterator;
import gov.nasa.kepler.common.Cadence.CadenceType;
import gov.nasa.kepler.fs.api.TimeSeries;
import gov.nasa.kepler.hibernate.cm.TargetListSet;
import gov.nasa.kepler.hibernate.cm.TargetSelectionCrud;
import gov.nasa.kepler.hibernate.dbservice.DatabaseServiceFactory;
import gov.nasa.kepler.hibernate.mc.ObservingLogModel;
import gov.nasa.kepler.hibernate.pa.CentroidPixel;
import gov.nasa.kepler.hibernate.pa.PaCrud;
import gov.nasa.kepler.hibernate.pa.TargetAperture;
import gov.nasa.kepler.hibernate.pi.ModelMetadataRetrieverPipelineInstance;
import gov.nasa.kepler.hibernate.pi.PipelineTask;
import gov.nasa.kepler.hibernate.pi.PipelineTaskCrud;
import gov.nasa.kepler.hibernate.tad.Cyg16;
import gov.nasa.kepler.hibernate.tad.Offset;
import gov.nasa.kepler.hibernate.tad.TargetTable;
import gov.nasa.kepler.mc.Pixel;
import gov.nasa.kepler.mc.QuarterToParameterValueMap;
import gov.nasa.kepler.mc.pi.ModelOperationsFactory;
import gov.nasa.kepler.mc.tad.TadParameters;
import gov.nasa.kepler.pa.PaModuleParameters;
import gov.nasa.kepler.pi.models.ModelOperations;
import gov.nasa.spiffy.common.collect.Pair;

/**
 * This is a contraption needed to get the TargetApertures that are
 * generated by PA.  These apertures are associated with a TargetTable, but it's not the
 * target table that was exported and so there is no way to name this target table.
 * 
 * @see http://tinyurl.com/jjugywg
 * 
 * @author Sean McCauliff
 *
 */
public class TargetApertureFactory {

    private static final Log log = LogFactory.getLog(TargetApertureFactory.class);
    
    private final PaCrud paCrud = new PaCrud();
    private final PipelineTaskCrud pipelineTaskCrud = new PipelineTaskCrud();
    private final TargetSelectionCrud targetSelectionCrud = new TargetSelectionCrud();
    
    public long distinctOriginator(Collection<TimeSeries> paTimeSeries) {
        TLongHashSet distinctOriginators = new TLongHashSet();
        for (TimeSeries ts : paTimeSeries) {
            ts.uniqueOriginators(distinctOriginators);
        }
        if (distinctOriginators.isEmpty()) {
            throw new IllegalStateException("No originators.");
        }
        if (distinctOriginators.size() > 1) {
            TLongIterator it = distinctOriginators.iterator();
            throw new IllegalStateException("Distinct originator set contains " 
                + distinctOriginators.size() + 
                " instead of just one.  Has at least "
                + it.next() + " and " + it.next() + ".");
        }
        return distinctOriginators.iterator().next();
    }
    
    public List<TargetAperture> targetApertures(List<Integer> keplerIds, 
        long paPipelineTaskId, CadenceType cadenceType, int startCadence, int endCadence,
        TargetTable defaultTargetTable, int ccdModule, int ccdOutput) {
        
        PipelineTask paPipelineTask = pipelineTaskCrud.retrieve(paPipelineTaskId);
        log.info("Checking to see if PA pipeline task " + paPipelineTaskId + " was using PA-COA.");
        PaModuleParameters paParameters = paPipelineTask.getParameters(PaModuleParameters.class);
        List<TargetAperture> targetApertures = 
        (!paParameters.isPaCoaEnabled()) ? 
            targetAperturesFromDefaultTargetTable(defaultTargetTable, ccdModule, ccdOutput, keplerIds)
        :
            targetAperturesFromSupplementalTargetListSetTargetTable(paPipelineTask,
                cadenceType, startCadence, endCadence, ccdModule, ccdOutput, keplerIds);
        ;
        
        Cyg16 cyg16 = new Cyg16();
        for (TargetAperture targetAperture : targetApertures) {
        	if (cyg16.is16Cyg(targetAperture.getKeplerId())) {
        		// Evicting makes sure we don't modify the original aperture in the database.
        		DatabaseServiceFactory.getInstance().getSession().evict(targetAperture);
        		targetAperture.setCentroidPixels(
        				centroidPixelsFor16Cyg(targetAperture.getKeplerId(), targetAperture.getCentroidPixels()));
        	}
        }
        
        return targetApertures;
        
    }
    
    private List<CentroidPixel> centroidPixelsFor16Cyg(int keplerId, List<CentroidPixel> originalPixelList) {
       Map<Pixel, CentroidPixel> orignalPixels = new HashMap<Pixel, CentroidPixel>();
       
       Cyg16 cyg16 = new Cyg16();
       
       for (CentroidPixel centroidPx : originalPixelList) {
    	   orignalPixels.put(new Pixel(centroidPx.getCcdRow(), centroidPx.getCcdColumn()), centroidPx);
       }
       
       List<CentroidPixel> cyg16CentroidPixels = new ArrayList<CentroidPixel>();
       Pair<Integer, Integer> reference = cyg16.referencePixelFor(keplerId);
       List<Offset> cyg16Offsets = cyg16.apertureOffset(keplerId);
       for (Offset offset : cyg16Offsets) {
    	   int ccdRow = reference.left + offset.getRow();
    	   int ccdColumn = reference.right + offset.getColumn();
    	   Pixel pixel = new Pixel(ccdRow, ccdColumn);
		   CentroidPixel oldCentroidPixel = orignalPixels.get(pixel);
		   if (oldCentroidPixel == null) {
			   throw new IllegalStateException("Old centroid pixel does not exist for 16 Cyg.");
		   }
		   cyg16CentroidPixels.add(oldCentroidPixel);
       }
       return cyg16CentroidPixels;
    }
    
    private List<TargetAperture> targetAperturesFromDefaultTargetTable(TargetTable defaultTargetTable,
        int ccdModule, int ccdOutput, List<Integer> keplerIds) {
        
        log.info("Targets were not processed by PA-COA.  Getting targetTable from user"
            + " specified target table " + defaultTargetTable + ".");
        
        List<TargetAperture> targetApertures = paCrud.retrieveTargetApertures(defaultTargetTable, ccdModule, ccdOutput, keplerIds);
        log.info("Found " + targetApertures.size() + " using the default target table method.");
        return targetApertures;
    }
    
    private List<TargetAperture> targetAperturesFromSupplementalTargetListSetTargetTable(
        PipelineTask paPipelineTask, CadenceType cadenceType, int startCadence, int endCadence,
        int ccdModule, int ccdOutput, List<Integer> keplerIds) {
        
        log.info("Targets were processed by PA-COA. Getting targets from the "
            + "TargetListSet used by TAD and PA-COA.");
        TadParameters tadParameters = paPipelineTask.getParameters(TadParameters.class);
        List<String> quartersList = Arrays.asList(tadParameters.getQuarters().split(","));
        List<String> targetListSetNames = Arrays.asList(tadParameters.getTargetListSetName().split(","));
  
        QuarterToParameterValueMap quarterToObservingLog = quarterToObservingLog(paPipelineTask);
        
        String targetListSetName = quarterToObservingLog.getValue(quartersList, targetListSetNames, cadenceType, startCadence, endCadence).trim();
  
        log.info("Using target list set " + targetListSetName + " to get the target table PA used.");
        
        TargetListSet targetListSet = targetSelectionCrud.retrieveTargetListSet(targetListSetName);
   
        TargetTable targetTable = targetListSet.getTargetTable();
        
        List<TargetAperture> targetApertures = paCrud.retrieveTargetApertures(targetTable, ccdModule, ccdOutput, keplerIds);
        log.info("Found " + targetApertures.size() + " for " + keplerIds.size() +  " targets.");
        return targetApertures;
    }
    
    
    private QuarterToParameterValueMap quarterToObservingLog(PipelineTask paPipelineTask) {
        ModelOperations<ObservingLogModel> modelOperations = ModelOperationsFactory.getObservingLogInstance(
            new ModelMetadataRetrieverPipelineInstance(paPipelineTask.getPipelineInstance()));
        ObservingLogModel observingLogModel = modelOperations.retrieveModel();
        QuarterToParameterValueMap tadParameterValues = new QuarterToParameterValueMap(observingLogModel);
        
        return tadParameterValues;
    }
}
