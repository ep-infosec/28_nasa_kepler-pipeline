#
#Tue Oct 09 16:48:33 PDT 2012
# 
# Copyright 2017 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
# 
# This file is available under the terms of the NASA Open Source Agreement
# (NOSA). You should have received a copy of this agreement with the
# Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
# 
# No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
# WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
# INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
# WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
# INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
# FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
# TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
# CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
# OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
# OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
# FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
# REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
# AND DISTRIBUTES IT "AS IS."
#
# Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
# AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
# SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
# THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
# EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
# PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
# SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
# STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
# PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
# REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
# TERMINATION OF THIS AGREEMENT.
#
pi.worker.numTaskThreads=2
fc.importer.gain=path/to/model
fc.importer.rootdir=/path/to/rootdir
fc.importer.prf=path/to/model
pi.remote.taskfile.dir=/path/to/taskfiles
fc.importer.pointing=path/to/model
dr.filewatcher.sleepTimeSecs=10
pi.worker.xaEnabled=false
fc.spiceFilesDir=${kepler.dev.dir}/cache/spice
pi.remote.proxy.statefile.dir=/path/to/state
pi.worker.taskMetrics.Algorithm=pipeline.module.executeAlgorithm.matlab.controller.execTime
fc.spice.devMode=true
fs.driver.name=fstp
pi.remote.proxy.taskfile.dir=/path/to/taskfiles
fc.importer.roll-time=path/to/model
hibernate.use_sql_comments=false
dr.filewatcher.processing.root.dir=/path/to/processing
kepler.dev.dir=/path/to/dev
pi.remote.statefile.dir=/path/to/state
pi.worker.taskMetrics.MatIO=pipeline.module.executeAlgorithm.matlab.readWriteMatfilesTime
pi.remote.proxy.host=host
fc.importer.invalid-pixels=path/to/model
fs.data.dir=/path/to/filestore
fc.importer.two-d-black=path/to/model
pi.worker.moduleExe.libPath.mac_os_x=${pi.worker.moduleExe.mcrRoot}/runtime/maci64\:${pi.worker.moduleExe.mcrRoot}/bin/maci64\:${pi.worker.moduleExe.mcrRoot}/sys/os/maci64
hibernate.jdbc.batch_size=0
seedData.dir=${kepler.config.dir}/../seed-data
jms.url=failover\:tcp\://host\:port?wireFormat.maxInactivityDuration\=0
pi.metrics.reaper.checkIntervalMins=5
pi.worker.module.xmlDir=${kepler.config.dir}/../xml
pi.worker.moduleExe.workingDir=${kepler.dev.dir}/task-data
pi.worker.moduleExe.mcrRoot=/path/to/mcr
pi.remote.proxy.user=user
fc.importer.undershoot=path/to/model
hibernate.show_sql=false
fs.auto-rollback-seconds=86400
fc.importer.large-flat=path/to/model
pi.worker.moduleExe.saveMatFiles=true
hibernate.connection.username=username
hibernate.connection.driver_class=org.hsqldb.jdbcDriver
hibernate.connection.url=jdbc\:hsqldb\:hsql\://host\:port/db
services.statusReport.process.reportIntervalMillis=15000
pi.worker.binDir=${kepler.config.dir}/../bin
transactions.xa.timeout-seconds=259200
pi.worker.moduleExe.dataDir=${kepler.dev.dir}/task-data
matlab.log4j.config=${kepler.config.dir}/../etc/log4j.xml
hibernate.format_sql=true
services.statusReport.metrics.reportIntervalMillis=60000
fs.listen-port=port
matlab.log4j.initialize=true
fc.importer.read-noise=path/to/model
pi.worker.moduleExe.binDir=${kepler.config.dir}/../mbin
pi.worker.moduleExe.libPath=${pi.worker.moduleExe.mcrRoot}/runtime/glnxa64\:${pi.worker.moduleExe.mcrRoot}/sys/os/glnxa64\:${pi.worker.moduleExe.mcrRoot}/bin/glnxa64\:${pi.worker.moduleExe.mcrRoot}/sys/java/jre/glnxa64/jre/lib/amd64/server/\:${pi.worker.moduleExe.mcrRoot}/sys/java/jre/glnxa64/jre/lib/amd64/\:../mbin
hibernate.dialect=org.hibernate.dialect.HSQLDialect
pi.worker.taskMetrics.Commit=pipeline.module.commitTime
fc.importer.geometry=path/to/model
ksoc.gar.allowIncompleteExportSet=true
transactions.xa.object-store=${kepler.config.dir}/../transactionManagerObjectStore
pi.worker.taskLogDir=${kepler.dev.dir}/logs/tasks
hibernate.connection.password=password
fc.importer.small-flat=path/to/model
pi.worker.taskMetrics.categories=Filestore,Commit,Framework,Algorithm,MatIO
services.statusReport.workerThread.reportIntervalMillis=15000
pi.metrics.reaper.maxRows=10000
pi.worker.taskMetrics.Filestore=fs.client.
dr.filewatcher.incoming.dir=/path/to/incoming
fc.importer.linearity=path/to/model
pi.remote.dist.dir=/path/to/dist
fs.fstp=fstp://host:port
pi.worker.taskMetrics.Framework=pipeline.module.executeAlgorithm.java.serializationTime,pipeline.module.executeAlgorithm.matlab.serializationTime
