/*
 * Copyright 2017 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 * 
 * This file is available under the terms of the NASA Open Source Agreement
 * (NOSA). You should have received a copy of this agreement with the
 * Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
 * 
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
 * WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
 * INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
 * WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
 * INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
 * FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
 * TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
 * CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
 * OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
 * OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
 * FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
 * REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
 * AND DISTRIBUTES IT "AS IS."
 * 
 * Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
 * AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
 * SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
 * THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
 * EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
 * PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
 * SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
 * STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
 * PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
 * REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
 * TERMINATION OF THIS AGREEMENT.
 */

package gov.nasa.kepler.pi.module.io.matlab;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import org.apache.commons.io.FileUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * Generates the entry point function for compiled MATLAB modules.
 * The generated function X_init.m calls another generated function,
 * X_main.m, generated by {@link MatlabMain}
 * 
 * @author Todd Klaus todd.klaus@nasa.gov
 *
 */
public class MatlabInit {

    private static final Log log = LogFactory.getLog(MatlabInit.class);

    private String name;
    private String destDir;

    public MatlabInit(String name, String destDir) {
        this.name = name;
        this.destDir = destDir;
    }

    public void generate() throws IOException {
        String moduleName = name.toLowerCase();
        String functionName = moduleName + "_init";

        File file = new File(destDir, functionName + ".m");

        log.debug("Generating " + file);

        FileUtils.forceMkdir(new File(destDir));

        FileWriter fw = new FileWriter(file);
        BufferedWriter bw = new BufferedWriter(fw);
        PrintWriter pw = new PrintWriter(bw);

        String functionDeclaration = "function " + functionName
            + "(binaryFileDir, binaryFileId, saveMatFiles, exeName, isChild, userData)";

        pw.println(functionDeclaration);
        pw.println("%" + functionDeclaration);

        pw.println("%");
        pw.println("% This code was auto-generated by gov.nasa.kepler.pi.module.io.matlab.MatlabInit");
        pw.println("%");
        pw.println("% WARNING: DO NOT EDIT THIS FILE");
        pw.println("% Manual edits to this file will be overwritten.");

        pw.println();

        pw.println("if(nargin == 0)");
        pw.println("  disp('" + functionDeclaration
            + ": no args supplied, doing nothing (expand CTF only)');");
        pw.println("  return;");
        pw.println("end;");
        pw.println();

        pw.println("if(nargin(@" + functionName + ") ~= nargin)");
        pw.println("  error('Usage: " + functionDeclaration + "');");
        pw.println("end;");
        pw.println();

        pw.println("initialize_soc_variables({'caller','base'});");
        pw.println("disp([ 'socDistRoot: ' socDistRoot ]);");
        pw.println("disp([ 'socDataRoot: ' socDataRoot ]);");
        pw.println("disp([ 'socTestDataRoot: ' socTestDataRoot ]);");
        pw.println();
        pw.println("if(isdeployed && ~ismcc)");
        pw.println("  warning off backtrace;");
        pw.println("  initialize_soc_javapath(socDistRoot);");
        pw.println("  warning backtrace;");
        pw.println("end;");
        pw.println();

        pw.println(moduleName
            + "_main(binaryFileDir, binaryFileId, saveMatFiles, exeName, isChild, userData)");

        pw.println();
        pw.println("return;");
        pw.close();
    }
}
