/*
 * Copyright 2017 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 * 
 * This file is available under the terms of the NASA Open Source Agreement
 * (NOSA). You should have received a copy of this agreement with the
 * Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
 * 
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
 * WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
 * INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
 * WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
 * INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
 * FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
 * TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
 * CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
 * OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
 * OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
 * FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
 * REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
 * AND DISTRIBUTES IT "AS IS."
 * 
 * Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
 * AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
 * SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
 * THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
 * EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
 * PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
 * SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
 * STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
 * PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
 * REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
 * TERMINATION OF THIS AGREEMENT.
 */

package gov.nasa.kepler.pi.module.io.matlab;

import gov.nasa.kepler.hibernate.dbservice.MatlabJavaInitialization;
import gov.nasa.kepler.pi.module.MatlabPipelineModule;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import org.apache.commons.io.FileUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class MatlabMain {
    private static final Log log = LogFactory.getLog(MatlabMain.class);

    private String name;
    private String inputsClassName;
    private String outputsClassName;
    private String destDir;

    public MatlabMain(String name, String inputsClassName, String outputsClassName, String destDir) {
        this.name = name;
        this.inputsClassName = inputsClassName;
        this.outputsClassName = outputsClassName;
        this.destDir = destDir;
    }

    public void generate() throws IOException {
        String moduleName = name.toLowerCase();
        String functionName = moduleName + "_main";

        File file = new File(destDir, functionName + ".m");

        log.debug("Generating " + file);

        FileUtils.forceMkdir(new File(destDir));

        FileWriter fw = new FileWriter(file);
        BufferedWriter bw = new BufferedWriter(fw);
        PrintWriter pw = new PrintWriter(bw);

        String controllerName = name.toLowerCase() + "_matlab_controller";
        String functionDeclaration = "function " + functionName + 
        "(binaryFileDir, binaryFileId, saveMatFiles, exeName, isChild, userData)";
        String functionDeclarationNoArgs = "function " + functionName + "()";
        String algorithmCallCodeSingleArg = "outputsStruct = " + controllerName + "(inputsStruct)";
        String algorithmCallCodeVarArg = "outputsStruct = " + controllerName + "(inputsStruct, childCmdLine, controllerUserData)";

        pw.println(functionDeclaration);
        pw.println("%" + functionDeclaration);

        pw.println("%");
        pw.println("% This code was auto-generated by gov.nasa.kepler.pi.module.io.matlab.MatlabMain");
        pw.println("%");
        pw.println("% WARNING: DO NOT EDIT THIS FILE");
        pw.println("% Manual edits to this file will be overwritten.");
        pw.println();

        pw.println("childCmdLine = [exeName ' ' binaryFileDir ' ' binaryFileId ' ' saveMatFiles ' ' exeName ' 1 '];");
        pw.println("disp(['child process command line: ' childCmdLine]);");
        pw.println();
        
        pw.println("if(nargin == 0)");
        pw.println("  disp('" + functionDeclarationNoArgs + ": no args supplied, doing nothing (expand CTF only)');");
        pw.println("  return;");
        pw.println("end;");
        pw.println();
        
        pw.println("if(nargin < 4)");
        pw.println("  error('Usage: " + functionDeclaration + "');");
        pw.println("end;");
        pw.println();
        
        pw.println("if(nargin == 6)");
        pw.println("  if(strcmp(userData, '__init__'))");
        pw.println("    controllerUserData = [];");
        pw.println("  else");
        pw.println("    controllerUserData = userData;");
        pw.println("  end");
        pw.println("else");
        pw.println("  controllerUserData = [];");
        pw.println("end;");
        pw.println();
        
        pw.println("% Environment Variables:");
        pw.println(genPrintEnvCode("HOSTNAME"));
        pw.println(genPrintEnvCode("PWD"));
        pw.println(genPrintEnvCode("PATH"));
        pw.println(genPrintEnvCode("LANG"));
        pw.println(genPrintEnvCode("SOC_CODE_ROOT"));
        pw.println(genPrintEnvCode("DISPLAY"));
        pw.println(genPrintEnvCode("MATLABHOME"));
        pw.println(genPrintEnvCode("MCRROOT"));
        pw.println(genPrintEnvCode("LM_LICENSE_FILE"));
        pw.println(genPrintEnvCode("LD_LIBRARY_PATH"));
        pw.println(genPrintEnvCode("DYLD_LIBRARY_PATH"));
        pw.println("disp(['architecture = [' computer ']']);");
        pw.println();

        pw.println("import gov.nasa.spiffy.common.metrics.Metric;");
        pw.println("import gov.nasa.spiffy.common.metrics.IntervalMetric;");

        pw.println();
        pw.println("totalTime = clock;");

        pw.println("try");
        pw.println();
        
        Class<?> initializationClass = MatlabJavaInitialization.class;
        
        pw.println("  import " + initializationClass.getCanonicalName() + ";");
        pw.println("  " + initializationClass.getSimpleName() + ".initialize();");

        pw.println();
        pw.println("  if(isChild == '0')");
        pw.println("    inputFileName = [ binaryFileDir filesep '" + moduleName + "-inputs-' binaryFileId '.bin' ];");
        pw.println("    readTime = clock;");
        pw.println();
        pw.println("    if exist(inputFileName, 'file')");
        pw.println("      disp([ 'Reading inputs file: ' inputFileName ]);");
        pw.println();
        pw.println("      key = IntervalMetric.start;");
        pw.println("      inputsStruct = read_" + inputsClassName + "(inputFileName);");
        pw.println("      IntervalMetric.stop('"+ MatlabPipelineModule.MATLAB_SERIALIZATION_METRIC +"', key);");
        pw.println();
        pw.println("      if(saveMatFiles == '1')");
        pw.println("        inputMatFileName = [ binaryFileDir filesep '" + moduleName + "-inputs-' binaryFileId '.mat' ];");
        pw.println("        disp([ 'Saving inputs file as a .mat: ' inputMatFileName]);");
        pw.println();
        pw.println("        key = IntervalMetric.start;");
        pw.println("        intelligent_save(inputMatFileName, 'inputsStruct');");
        pw.println("        IntervalMetric.stop('"+ MatlabPipelineModule.MATLAB_MATFILE_METRIC +"', key);");
        pw.println("      end;");
        pw.println("    else");
        pw.println("      disp('No .bin file found, trying .mat');");
        pw.println("      inputFileName = [ binaryFileDir filesep '" + moduleName + "-inputs-' binaryFileId '.mat' ];");
        pw.println("      disp([ 'Reading inputs file: ' inputFileName ]);");
        pw.println("      inputsStruct = load(inputFileName);");
        pw.println("      inputsStruct = inputsStruct.inputsStruct;");
        pw.println("    end;");
        pw.println();
        pw.println("    fprintf(1, 'Done reading inputs file, elapsed time = %.2f seconds\\n', etime(clock, readTime));");
        pw.println("  else");
        pw.println("    disp('Child process, skipping inputs I/O');");
        pw.println("    inputsStruct = [];");
        pw.println("  end");
        pw.println();
        pw.println("  algTime = clock;");
        pw.println();
        pw.println("  key = IntervalMetric.start;");
        pw.println();
        
        pw.println("  if(nargin(@" + controllerName + ") < 0)");
        pw.println("    % controller supports varargs");
        pw.println("    disp('Invoking: " + algorithmCallCodeVarArg + "');");
        pw.println("    " + algorithmCallCodeVarArg + ";");
        pw.println("  else");
        pw.println("    disp('Invoking: " + algorithmCallCodeSingleArg + "');");
        pw.println("    " + algorithmCallCodeSingleArg + ";");
        pw.println("  end;");
        pw.println();        
        
        pw.println("  IntervalMetric.stop('"+ MatlabPipelineModule.MATLAB_CONTROLLER_EXEC_METRIC +"', key);");
        pw.println();
        pw.println("  fprintf(1, 'Done executing controller, elapsed time = %.2f seconds\\n', etime(clock, algTime));");
        pw.println();
        pw.println("  if(isChild == '0')");
        pw.println("    if(saveMatFiles == '1')");
        pw.println("      outputMatFileName = [ binaryFileDir filesep '" + moduleName + "-outputs-' binaryFileId '.mat' ];");
        pw.println("      disp([ 'Saving outputs file as a .mat: ' outputMatFileName]);");
        pw.println();
        pw.println("      key = IntervalMetric.start;");
        pw.println("      intelligent_save(outputMatFileName, 'outputsStruct');");
        pw.println("      IntervalMetric.stop('"+ MatlabPipelineModule.MATLAB_MATFILE_METRIC +"', key);");
        pw.println("    end;");
        pw.println();
        pw.println("    outputFileName = [ binaryFileDir filesep '" + moduleName + "-outputs-' binaryFileId '.bin' ];");
        pw.println("    disp([ 'Writing outputs file: ' outputFileName ]);");
        pw.println("    writeTime = clock;");
        pw.println();
        pw.println("    key = IntervalMetric.start;");
        pw.println("    write_" + outputsClassName + "(outputFileName, outputsStruct);");
        pw.println("    IntervalMetric.stop('"+ MatlabPipelineModule.MATLAB_SERIALIZATION_METRIC +"', key);");
        pw.println();
        pw.println("    fprintf(1, 'Done writing outputs file, elapsed time = %.2f seconds\\n', etime(clock, writeTime));");
        pw.println("  else");
        pw.println("    disp('Child process, skipping outputs I/O');");
        pw.println("  end");
        pw.println();

        pw.println("catch errorStruct");
        pw.println();

        pw.println("  disp([ 'Caught exception, message = ' errorStruct.message ]);");
        pw.println();
        pw.println("  errorFileName = [ binaryFileDir filesep '" + moduleName + "-error-' binaryFileId '.bin' ];");
        pw.println("  write_MatlabErrorReturn(errorFileName, errorStruct);");

        pw.println();
        pw.println("end;");

        pw.println();
        pw.println("metricsFileName = [ binaryFileDir filesep 'metrics-' binaryFileId '.ser' ];");
        pw.println("fprintf(1, 'Persisting metrics to %s\\n', metricsFileName);");
        pw.println("Metric.persist(metricsFileName);");
        pw.println();

        pw.println("fprintf(1, 'Done, total elapsed time = %.2f seconds\\n', etime(clock, totalTime));");

        pw.println();
        pw.println("% Close any remaining figure windows, including hidden ones, to squelch warnings");
        pw.println("close all hidden;");
        pw.println("clear classes;");

        pw.println();
        pw.println("return;");
        pw.close();
    }
    
    private String genPrintEnvCode(String envname){
        return("disp(['" + envname + " = [' getenv('"+ envname +"') +']']);");
    }
}
