/*
 * Copyright 2017 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 * 
 * This file is available under the terms of the NASA Open Source Agreement
 * (NOSA). You should have received a copy of this agreement with the
 * Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
 * 
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
 * WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
 * INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
 * WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
 * INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
 * FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
 * TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
 * CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
 * OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
 * OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
 * FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
 * REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
 * AND DISTRIBUTES IT "AS IS."
 * 
 * Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
 * AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
 * SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
 * THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
 * EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
 * PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
 * SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
 * STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
 * PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
 * REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
 * TERMINATION OF THIS AGREEMENT.
 */

package gov.nasa.kepler.pi.module.io.cpp;

import java.io.PrintWriter;
import java.io.StringWriter;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * This class common code used by the various C++ translation unit files (.h and
 * .cpp)
 * 
 * @author tklaus
 * 
 */
public class CppFile {
    /**
     * Logger for this class
     */
    private static final Log log = LogFactory.getLog(CppFile.class);
    protected static final String INSTREAM_VAR_NAME = "inputStream";
    protected static final String OUTSTREAM_VAR_NAME = "outputStream";
    
    protected String className = null;

    /**
     * 
     * @param name
     */
    public CppFile(String name) {
        className = name;
    }

    /**
     * Returns the equivelent c++ type name for the specified java type name
     * 
     * @param javaType
     * @return
     */
    protected String cppType(String javaType) {
        String cppType;
        if (javaType.equals("String")) {
            cppType = "std::string";
        } else if (javaType.equals("boolean")) {
            cppType = "bool";
        } else if (javaType.equals("byte")) {
            cppType = "char";
        } else if (javaType.equals("long")) {
            log.warn("long converted to int because in C++, long == int == 4 bytes");
            cppType = "int";
        } else {
            cppType = javaType;
        }
        return cppType;
    }

    /**
     * Returns the std::vector<> type name for the specified element type
     * 
     * @param level
     * @param cppType
     * @return
     */
    protected String vectorCppTypeName(int level, String cppType) {
        StringWriter sw = new StringWriter();
        PrintWriter writer = new PrintWriter(sw);

        for (int i = 0; i < level; i++) {
            writer.print("std::vector< ");
        }
        writer.print(cppType);
        for (int i = 0; i < level; i++) {
            writer.print(" >");
        }
        return sw.toString();
    }

    /**
     * Utility function that returns a String containing spaces representing the
     * specified number of tabs
     * 
     * @param indentLevel
     * @return
     */
    protected String tabs(int indentLevel) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < indentLevel; i++) {
            sb.append("    ");
        }
        return sb.toString();
    }

    /**
     * 
     * @param w
     */
    protected void printHeaderComment(PrintWriter w) {
        w.println("/*");
        w.println("* WARNING: DO NOT EDIT THIS FILE");
        w.println("* This code was auto-generated by gov.nasa.kepler.pi.module.io.CppProxyGenerator");
        w.println("* based on the corresponding Java class.  Manual edits to this file may break");
        w.println("* the serialization logic between the C++ and Java classes! (YHBW)");
        w.println("*/");
    }
}
