/*
 * Copyright 2017 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 * 
 * This file is available under the terms of the NASA Open Source Agreement
 * (NOSA). You should have received a copy of this agreement with the
 * Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
 * 
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
 * WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
 * INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
 * WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
 * INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
 * FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
 * TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
 * CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
 * OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
 * OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
 * FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
 * REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
 * AND DISTRIBUTES IT "AS IS."
 * 
 * Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
 * AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
 * SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
 * THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
 * EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
 * PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
 * SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
 * STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
 * PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
 * REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
 * TERMINATION OF THIS AGREEMENT.
 */

package gov.nasa.kepler.etem2;

import static gov.nasa.kepler.common.FitsConstants.*;
import static gov.nasa.kepler.etem2.FitsFfi2FitsLc.NUM_BYTES_PER_MODOUT;
import gov.nasa.kepler.common.FcConstants;
import gov.nasa.kepler.common.FitsConstants;

import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;

import nom.tam.fits.BasicHDU;
import nom.tam.fits.Fits;
import nom.tam.fits.Header;
import nom.tam.fits.ImageData;
import nom.tam.fits.ImageHDU;
import nom.tam.util.BufferedDataInputStream;
import nom.tam.util.BufferedFile;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;

/**
 * Generates DMC-style cadence FITS files from pixel data generated by ETEM
 * 
 * @author Todd Klaus tklaus@arc.nasa.gov
 * 
 */
public class Etem2FitsFfi {
    private static final Log log = LogFactory.getLog(Etem2FitsFfi.class);

    private String masterFfiFitsFilename;
    private String timestamp;
    private double startTime;
    private double endTime;
    private int integrationsPerShortCadence;
    private int shortCadencesPerLongCadence;
    private String mergedInputDir;
    private String fitsOutputDir;
    private String ffiType;

    private boolean bigEndian = true;

    /**
     * This ctor is used when processing all available cadences
     * 
     * @param masterFfiFitsFilename
     * @param timestamp
     * @param mergedInputDir
     * @param fitsOutputDir
     * @param ffiType
     */
    public Etem2FitsFfi(String masterFfiFitsFilename, String timestamp,
        double startTime, double endTime,
        int integrationsPerShortCadence,
        int shortCadencesPerLongCadence,
        String mergedInputDir, String fitsOutputDir, String ffiType) {
        this.masterFfiFitsFilename = masterFfiFitsFilename;
        this.timestamp = timestamp;
        this.startTime = startTime;
        this.endTime = endTime;
        this.mergedInputDir = mergedInputDir;
        this.fitsOutputDir = fitsOutputDir;
        this.ffiType = ffiType;
        this.integrationsPerShortCadence = integrationsPerShortCadence;
    	this.shortCadencesPerLongCadence = shortCadencesPerLongCadence;
    }

    /**
     * @param args
     * @throws IOException
     */
    public static void main(String[] args) throws Exception {
        Logger logger = Logger.getLogger(Etem2FitsFfi.class);
        logger.setLevel(Level.DEBUG);

        org.apache.log4j.BasicConfigurator.configure();

        Etem2FitsFfi etem2Fits = new Etem2FitsFfi(args[0], args[1],
            Double.parseDouble(args[2]), Double.parseDouble(args[3]),
            Integer.parseInt(args[4]), Integer.parseInt(args[5]), args[6], args[7], args[8]);

        etem2Fits.generateFits();
    }

    /**
     * @throws Exception
     */
    public void generateFits() throws Exception {

        if (System.getProperty("sun.cpu.endian")
            .equals("little")) {
            bigEndian = false;
        }

        Fits masterFfi = new Fits(masterFfiFitsFilename);

        BufferedFile out = new BufferedFile(fitsOutputDir + "/kplr" + timestamp
            + "_" + ffiType + ".fits", "rw");

        BasicHDU hdu = masterFfi.readHDU();

        Header primaryHeader = hdu.getHeader();
        primaryHeader.addValue(STARTIME_KW, startTime,
            "added by Etem2FitsFfi from params");
        primaryHeader.addValue(END_TIME_KW, endTime,
            "added by Etem2FitsFfi from params");

        primaryHeader.addValue(INTEGRATIONS_PER_SC_KW,
            integrationsPerShortCadence,
            "added by Etem2FitsFfi from config map");
        primaryHeader.addValue(SC_PER_LC_KW,
            shortCadencesPerLongCadence,
            "added by Etem2FitsFfi from config map");

        hdu.write(out); // write out primary HDU

        // int SIZE = 4847040;
        // byte[] modout = new byte[SIZE];
        byte[] modout = new byte[NUM_BYTES_PER_MODOUT];
        int hduCount = 0;

        for (int ccdModule : FcConstants.modulesList) {
            BufferedDataInputStream etemData = new BufferedDataInputStream(
                new DataInputStream(new FileInputStream(mergedInputDir
                    + "/mergedFfiData-" + ccdModule + ".dat")));
            for (int ccdOutput : FcConstants.outputsList) {
                hduCount++;
                hdu = masterFfi.readHDU();
                if (!(hdu instanceof ImageHDU)) {
                    etemData.close();
                    out.close();
                    throw new Exception("No ImageHDU at hduCount=" + hduCount);
                }
                Header hdr = hdu.getHeader();
                int module = hdr.getIntValue(MODULE_KW);
                int channel = hdr.getIntValue(CHANNEL_KW);
                if (hduCount != channel) {
                    throw new Exception("hduCount(" + hduCount
                        + ") != channel(" + channel + ")");
                }

                ImageData data = (ImageData) hdu.getData();
                log.debug("hduCount=" + hduCount + ", module=" + module
                    + ", channel=" + channel + ", datasize=" + data.getSize()
                    + ", rewriteable=" + hdu.rewriteable());

                int got = etemData.read(modout, 0, NUM_BYTES_PER_MODOUT);
                if ( got != NUM_BYTES_PER_MODOUT) {
                    log.error("hduCount=" + hduCount + ", module=" + module
                    + ", channel=" + channel + ", datasize=" + data.getSize()
                    + ", got=" + got + " bytes, expected=" + NUM_BYTES_PER_MODOUT);
                }
                int nNonZero = 0;
                for (int i = 0; i < NUM_BYTES_PER_MODOUT; i++) {
                    if (modout[i] != 0)
                        nNonZero++;
                }
                log.debug("nNonZero=" + nNonZero);
                ImageData newImage = new ImageData(modout);

                ImageHDU newHdu = new ImageHDU(hdr, newImage);
                newHdu.write(out);
                out.flush();
            }
            etemData.close();
        }

        out.close();

        log.info("DONE");
    }
}
