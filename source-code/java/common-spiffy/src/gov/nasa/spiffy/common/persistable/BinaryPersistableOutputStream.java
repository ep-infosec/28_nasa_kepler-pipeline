/*
 * Copyright 2017 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 * 
 * This file is available under the terms of the NASA Open Source Agreement
 * (NOSA). You should have received a copy of this agreement with the
 * Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
 * 
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
 * WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
 * INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
 * WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
 * INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
 * FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
 * TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
 * CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
 * OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
 * OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
 * FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
 * REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
 * AND DISTRIBUTES IT "AS IS."
 * 
 * Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
 * AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
 * SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
 * THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
 * EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
 * PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
 * SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
 * STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
 * PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
 * REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
 * TERMINATION OF THIS AGREEMENT.
 */

package gov.nasa.spiffy.common.persistable;

import java.io.DataOutput;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Stack;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * This class implements the primitive writeX() methods of
 * PersistableOutputStream using DataOutputStream. This binary format is also
 * written/read by the MATLAB code generated by MatlabProxyGenerator.
 * Endianness matches the platform where this code is run.
 * 
 * @author tklaus
 * 
 */
public class BinaryPersistableOutputStream extends PersistableOutputStream {
    private static final Log log = LogFactory.getLog(BinaryPersistableOutputStream.class);

    private DataOutput output = null;
    private boolean bigEndian = true;
    private Stack<Struct> currentPath = new Stack<Struct>();
    private BinaryPersistableFilter filter = null;
    private boolean filteringEnabled = false;
    
    /**
     * Used to track the nesting level as we serialize the object tree.
     * This information supports filtering (including only sub-ranges
     * of arrays of Persistable)
     */
    private class Struct{
        public String name;
        public boolean array = false;
        public int arrayLength = 0;
        public int currentArrayIndex = -1;
        
        public Struct(String name, boolean array, int arrayLength) {
            this.name = name;
            this.array = array;
            this.arrayLength = arrayLength;
        }        
    }
    
    public BinaryPersistableOutputStream(DataOutput output) {
        this(output, null);
    }
    
    public BinaryPersistableOutputStream(DataOutput output, BinaryPersistableFilter filter) {
        this.output = output;
        this.filter = filter;
        
        if (System.getProperty("sun.cpu.endian").equals("little")) {
            bigEndian = false;
        }
    }
    
    private void pushPath(String fieldName, boolean array, int arrayLength){
        if(fieldName != null){
            currentPath.push(new Struct(fieldName, array, arrayLength));
        }
    }
    
    private Struct popPath(){
        Struct r = null;
        if(!currentPath.isEmpty()){
            r = currentPath.pop();
        }
        return r;
    }
    
    /**
     * Toggle filtering on/off depending on the specified filter
     * and the current location in the object tree.
     * 
     * @param currentIndexUpdated
     * @return
     */
    private boolean updateFilterState(boolean currentIndexUpdated){
        boolean newFilterState = filteringEnabled;
        
        if(filter != null){
            if(!currentPath.isEmpty()){
                String currentPathString = pathString();
                
                if(filter.getPath().equals(currentPathString)){
                    Struct topOfStack = currentPath.peek();
                    int currentIndex = 0;
                    
                    if(currentIndexUpdated){
                        currentIndex = topOfStack.currentArrayIndex;
                    }else{
                        currentIndex = topOfStack.currentArrayIndex + 1;
                    }
                    if ((currentIndex >= filter.getStartIndex()
                        && currentIndex <= filter.getEndIndex())
                        || currentIndex >= topOfStack.arrayLength) {
                        newFilterState = false;
                    }else{
                        newFilterState = true;
                    }
                }
            }

            if(log.isDebugEnabled()){
                if(filteringEnabled != newFilterState){
                    if(newFilterState){
                        log.debug("FILTERING ENABLED");
                    }else{
                        log.debug("FILTERING DISABLED");
                    }
                }
            }
            filteringEnabled = newFilterState;
        }
        
        return newFilterState;
    }
    
    /**
     * Returns the current location in the object tree in the
     * form of a dot-separated sequence of field names. Used to
     * determine if the current location matches the path specified
     * in a filter.
     * 
     * @return
     */
    private String pathString(){
        StringBuffer sb = new StringBuffer();
        boolean first = true;
        
        for (Struct pathElement : currentPath) {
            if(!first){
                sb.append(".");
            }
            sb.append(pathElement.name);
            first = false;
        }
        
        return sb.toString();
    }
    
    @Override
    protected void beginNonPrimitiveArray(String fieldName, Class<?> clazz, int length) throws IOException {
        if (log.isDebugEnabled()) {
            log.debug("beginNonPrimitiveArray("+fieldName+")");
        }

        pushPath(fieldName, true, length);

        String currentPathString = pathString();
        int numFilteredIndexes = 0;
        
        if(filter != null && filter.getPath().equals(currentPathString)){
            numFilteredIndexes = filter.getEndIndex() - filter.getStartIndex() + 1;
            log.debug("numFilteredIndexes=" + numFilteredIndexes);
        }
        
        writeInt(fieldName, length - numFilteredIndexes);
    }
    
    @Override
    protected void beginClass(String fieldName, Class<?> clazz) throws IOException {
        log.debug("beginClass("+fieldName+")");

        if(currentPath.isEmpty()){
            pushPath(fieldName, false, 0);
        }else{
            Struct topOfStack = currentPath.peek();

            if(topOfStack.array){
                topOfStack.currentArrayIndex += 1;
                if (log.isDebugEnabled()) {
                    log.debug("path=" + pathString() + ", index=" + topOfStack.currentArrayIndex);
                }
            }

            // don't add it if the parent is an array with the same name
            if (!fieldName.equals(topOfStack.name) || !topOfStack.array) {
                pushPath(fieldName, false, 0);
            }
        }
        updateFilterState(true);        
    }

    @Override
    protected void endClass(String fieldName) throws IOException {
        if (log.isDebugEnabled()) {
            log.debug("endClass("+fieldName+")");
        }

        updateFilterState(false);        

        if(fieldName != null){
            if(!currentPath.isEmpty()){
                Struct topOfStack = currentPath.peek();
                // don't pop it if the parent is an array with the same name
                if (!fieldName.equals(topOfStack.name) || !topOfStack.array) {
                    popPath();
                }
            }
        }
    }

    @Override
    protected void endNonPrimitiveArray(String fieldName) throws IOException {
        if (log.isDebugEnabled()) {
            log.debug("endNonPrimitiveArray("+fieldName+")");
        }
        popPath();
    }

    @Override
    protected void saveEmpty(String fieldName) throws IOException {
        if(!filteringEnabled){
            writeInt(fieldName, 0);
        }
    }

    @Override
    protected void writeChar(String fieldName, char v) throws IOException {
        if(!filteringEnabled){
            output.writeByte(v);
        }
    }

    @Override
    protected void writeByte(String fieldName, byte v) throws IOException {
        if(!filteringEnabled){
            output.writeByte(v);
        }
    }

    @Override
    protected void writeShort(String fieldName, short v) throws IOException {
        if(!filteringEnabled){
            if (!bigEndian) {
                v = Short.reverseBytes(v);
            }
            output.writeShort(v);
        }
    }

    @Override
    protected void writeInt(String fieldName, int v) throws IOException {
        if(!filteringEnabled){
            if (!bigEndian) {
                v = Integer.reverseBytes(v);
            }
            output.writeInt(v);
        }
    }

    @Override
    protected void writeLong(String fieldName, long v) throws IOException {
        if(!filteringEnabled){
            if (!bigEndian) {
                v = Long.reverseBytes(v);
            }
            output.writeLong(v);
        }
    }

    @Override
    protected void writeFloat(String fieldName, float v) throws IOException {
        if(!filteringEnabled){
            int iv = Float.floatToIntBits(v);
            if (!bigEndian) {
                iv = Integer.reverseBytes(iv);
            }
            output.writeInt(iv);
        }
    }

    @Override
    protected void writeDouble(String fieldName, double v) throws IOException {
        if(!filteringEnabled){
            long iv = Double.doubleToLongBits(v);
            if (!bigEndian) {
                iv = Long.reverseBytes(iv);
            }
            output.writeLong(iv);
        }
    }

    @Override
    protected void writeString(String fieldName, String v) throws IOException {
        if(!filteringEnabled){
            if(v == null){
                saveEmpty(fieldName);
            }else{
                byte[] stringBytes = v.getBytes();
                writeInt(fieldName, stringBytes.length);
                output.write(stringBytes);
            }
        }
    }

    @Override
    protected void writeBoolean(String fieldName, boolean v) throws IOException {
        if(!filteringEnabled){
            output.writeBoolean(v);
        }
    }

    @Override
    protected void writeBooleanArray(String fieldName, boolean[] data) throws IOException {
        if(!filteringEnabled){
            final int length = data.length;
            writeInt(fieldName, length);
            for (int i=0; i < length; i++) {
                writeBoolean(fieldName, data[i]);
            }
        }
    }

    @Override
    protected void writeByteArray(String fieldName, byte[] data) throws IOException {
        if(!filteringEnabled){
            final int length = data.length;
            writeInt(fieldName, length);
            for (int i=0; i < length; i++) {
                writeByte(fieldName, data[i]);
            }        
        }
    }

    @Override
    protected void writeCharArray(String fieldName, char[] data) throws IOException {
        if(!filteringEnabled){
            final int length = data.length;
            writeInt(fieldName, length);
            for (int i=0; i < length; i++) {
                writeChar(fieldName, data[i]);
            }        
        }
    }

    @Override
    protected void writeDoubleArray(String fieldName, double[] data) throws IOException {
        if(!filteringEnabled){
            final int length = data.length;
            writeInt(fieldName, length);
            for (int i=0; i < length; i++) {
                writeDouble(fieldName, data[i]);
            }        
        }
    }

    @Override
    protected void writeFloatArray(String fieldName, float[] data) throws IOException {
        if(!filteringEnabled){
            final int length = data.length;
            writeInt(fieldName, length);
            for (int i=0; i < length; i++) {
                writeFloat(fieldName, data[i]);
            }
        }
    }

    @Override
    protected void writeIntArray(String fieldName, int[] data) throws IOException {
        if(!filteringEnabled){
            final int length = data.length;
            writeInt(fieldName, length);
            for (int i=0; i < length; i++) {
                writeInt(fieldName, data[i]);
            }        
        }
    }

    @Override
    protected void writeLongArray(String fieldName, long[] data) throws IOException {
        if(!filteringEnabled){
            final int length = data.length;
            writeInt(fieldName, length);
            for (int i=0; i < length; i++) {
                writeLong(fieldName, data[i]);
            }        
        }
    }

    @Override
    protected void writeShortArray(String fieldName, short[] data) throws IOException {
        if(!filteringEnabled){
            final int length = data.length;
            writeInt(fieldName, length);
            for (int i=0; i < length; i++) {
                writeShort(fieldName, data[i]);
            }        
        }
    }

    @Override
    protected void saveEmptyPrimitive(Class<?> clazz, String fieldName, String containingClassName) throws IOException {
        if(!filteringEnabled){
            throw new IOException("Unable to save null primitive object: " + containingClassName + "." + fieldName);
        }
    }

    @Override
    protected void writeDate(String fieldName, Date v) throws IOException {
        if(!filteringEnabled){
            SimpleDateFormat sdf = new SimpleDateFormat();
            String s = sdf.format(v);
            writeString(fieldName, s);
        }
    }

    @Override
    protected void writeEnum(String fieldName, Enum<?> v) throws IOException {
        if(!filteringEnabled){
            writeString(fieldName, v.toString());
        }
    }
}
