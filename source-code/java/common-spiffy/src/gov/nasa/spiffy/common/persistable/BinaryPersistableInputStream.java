/*
 * Copyright 2017 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 * 
 * This file is available under the terms of the NASA Open Source Agreement
 * (NOSA). You should have received a copy of this agreement with the
 * Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
 * 
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
 * WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
 * INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
 * WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
 * INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
 * FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
 * TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
 * CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
 * OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
 * OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
 * FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
 * REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
 * AND DISTRIBUTES IT "AS IS."
 * 
 * Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
 * AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
 * SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
 * THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
 * EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
 * PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
 * SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
 * STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
 * PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
 * REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
 * TERMINATION OF THIS AGREEMENT.
 */

package gov.nasa.spiffy.common.persistable;

import java.io.DataInput;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * This class implements the primitive readX() methods of PersistableInputStream
 * using DataInputStream This binary format is also written/read by the MATLAB code
 * generated by MatlabProxyGenerator.
 * 
 * Endianness matches the platform where this code is run.
 * 
 * @author tklaus
 * 
 */
public class BinaryPersistableInputStream extends PersistableInputStream {
    static final Log log = LogFactory.getLog(BinaryPersistableInputStream.class);

    private DataInput input = null;
    private boolean bigEndian = true;

    public BinaryPersistableInputStream(DataInput input) {
        this.input = input;
        if (System.getProperty("sun.cpu.endian").equals("little")) {
            bigEndian = false;
        }
    }
    
    @Override
    protected char readChar() throws IOException {
        char v = (char) input.readByte();

        return v;
    }

    @Override
    protected byte readByte() throws IOException {
        byte v = input.readByte();

        return v;
    }

    @Override
    protected short readShort() throws IOException {
        short v = input.readShort();
        if (!bigEndian) {
            v = Short.reverseBytes(v);
        }

        return v;
    }

    @Override
    protected int readInt() throws IOException {
        int v = input.readInt();
        if (!bigEndian) {
            v = Integer.reverseBytes(v);
        }

        return v;
    }

    @Override
    protected long readLong() throws IOException {
        long v = input.readLong();
        if (!bigEndian) {
            v = Long.reverseBytes(v);
        }
        return v;
    }

    @Override
    protected float readFloat() throws IOException {
        int v = input.readInt();
        if (!bigEndian) {
            v = Integer.reverseBytes(v);
        }
        float v2 = Float.intBitsToFloat(v);
        return v2;
    }

    @Override
    protected double readDouble() throws IOException {
        long v = input.readLong();
        if (!bigEndian) {
            v = Long.reverseBytes(v);
        }
        double v2 = Double.longBitsToDouble(v);
        return v2;
    }

    @Override
    protected String readString() throws IOException {
        int length = readInt();
        byte[] stringBytes = new byte[length];
        input.readFully(stringBytes);
        String v = new String(stringBytes);

        return v;
    }

    @Override
    protected boolean readBoolean() throws IOException {
        boolean v = input.readBoolean();

        return v;
    }

    @Override
    protected Date readDate() throws Exception {
        String s = readString();
        SimpleDateFormat sdf = new SimpleDateFormat();
        Date d = sdf.parse(s);
        
        return d;
    }

    @Override
    protected <T extends Enum<T>> T readEnum(Class<T> clazz) throws IOException {
        String s = readString();
        T e = Enum.valueOf(clazz, s);
        return e;
    }
}
