/*
 * Copyright 2017 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 * 
 * This file is available under the terms of the NASA Open Source Agreement
 * (NOSA). You should have received a copy of this agreement with the
 * Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
 * 
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
 * WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
 * INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
 * WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
 * INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
 * FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
 * TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
 * CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
 * OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
 * OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
 * FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
 * REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
 * AND DISTRIBUTES IT "AS IS."
 * 
 * Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
 * AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
 * SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
 * THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
 * EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
 * PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
 * SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
 * STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
 * PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
 * REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
 * TERMINATION OF THIS AGREEMENT.
 */

package gov.nasa.kepler.hibernate.tps;

import gov.nasa.kepler.common.pi.FluxTypeParameters.FluxType;
import gov.nasa.kepler.hibernate.pi.PipelineTask;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.DiscriminatorValue;
import javax.persistence.Entity;
import javax.persistence.OneToOne;

/**
 *  Single event for full TPS.
 *  
 * @author Sean McCauliff
 *
 */
@Entity
@DiscriminatorValue("F")
public class TpsDbResult extends AbstractTpsDbResult {

    @Column(name = "orbitalPeriodDays")
    private Double detectedOrbitalPeriodInDays;

    private Boolean isPlanetACandidate;

    private Float maxMultipleEventStatistic;
    private Float timeToFirstTransitInDays;
    private Double timeOfFirstTransitInMjd;

    private Float minSingleEventStatistic;
    
    private Float minMultipleEventStatistic;
    
    @Column(name="MLENS_FIRST_DAYS")
    private Float timeToFirstMicrolensInDays;
    
    @Column(name="MLENS_FIRST_MJD")
    private Double timeOfFirstMicrolensInMjd;
    
    @Column(name="MLENS_ORBIT_DAYS")
    private Float detectedMicrolensOrbitalPeriodInDays;
    
    private Float robustStatistic;
    
    @OneToOne(cascade=CascadeType.ALL, optional=true)
    private WeakSecondaryDb weakSecondary;
    
    private Float chiSquare1;
    private Float chiSquare2;
    
    private Integer chiSquareDof1;
    private Float chiSquareDof2;
    
    private Float maxSesInMes;
    
    private Float chiSquareGof;
    
    private Integer chiSquareGofDof;
    
    /** This is no longer generated by TPS, but we keep around
     * the old results for posterity.
     */
    private Float sesProbability; 
    
    /** This is no longer generated by TPS, but we keep around
     * the old results for posterity.
     */
    private Integer sesProbabilityDof;
    
    private Float thresholdForDesiredPfa;
    
    @SuppressWarnings("unused")
    private TpsDbResult() {
    }

    
    public TpsDbResult(int keplerId, float trialTransitPulseInHours,
        Float maxSingleEventStatistic, Float rmsCdpp, int startCadence,
        int endCadence, FluxType fluxType, PipelineTask originator,
        Double detectedOrbitalPeriodInDays,
        Boolean isPlanetACandidate, Float maxMultipleEventStatistic,
        Float timeToFirstTransitInDays, Double timeOfFirstTransitInMjd,
        Float minSingleEventStatistic,
        Float minMultipleEventStatistic,
        Float timeToFirstMicrolensInDays,
        Double timeOfFirstMicrolensInMjd,
        Float detectedMicrolensOrbitalPeriodInDays,
        Boolean isShortPeriodEclipsingBinary,
        Float robustStatistic, WeakSecondaryDb weakSecondary,
        Float chiSquare1, Float chiSquare2,
        Integer chiSquareDof1, Float chiSquareDof2,
        Float maxSesInMes,
        Float chiSquareGof,
        Integer chiSquareGofDof,
        Float thresholdForDesiredPfa) {
        
        super(keplerId, trialTransitPulseInHours, maxSingleEventStatistic,
            rmsCdpp, startCadence, endCadence, fluxType, originator,
            isShortPeriodEclipsingBinary);
        
        this.detectedOrbitalPeriodInDays = detectedOrbitalPeriodInDays;
        this.isPlanetACandidate = isPlanetACandidate;
        this.maxMultipleEventStatistic = maxMultipleEventStatistic;
        this.timeToFirstTransitInDays = timeToFirstTransitInDays;
        this.timeOfFirstTransitInMjd = timeOfFirstTransitInMjd;
        this.minMultipleEventStatistic = minMultipleEventStatistic;
        this.timeToFirstMicrolensInDays = timeToFirstMicrolensInDays;
        this.timeOfFirstMicrolensInMjd = timeOfFirstMicrolensInMjd;
        this.detectedMicrolensOrbitalPeriodInDays = detectedMicrolensOrbitalPeriodInDays;
        this.minSingleEventStatistic = minSingleEventStatistic;
        this.robustStatistic = robustStatistic;
        this.weakSecondary = weakSecondary;
        this.chiSquare1 = chiSquare1;
        this.chiSquare2 = chiSquare2;
        this.chiSquareDof1 = chiSquareDof1;
        this.chiSquareDof2 = chiSquareDof2;
        this.maxSesInMes = maxSesInMes;
        this.chiSquareGof = chiSquareGof;
        this.chiSquareGofDof = chiSquareGofDof;
        this.sesProbability = null;
        this.sesProbabilityDof =  null;
        this.thresholdForDesiredPfa = thresholdForDesiredPfa;
    }

    /**
     * 
     * @return this may return null.
     */
    public Double getDetectedOrbitalPeriodInDays() {
        return detectedOrbitalPeriodInDays;
    }

    /**
     * 
     * @return this may return null.
     */
    public Boolean isPlanetACandidate() {
        return isPlanetACandidate;
    }

    /**
     * 
     * @return this may return null.
     */
    public Float getMaxMultipleEventStatistic() {
        return maxMultipleEventStatistic;
    }

    /**
     * 
     * @return this may return null.
     */
    public Float getTimeToFirstTransitInDays() {
        return timeToFirstTransitInDays;
    }
    /**
     * 
     * @return this may return null.
     */
    public Double timeOfFirstTransitInMjd() {
        return timeOfFirstTransitInMjd;
    }
    
    /**
     * 
     * @return this may return null.
     */
    public Float getTimeToFirstMicrolensInDays() {
        return timeToFirstMicrolensInDays;
    }

    /**
     * 
     * @return this may return null.
     */
    public Double getTimeOfFirstMicrolensInMjd() {
        return timeOfFirstMicrolensInMjd;
    }

    /**
     * 
     * @return this may return null.
     */
    public Float getDetectedMicrolensOrbitalPeriodInDays() {
        return detectedMicrolensOrbitalPeriodInDays;
    }
    /**
     * 
     * @return this may return null.
     */
    public Float getMinMultipleEventStatistic() {
        return minMultipleEventStatistic;
    }
    /**
     * 
     * @return this may return null.
     */
    public Float getMinSingleEventStatistic() {
        return minSingleEventStatistic;
    }

    /**
     * 
     * @return this may return null.
     */
    public Float getRobustStatistic() {
        return robustStatistic;
    }

    /**
     * 
     * @return this may return null.
     */
    public WeakSecondaryDb getWeakSecondary() {
        return weakSecondary;
    }


    public Float getChiSquare1() {
        return chiSquare1;
    }


    public Float getChiSquare2() {
        return chiSquare2;
    }


    public Integer getChiSquareDof1() {
        return chiSquareDof1;
    }


    public Float getChiSquareDof2() {
        return chiSquareDof2;
    }

    public Float getMaxSesInMes() {
        return maxSesInMes;
    }


    public Float getChiSquareGof() {
        return chiSquareGof;
    }


    public void setChiSquareGof(Float chiSquareGof) {
        this.chiSquareGof = chiSquareGof;
    }


    public Integer getChiSquareGofDof() {
        return chiSquareGofDof;
    }


    public void setChiSquareGofDof(Integer chiSquareGofDof) {
        this.chiSquareGofDof = chiSquareGofDof;
    }


    public Float getSesProbability() {
        return sesProbability;
    }


    public Integer getSesProbabilityDof() {
        return sesProbabilityDof;
    }


    
    public Float getThresholdForDesiredPfa() {
        return thresholdForDesiredPfa;
    }


    public void setThresholdForDesiredPfa(Float thresholdForDesiredPfa) {
        this.thresholdForDesiredPfa = thresholdForDesiredPfa;
    }


    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result
                + ((chiSquare1 == null) ? 0 : chiSquare1.hashCode());
        result = prime * result
                + ((chiSquare2 == null) ? 0 : chiSquare2.hashCode());
        result = prime * result
                + ((chiSquareDof1 == null) ? 0 : chiSquareDof1.hashCode());
        result = prime * result
                + ((chiSquareDof2 == null) ? 0 : chiSquareDof2.hashCode());
        result = prime * result
                + ((chiSquareGof == null) ? 0 : chiSquareGof.hashCode());
        result = prime * result
                + ((chiSquareGofDof == null) ? 0 : chiSquareGofDof.hashCode());
        result = prime
                * result
                + ((detectedMicrolensOrbitalPeriodInDays == null) ? 0
                        : detectedMicrolensOrbitalPeriodInDays.hashCode());
        result = prime
                * result
                + ((detectedOrbitalPeriodInDays == null) ? 0
                        : detectedOrbitalPeriodInDays.hashCode());
        result = prime
                * result
                + ((isPlanetACandidate == null) ? 0 : isPlanetACandidate
                        .hashCode());
        result = prime
                * result
                + ((maxMultipleEventStatistic == null) ? 0
                        : maxMultipleEventStatistic.hashCode());
        result = prime * result
                + ((maxSesInMes == null) ? 0 : maxSesInMes.hashCode());
        result = prime
                * result
                + ((minMultipleEventStatistic == null) ? 0
                        : minMultipleEventStatistic.hashCode());
        result = prime
                * result
                + ((minSingleEventStatistic == null) ? 0
                        : minSingleEventStatistic.hashCode());
        result = prime * result
                + ((robustStatistic == null) ? 0 : robustStatistic.hashCode());
        result = prime * result
                + ((sesProbability == null) ? 0 : sesProbability.hashCode());
        result = prime
                * result
                + ((sesProbabilityDof == null) ? 0 : sesProbabilityDof
                        .hashCode());
        result = prime
                * result
                + ((thresholdForDesiredPfa == null) ? 0
                        : thresholdForDesiredPfa.hashCode());
        result = prime
                * result
                + ((timeOfFirstMicrolensInMjd == null) ? 0
                        : timeOfFirstMicrolensInMjd.hashCode());
        result = prime
                * result
                + ((timeOfFirstTransitInMjd == null) ? 0
                        : timeOfFirstTransitInMjd.hashCode());
        result = prime
                * result
                + ((timeToFirstMicrolensInDays == null) ? 0
                        : timeToFirstMicrolensInDays.hashCode());
        result = prime
                * result
                + ((timeToFirstTransitInDays == null) ? 0
                        : timeToFirstTransitInDays.hashCode());
        result = prime * result
                + ((weakSecondary == null) ? 0 : weakSecondary.hashCode());
        return result;
    }


    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (!super.equals(obj))
            return false;
        if (getClass() != obj.getClass())
            return false;
        TpsDbResult other = (TpsDbResult) obj;
        if (chiSquare1 == null) {
            if (other.chiSquare1 != null)
                return false;
        } else if (!chiSquare1.equals(other.chiSquare1))
            return false;
        if (chiSquare2 == null) {
            if (other.chiSquare2 != null)
                return false;
        } else if (!chiSquare2.equals(other.chiSquare2))
            return false;
        if (chiSquareDof1 == null) {
            if (other.chiSquareDof1 != null)
                return false;
        } else if (!chiSquareDof1.equals(other.chiSquareDof1))
            return false;
        if (chiSquareDof2 == null) {
            if (other.chiSquareDof2 != null)
                return false;
        } else if (!chiSquareDof2.equals(other.chiSquareDof2))
            return false;
        if (chiSquareGof == null) {
            if (other.chiSquareGof != null)
                return false;
        } else if (!chiSquareGof.equals(other.chiSquareGof))
            return false;
        if (chiSquareGofDof == null) {
            if (other.chiSquareGofDof != null)
                return false;
        } else if (!chiSquareGofDof.equals(other.chiSquareGofDof))
            return false;
        if (detectedMicrolensOrbitalPeriodInDays == null) {
            if (other.detectedMicrolensOrbitalPeriodInDays != null)
                return false;
        } else if (!detectedMicrolensOrbitalPeriodInDays
                .equals(other.detectedMicrolensOrbitalPeriodInDays))
            return false;
        if (detectedOrbitalPeriodInDays == null) {
            if (other.detectedOrbitalPeriodInDays != null)
                return false;
        } else if (!detectedOrbitalPeriodInDays
                .equals(other.detectedOrbitalPeriodInDays))
            return false;
        if (isPlanetACandidate == null) {
            if (other.isPlanetACandidate != null)
                return false;
        } else if (!isPlanetACandidate.equals(other.isPlanetACandidate))
            return false;
        if (maxMultipleEventStatistic == null) {
            if (other.maxMultipleEventStatistic != null)
                return false;
        } else if (!maxMultipleEventStatistic
                .equals(other.maxMultipleEventStatistic))
            return false;
        if (maxSesInMes == null) {
            if (other.maxSesInMes != null)
                return false;
        } else if (!maxSesInMes.equals(other.maxSesInMes))
            return false;
        if (minMultipleEventStatistic == null) {
            if (other.minMultipleEventStatistic != null)
                return false;
        } else if (!minMultipleEventStatistic
                .equals(other.minMultipleEventStatistic))
            return false;
        if (minSingleEventStatistic == null) {
            if (other.minSingleEventStatistic != null)
                return false;
        } else if (!minSingleEventStatistic
                .equals(other.minSingleEventStatistic))
            return false;
        if (robustStatistic == null) {
            if (other.robustStatistic != null)
                return false;
        } else if (!robustStatistic.equals(other.robustStatistic))
            return false;
        if (sesProbability == null) {
            if (other.sesProbability != null)
                return false;
        } else if (!sesProbability.equals(other.sesProbability))
            return false;
        if (sesProbabilityDof == null) {
            if (other.sesProbabilityDof != null)
                return false;
        } else if (!sesProbabilityDof.equals(other.sesProbabilityDof))
            return false;
        if (thresholdForDesiredPfa == null) {
            if (other.thresholdForDesiredPfa != null)
                return false;
        } else if (!thresholdForDesiredPfa.equals(other.thresholdForDesiredPfa))
            return false;
        if (timeOfFirstMicrolensInMjd == null) {
            if (other.timeOfFirstMicrolensInMjd != null)
                return false;
        } else if (!timeOfFirstMicrolensInMjd
                .equals(other.timeOfFirstMicrolensInMjd))
            return false;
        if (timeOfFirstTransitInMjd == null) {
            if (other.timeOfFirstTransitInMjd != null)
                return false;
        } else if (!timeOfFirstTransitInMjd
                .equals(other.timeOfFirstTransitInMjd))
            return false;
        if (timeToFirstMicrolensInDays == null) {
            if (other.timeToFirstMicrolensInDays != null)
                return false;
        } else if (!timeToFirstMicrolensInDays
                .equals(other.timeToFirstMicrolensInDays))
            return false;
        if (timeToFirstTransitInDays == null) {
            if (other.timeToFirstTransitInDays != null)
                return false;
        } else if (!timeToFirstTransitInDays
                .equals(other.timeToFirstTransitInDays))
            return false;
        if (weakSecondary == null) {
            if (other.weakSecondary != null)
                return false;
        } else if (!weakSecondary.equals(other.weakSecondary))
            return false;
        return true;
    }


    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append("TpsDbResult [detectedOrbitalPeriodInDays=");
        builder.append(detectedOrbitalPeriodInDays);
        builder.append(", isPlanetACandidate=");
        builder.append(isPlanetACandidate);
        builder.append(", maxMultipleEventStatistic=");
        builder.append(maxMultipleEventStatistic);
        builder.append(", timeToFirstTransitInDays=");
        builder.append(timeToFirstTransitInDays);
        builder.append(", timeOfFirstTransitInMjd=");
        builder.append(timeOfFirstTransitInMjd);
        builder.append(", minSingleEventStatistic=");
        builder.append(minSingleEventStatistic);
        builder.append(", minMultipleEventStatistic=");
        builder.append(minMultipleEventStatistic);
        builder.append(", timeToFirstMicrolensInDays=");
        builder.append(timeToFirstMicrolensInDays);
        builder.append(", timeOfFirstMicrolensInMjd=");
        builder.append(timeOfFirstMicrolensInMjd);
        builder.append(", detectedMicrolensOrbitalPeriodInDays=");
        builder.append(detectedMicrolensOrbitalPeriodInDays);
        builder.append(", robustStatistic=");
        builder.append(robustStatistic);
        builder.append(", weakSecondary=");
        builder.append(weakSecondary);
        builder.append(", chiSquare1=");
        builder.append(chiSquare1);
        builder.append(", chiSquare2=");
        builder.append(chiSquare2);
        builder.append(", chiSquareDof1=");
        builder.append(chiSquareDof1);
        builder.append(", chiSquareDof2=");
        builder.append(chiSquareDof2);
        builder.append(", maxSesInMes=");
        builder.append(maxSesInMes);
        builder.append(", chiSquareGof=");
        builder.append(chiSquareGof);
        builder.append(", chiSquareGofDof=");
        builder.append(chiSquareGofDof);
        builder.append(", sesProbability=");
        builder.append(sesProbability);
        builder.append(", sesProbabilityDof=");
        builder.append(sesProbabilityDof);
        builder.append(", thresholdForDesiredPfa=");
        builder.append(thresholdForDesiredPfa);
        builder.append("]");
        return builder.toString();
    }

}
