/*
 * Copyright 2017 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 * 
 * This file is available under the terms of the NASA Open Source Agreement
 * (NOSA). You should have received a copy of this agreement with the
 * Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
 * 
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
 * WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
 * INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
 * WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
 * INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
 * FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
 * TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
 * CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
 * OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
 * OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
 * FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
 * REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
 * AND DISTRIBUTES IT "AS IS."
 * 
 * Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
 * AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
 * SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
 * THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
 * EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
 * PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
 * SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
 * STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
 * PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
 * REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
 * TERMINATION OF THIS AGREEMENT.
 */

package gov.nasa.kepler.hibernate.dbservice;

import gov.nasa.kepler.common.DefaultProperties;
import gov.nasa.spiffy.common.pi.PipelineException;

import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * This class initializes the database schema using the scripts generated by
 * {@link KeplerSchemaExport}
 * 
 * @author Todd Klaus tklaus@arc.nasa.gov
 * @author Forrest Girouard
 */
public abstract class ScriptedDdlInitializer {

    private static final String DDLINIT = "ddlinit";
    private static final String INITDB = "initdb";
    private static final String CLEANDB = "cleandb";
    private static final String ROWS = "rows";
    private static final String TABLE_COUNT = "table-count";
    private static final String TABLE_NAMES = "table-names";
    private static final String EXISTS = "exists";

    private static final String INSERT_INIT_TABLE_SQL = "insert into %s values('This database schema was automatically created on %s.')";
    private static final String DDL_INIT_USERNAME_PROP_NAME = "ddl.init.username";
    static final String INIT_TABLE_NAME = "DDL_INITIALIZER_CREATED";
    static final String SELECT_COUNT_SQL = "select count(*) from %s";
    static final String DROP_TABLE_SQL = "drop table %s";

    private static final Log log = LogFactory.getLog(ScriptedDdlInitializer.class);

    private String createScript;
    private String dropScript;

    protected final SqlRunner sqlRunner;
    protected String username;

    public abstract boolean tableExists(String tableName) throws SQLException;

    public abstract void createInitTable() throws SQLException;

    public abstract long tableCount() throws SQLException;

    public abstract List<String> tableNames() throws SQLException;

    public abstract List<String> tableNames(boolean logErrors)
        throws SQLException;

    public ScriptedDdlInitializer(String scriptPrefix, String url,
        String driverName, String username, String password) {

        if (scriptPrefix == null) {
            throw new NullPointerException("scriptPrefix can't be null");
        }
        if (url == null) {
            throw new NullPointerException("url can't be null");
        }
        if (driverName == null) {
            throw new NullPointerException("driverName can't be null");
        }

        sqlRunner = new SqlRunner(new ConnectInfo(driverName, url, username,
            password));
        this.username = username;
        createScript = "ddl." + scriptPrefix + "-create.sql";
        dropScript = "ddl." + scriptPrefix + "-drop.sql";
    }

    protected void executeScript(String scriptName, boolean continueOnError) {

        if (scriptName == null) {
            throw new NullPointerException("scriptName can't be null");
        }

        String path = null;
        try {
            if (scriptName.contains("ddl.oracle-drop.sql")) {
                // Use the overridden username, or the system username by
                // default.
                String username = ConfigurationServiceFactory.getInstance()
                    .getString(DDL_INIT_USERNAME_PROP_NAME,
                        System.getProperty("user.name"));

                path = DefaultProperties.getUnitTestDataDir("hibernate")
                    + "/schema/" + username + "/" + scriptName;
            } else {
                path = DefaultProperties.getTestSchemaDir() + "/" + scriptName;
            }

            log.info("scriptName: " + path);
            sqlRunner.executeSql(new File(path), continueOnError);
            sqlRunner.getCachedConnection()
                .commit();

        } catch (SQLException sqle) {
            log.error("failed to execute: " + path, sqle);
            throw new PipelineException(sqle.getMessage(), sqle);
        }
    }

    public synchronized void initDB() {

        try {
            sqlRunner.connect();

            long tableCount = tableCount();
            if (tableCount > 0) {
                try {
                    // Try to run the drop script (ignoring errors), just in
                    // case someone didn't clean up after themselves...
                    log.info("trying clean script: " + dropScript);
                    cleanDB(false);
                } catch (Throwable t) {
                    log.warn(t.getMessage(), t);
                }
                tableCount = tableCount();
                if (tableCount > 0) {
                    log.warn("Failed to clean database");
                }
            }

            if (tableCount <= 1) {
                log.info("executing create script: " + createScript);
                executeScript(createScript, false);

                // Last table to be created by create script
                if (!tableExists("TPS_WEAK_SECONDARY")) {
                    throw new SQLException(
                        "Database was created, but not initialized.");
                }

                if (!tableExists(INIT_TABLE_NAME)) {
                    createInitTable();
                }

                if (tableExists(INIT_TABLE_NAME)) {
                    updateInitTable();
                }
            } else {
                log.error("Failed to create database");
            }
        } catch (SQLException sqle) {
            throw new PipelineException(sqle.getMessage(), sqle);
        }
    }

    public void cleanDB() {

        if (sqlRunner.getCachedConnection() == null) {
            sqlRunner.connect();
            ;
        }
        cleanDB(true);
    }

    /**
     * Make best effort to run drop script (errors are ignored)
     * 
     */
    private void cleanDB(boolean logErrors) {

        if (sqlRunner.getCachedConnection() == null) {
            return;
        }

        long rowCount = -1;
        long tableCount = -1;
        try {
            rowCount = rowCount(logErrors);
            if (rowCount == 0) {
                log.info("No rows in any tables!");
            } else {
                log.warn("Database contains data.");
            }

            tableCount = tableCount();
            if (tableCount > 0) {
                boolean initTableExists = tableExists(INIT_TABLE_NAME);

                if (!initTableExists) {
                    throw new PipelineException(
                        "Database was not created by DDLInitalizer."
                            + " Refusing to clean a potential live database.");
                }
            } else {
                log.info("Database contains no tables!");
            }
        } catch (SQLException sqle) {
            throw new PipelineException(
                "Database may not have been created by DDLInitalizer.", sqle);
        }

        if (tableCount > 0) {
            try {
                log.info("executing clean script: " + dropScript);
                executeScript(dropScript, true);

            } catch (Exception e) {
                throw new PipelineException("clean script failed: ", e);
            }
        }
    }

    public void createInitTable(String sqlString) throws SQLException {

        if (sqlRunner.getCachedConnection() == null) {
            sqlRunner.connect();
        }

        Statement stmt = null;
        try {
            log.debug("executing SQL: " + sqlString);
            stmt = sqlRunner.getCachedConnection()
                .createStatement();
            stmt.executeUpdate(sqlString);
        } catch (Throwable ignore) {
            log.debug(String.format("create %s table failed", INIT_TABLE_NAME),
                ignore);
        } finally {
            stmt.getConnection()
                .commit();
            close(stmt);
        }
    }

    public void updateInitTable() throws PipelineException {

        try {

            updateInitTable(String.format(INSERT_INIT_TABLE_SQL,
                INIT_TABLE_NAME, new Date()));
        } catch (SQLException sqle) {
            throw new PipelineException(sqle);
        }
    }

    public void updateInitTable(String sqlString) throws SQLException {

        if (sqlRunner.getCachedConnection() == null) {
            sqlRunner.connect();
        }

        Statement stmt = null;
        try {
            log.debug("executing SQL: " + sqlString);
            stmt = sqlRunner.getCachedConnection()
                .createStatement();
            stmt.executeUpdate(sqlString);
        } catch (Throwable ignore) {
            log.debug(
                String.format("insert into %s table failed", INIT_TABLE_NAME),
                ignore);
        } finally {
            stmt.getConnection()
                .commit();
            close(stmt);
        }
    }

    public boolean tableExists(String sqlString, String tableName) {

        if (sqlString == null) {
            throw new NullPointerException("sqlString can't be null");
        }
        if (tableName == null) {
            throw new NullPointerException("tableName can't be null");
        }

        if (sqlRunner.getCachedConnection() == null) {
            sqlRunner.connect();
        }

        Statement stmt = null;
        ResultSet rs = null;
        int count = -1;
        try {
            log.debug("executing SQL: " + sqlString);
            stmt = sqlRunner.getCachedConnection()
                .createStatement();
            rs = stmt.executeQuery(sqlString);
            if (rs.next()) {
                log.debug(String.format("%s => %d", rs.getStatement()
                    .toString(), rs.getLong(1)));
                count = rs.getInt(1);
            } else {
                log.warn(String.format(
                    "cannot determine if the '%s' table exists in the database!",
                    tableName));
            }
        } catch (SQLException sqle) {
            log.warn(String.format(
                "cannot determine if the '%s' table exists in the database: ",
                tableName), sqle);
        } finally {
            close(rs);
            close(stmt);
        }

        return count == 1;
    }

    public long tableCount(String sqlString) {

        if (sqlString == null) {
            throw new NullPointerException("sqlString can't be null");
        }

        if (sqlRunner.getCachedConnection() == null) {
            sqlRunner.connect();
        }

        int tableCount = -1;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            log.debug("executing SQL: " + sqlString);
            stmt = sqlRunner.getCachedConnection()
                .createStatement();
            rs = stmt.executeQuery(sqlString);
            if (rs.next()) {
                log.debug(String.format("%s => %d", rs.getStatement()
                    .toString(), rs.getLong(1)));
                tableCount = rs.getInt(1);
            } else {
                log.warn("cannot determine the number of tables in the database!");
            }
        } catch (Throwable t) {
            log.warn("cannot determine the number of tables in the database: ",
                t);
        } finally {
            close(rs);
            close(stmt);
        }

        return tableCount;
    }

    public List<String> tableNames(String sqlString, boolean logErrors)
        throws SQLException {

        if (sqlString == null) {
            throw new NullPointerException("sqlString can't be null");
        }

        if (sqlRunner.getCachedConnection() == null) {
            sqlRunner.connect();
        }

        List<String> tableNames = new ArrayList<String>();
        Statement stmt = null;
        ResultSet rs = null;
        try {
            log.debug("executing SQL: " + sqlString);
            stmt = sqlRunner.getCachedConnection()
                .createStatement();
            rs = stmt.executeQuery(sqlString);
            while (rs.next()) {
                String tableName = rs.getString(1);
                tableNames.add(tableName);
            }

            return tableNames;
        } finally {
            close(rs);
            close(stmt);
        }
    }

    public long rowCount() throws SQLException {

        return rowCount(null);
    }

    public long rowCount(boolean logErrors) throws SQLException {
        List<String> tableNamesList = tableNames(logErrors);

        return rowCount(tableNamesList, logErrors);
    }

    public long rowCount(String tableName) throws SQLException {

        if (tableName == null) {

            return rowCount(true);
        } else if (tableExists(tableName)) {

            return rowCount(Arrays.asList(tableName), true);
        }

        throw new IllegalArgumentException("No such table: " + tableName);
    }

    public long rowCount(String tableName, boolean logErrors)
        throws SQLException {

        if (tableName == null) {

            return rowCount(logErrors);
        } else if (tableExists(tableName)) {

            return rowCount(Arrays.asList(tableName), logErrors);
        }

        throw new IllegalArgumentException("No such table: " + tableName);
    }

    public long rowCount(List<String> tableNamesList, boolean logErrors)
        throws SQLException {

        if (sqlRunner.getCachedConnection() == null) {
            sqlRunner.connect();
        }

        Statement stmt = null;
        ResultSet rs = null;
        long rowCount = 0;
        try {
            for (String tableName : tableNamesList) {
                String sqlString = String.format(SELECT_COUNT_SQL, tableName);
                stmt = sqlRunner.getCachedConnection()
                    .createStatement();
                rs = stmt.executeQuery(sqlString);
                if (rs.next()) {
                    rowCount += rs.getLong(1);
                }
            }

            return rowCount;
        } catch (SQLException sqle) {
            if (logErrors) {
                log.warn("cannot determine the rows in the database: ", sqle);
            }
            throw sqle;
        } finally {
            close(rs);
            close(stmt);
        }
    }

    protected boolean dropTable(String tableName) throws SQLException {

        if (tableName == null) {
            throw new NullPointerException("tableName can't be null");
        }

        if (sqlRunner.getCachedConnection() == null) {
            sqlRunner.connect();
        }

        if (!tableExists(tableName)) {
            throw new IllegalArgumentException("No such table: " + tableName);
        }

        String sqlString = String.format(DROP_TABLE_SQL, tableName);
        Statement stmt = null;
        try {
            log.debug("executing SQL: " + sqlString);
            stmt = sqlRunner.getCachedConnection()
                .createStatement();
            stmt.executeUpdate(sqlString);
            return true;
        } catch (Throwable ignore) {
            log.debug(String.format("drop %s table failed", tableName), ignore);
        } finally {
            stmt.getConnection()
                .commit();
            close(stmt);
        }

        return false;
    }

    // TODO For 1.7 replace the next two close methods with close(AutoCloseable)

    protected static void close(ResultSet resultSet) {
        if (resultSet != null) {
            try {
                resultSet.close();
            } catch (SQLException ignore) {
            }
        }
    }

    protected static void close(Statement statement) {
        if (statement != null) {
            try {
                statement.close();
            } catch (SQLException ignore) {
            }
        }
    }

    public static void main(String[] args) {

        if (args.length == 0) {
            System.out.println(String.format(
                "Usage: %s { %s | %s | %s | %s [<table-name>] | %s <table-name>}",
                DDLINIT, CLEANDB, INITDB, TABLE_NAMES, ROWS, EXISTS));
        } else {
            DatabaseService databaseService = DatabaseServiceFactory.getInstance();
            DdlInitializer ddlInitializer = databaseService.getDdlInitializer();

            if (CLEANDB.equalsIgnoreCase(args[0])) {
                ddlInitializer.cleanDB();
            } else if (INITDB.equalsIgnoreCase(args[0])) {
                ddlInitializer.initDB();
            } else if (ROWS.equalsIgnoreCase(args[0])) {
                String tableName = null;
                if (args.length > 1) {
                    tableName = args[1].trim()
                        .toUpperCase();
                }
                long rows = ddlInitializer.rowCount(tableName);
                System.out.println(rows);
            } else if (TABLE_COUNT.equalsIgnoreCase(args[0])) {
                long tableCount = ddlInitializer.tableCount();
                System.out.println(tableCount);
            } else if (TABLE_NAMES.equalsIgnoreCase(args[0])) {
                List<String> tableNames = ddlInitializer.tableNames();
                for (String tableName : tableNames) {
                    System.out.println(tableName);
                }
            } else if (EXISTS.equalsIgnoreCase(args[0])) {
                String tableName = null;
                if (args.length > 1) {
                    tableName = args[1].trim()
                        .toUpperCase();
                } else {
                    System.err.println("missing <table-name> argument");
                }
                boolean exists = ddlInitializer.tableExists(tableName);
                System.out.println(exists);
            } else {
                System.err.println("Unrecognized argument: " + args[0]);
            }
        }
    }
}
