Copyright 2017 United States Government as represented by the
Administrator of the National Aeronautics and Space Administration.
All Rights Reserved.

This file is available under the terms of the NASA Open Source Agreement
(NOSA). You should have received a copy of this agreement with the
Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.

No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
AND DISTRIBUTES IT "AS IS."

Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
TERMINATION OF THIS AGREEMENT.

Call 0:
  Inputs:
	cadenceType = LONG
	firstCall = true
	lastCall = false
	ancillaryDataStruct = [<all ancillary data>]
	attitudeSolutionStruct = [<if available>]
	backgroundDataStruct = [<all background pixels>]
	targetStarDataStruct = []
	backgroundBlobs = []
	motionBlobs = []
	calUncertaintyBlobs = [<non-empty>]
  Outputs:
	targetStarsResultStruct = []
	backgroundCosmicRayEvents = [<all background cosmic ray events>]
	targetStarCosmicRayEvents = []
	backgroundCosmicRayMetrics = [<non-empty>]
	targetStarCosmicRayMetrics = []
	encircledEnergyMetrics = []
	brightnessMetrics = []
	zerocrossings = [<non-empty>]
	badPixels = [<all bad background pixels>]
	backgroundBlobFileName = "<non-empty>"
	motionBlobFileName = ""
	uncertaintyBlobFileName = ""
	
Calls [1,p]:
  Inputs:
	cadenceType = LONG
	firstCall = false
	lastCall = false
	ancillaryDataStruct = []
	attitudeSolutionStruct = []
	backgroundDataStruct = []
	targetStarDataStruct = [<subset of long cadence PPA targets>]
	backgroundBlobs = []
	motionBlobs = []
	calUncertaintyBlobs = []
  Outputs:
	targetStarsResultStruct = [<flux and centroids for input targets>]
	backgroundCosmicRayEvents = []
	targetStarCosmicRayEvents = []
	backgroundCosmicRayMetrics = []
	targetStarCosmicRayMetrics = []
	encircledEnergyMetrics = []
	brightnessMetrics = []
	badPixels = [<bad pixels in input target pixels>]
	backgroundBlobFileName = ""
	motionBlobFileName = ""
	uncertaintyBlobFileName = ""

Calls [p+1,n-2]:
  Inputs:
	cadenceType = LONG
	firstCall = false
	lastCall = false
	ancillaryDataStruct = []
	attitudeSolutionStruct = []
	backgroundDataStruct = []
	targetStarDataStruct = [<subset of long cadence targets>]
	backgroundBlobs = []
	motionBlobs = []
	calUncertaintyBlobs = []
  Outputs:
	targetStarsResultStruct = [<flux and centroids for input targets>]
	backgroundCosmicRayEvents = []
	targetStarCosmicRayEvents = []
	backgroundCosmicRayMetrics = []
	targetStarCosmicRayMetrics = []
	encircledEnergyMetrics = []
	brightnessMetrics = []
	badPixels = [<bad pixels in input target pixels>]
	backgroundBlobFileName = ""
	motionBlobFileName = ""
	uncertaintyBlobFileName = ""

Call n-1:
  Inputs:
	cadenceType = LONG
	firstCall = false
	lastCall = true
	ancillaryDataStruct = []
	attitudeSolutionStruct = []
	backgroundDataStruct = []
	targetStarDataStruct = [<last subset of long cadence targets>]
	backgroundBlobs = []
	motionBlobs = []
	calUncertaintyBlobs = []
  Outputs:
	targetStarsResultStruct = [<flux and centroids for input targets>]
	backgroundCosmicRayEvents = []
	targetStarCosmicRayEvents = [<all pixel cosmic ray events for uow>]
	backgroundCosmicRayMetrics = []
	targetStarCosmicRayMetrics = [<non-empty>]
	encircledEnergyMetrics = [<non-empty>]
	brightnessMetrics = [<non-empty>]
	argabrightening = [<non-empty>]
	badPixels = [<bad pixels in input target pixels>]
	backgroundBlobFileName = ""
	motionBlobFileName = "<non-empty>"
	uncertaintyBlobFileName = "<non-empty>"

--

Call 0:
  Inputs:
	cadenceType = SHORT
	firstCall = true
	lastCall = false
	ancillaryDataStruct = [<all ancillary data, iff oapEnabled>]
	attitudeSolutionStruct = [<if available>]
	backgroundDataStruct = []
	targetStarDataStruct = [<subset of short cadence targets>]
	backgroundBlobs = [<non-empty>]
	motionBlobs = [<non-empty>]
	calUncertaintyBlobs = [<non-empty>]
 Outputs:
	targetStarsResultStruct = [<flux and centroids for input targets>]
	backgroundCosmicRayEvents = []
	targetStarCosmicRayEvents = []
	backgroundCosmicRayMetrics = []
	targetStarCosmicRayMetrics = []
	encircledEnergyMetrics = []
	brightnessMetrics = []
	zerocrossings = [<non-empty>]
	badPixels = [<bad pixels in input target pixels>]
	backgroundBlobFileName = ""
	motionBlobFileName = ""
	uncertaintyBlobFileName = ""

Calls [1,n-2]:
  Inputs:
	cadenceType = SHORT
	firstCall = false
	lastCall = false
	ancillaryDataStruct = []
	attitudeSolutionStruct = []
	backgroundDataStruct = []
	targetStarDataStruct = [<subset of short cadence targets>]
	backgroundBlobs = [<non-empty>]
	motionBlobs = [<non-empty>]
	calUncertaintyBlobs = []
  Outputs:
	targetStarsResultStruct = [<flux and centroids for input targets>]
	backgroundCosmicRayEvents = []
	targetStarCosmicRayEvents = []
	backgroundCosmicRayMetrics = []
	targetStarCosmicRayMetrics = []
	encircledEnergyMetrics = []
	brightnessMetrics = []
	badPixels = [<bad pixels in input target pixels>]
	backgroundBlobFileName = ""
	motionBlobFileName = ""
	uncertaintyBlobFileName = ""

Call n-1:
  Inputs:
	cadenceType = SHORT
	firstCall = false
	lastCall = true
	ancillaryDataStruct = []
	attitudeSolutionStruct = []
	backgroundDataStruct = []
	targetStarDataStruct = [<last subset of short cadence targets>]
	backgroundBlobs = [<non-empty>]
	motionBlobs = [<non-empty>]
	calUncertaintyBlobs = []
  Outputs:
	targetStarsResultStruct = [<flux and centroids for input targets>]
	backgroundCosmicRayEvents = []
	targetStarCosmicRayEvents = [<all pixel cosmic ray events for uow>]
	backgroundCosmicRayMetrics = []
	targetStarCosmicRayMetrics = [<non-empty>]
	encircledEnergyMetrics = []
	brightnessMetrics = []
	argabrightening = [<non-empty>]
	badPixels = [<bad pixels in input target pixels>]
	backgroundBlobFileName = ""
	motionBlobFileName = ""
	uncertaintyBlobFileName = "<non-empty>"

