#!/usr/bin/perl -w
#
# $Id$
# 
# Copyright 2017 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
# 
# This file is available under the terms of the NASA Open Source Agreement
# (NOSA). You should have received a copy of this agreement with the
# Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
# 
# No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
# WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
# INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
# WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
# INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
# FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
# TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
# CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
# OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
# OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
# FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
# REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
# AND DISTRIBUTES IT "AS IS."
#
# Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
# AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
# SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
# THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
# EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
# PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
# SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
# STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
# PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
# REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
# TERMINATION OF THIS AGREEMENT.
#

=head1 qstat-summarize

qstat-summarize - summarize output of qstat

=head1 SYNOPSIS

qstat-summarize [options]

=head1 DESCRIPTION

The NAS qstat command gives copius output, but does not provide a
summary. This script takes the qstat output as its input and provides
a summary.

=head1 OPTIONS

=over 4

=item --coreCountPerNode #

Set the number of cores per node (default: 16).

=item --debug

Turn on debugging messages.

=item --help

Display the usage of this command.

=item --manual

Display this manual.

=back

=head1 RETURN VALUE

0, always.

=head1 EXAMPLES

=over 4

=item qstat-summarize < /tmp/qstat.out

Summarizes the output in F</tmp/qstat.out>.

=back

=head1 METHODS

=cut

# Initializations.
BEGIN {
}

# Packages and pragmas.
use Getopt::Long;

use strict;

# Constants.
my $cmd;                                # name by which command called
($cmd = $0) =~ s|^\./||;                # ...minus the leading ./
my $MINUTES_PER_HOUR = 60;

# Variables (may be overridden by arguments).
my $coreCountPerNode = 16;
my $debug = 0;				# verbose mode
my $help = 0;				# display usage
my $manual = 0;				# display manual

# Parse command line.
my %opts;
GetOptions('coreCountPerNode'	=> \$coreCountPerNode,
	   'debug'		=> \$debug,
	   'help'		=> \$help,
	   'manual'		=> \$manual,
	  ) or usage();

usage() if ($help);
manual() if ($manual);

# Begin program.
my $wallTimeMinutesTotal = 0;
my $cpuMinutesTotal = 0;
my $entryCount = 0;
my $nodeCountTotal = 0;

while (<>) {
    # print;

    my ($jobId, $user, $queue, $job, $cpuCount, $nodeCount, $timeout, $status,
     $wallTime, $efficiency) = split;
    $entryCount++;
    $nodeCountTotal += $nodeCount;

    my ($wallTimeHours, $wallTimeMinutes) = split(/:/, $wallTime);
    $wallTimeMinutes += $wallTimeHours * $MINUTES_PER_HOUR;
    $wallTimeMinutesTotal += $wallTimeMinutes;

    my $cpuMinutes = $wallTimeMinutes * $nodeCount * $coreCountPerNode;
    $cpuMinutesTotal += $cpuMinutes;
}

printf("Wall Time Total: %d:%02d\n",
       $wallTimeMinutesTotal/$MINUTES_PER_HOUR, $wallTimeMinutesTotal % $MINUTES_PER_HOUR);
printf("CPU Hours with %d nodes (avg) with %d cores each: %d\n",
       $nodeCountTotal/$entryCount, $coreCountPerNode,
       commify($cpuMinutesTotal/$MINUTES_PER_HOUR));


=head2 usage

Display usage information and exit.

=cut

sub usage {
    print <<EOF;
Usage: $cmd [options]
--coreCountPerNode #	specify number of cores per node (default: 16)
--debug			print actions that program takes
--help			display this message
--manual		display manual
EOF
    exit(1);
}

=head2 manual

Display manual and exit.

=cut

sub manual {
    system("pod2text $cmd");
    exit(1);
}

# From Perl Cookbook, 2.1 6 Putting Commas in Numbers.
# Used because "use locale" doesn't seem to do the right thing.
# TODO Figure out why reverse isn't working
sub commify {
    my $text = reverse($_[0]);
    $text =~ s/(\d\d\d) (?=\d) (?! \d*\. ) /$1, /g;

    return scalar(reverse($text));
}

1;

