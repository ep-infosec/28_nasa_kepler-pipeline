#! /bin/sh
#
# $Id$
#
# NAME
#   verify-svn-dump - Verify a Subversion dump
#
# SYNOPSIS
#   verify-svn-dump repositoryPath dump [tmp directory]
#
# DESCRIPTION
#   Verifies a Subversion dump. This is done by replaying the dump into
#   a temporary repository, performing a log on both it and the source
#   repository, and ensuring that the log is identical.
#
#   The repositoryPath is the absolute path to the repository, such as
#   /repo.
#
#   The dump is the absolute path to the dump file.
#
#   The optional argument tmp directory can be used if the default of
#   /var/tmp is too small. The directory must be large enough to hold
#   your entire repository with sufficient space left over to hold the
#   logs. This program will create a directory named
#   verify-svn-dump-NNNNN within the specified temporary directory.
#
# OPTIONS
#   --verbose
#     Print actions that program takes.
#
#   --help
#     Display the usage of this command.
#
# RETURN VALUE
#   Normally, the program exits with a status of 0. If there are
#   differences, they are displayed on stderr and the program exits
#   with an error status of 1.
#
#   1 is also returned if the arguments are missing or invalid.
#
# EXAMPLES
#   verify-svn-dump /repo /var/local/lib/svn/repo.dump
#
# ENVIRONMENT
#
# FILES
#
# SEE ALSO
#
# VERSION
#   $Revision$
#
# AUTHOR
#   Bill Wohler
# 
# Copyright 2017 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
# 
# This file is available under the terms of the NASA Open Source Agreement
# (NOSA). You should have received a copy of this agreement with the
# Kepler source code; see the file NASA-OPEN-SOURCE-AGREEMENT.doc.
# 
# No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
# WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
# INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
# WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
# INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
# FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM
# TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
# CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
# OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
# OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
# FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
# REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
# AND DISTRIBUTES IT "AS IS."
#
# Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
# AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
# SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF
# THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
# EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
# PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
# SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
# STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
# PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE
# REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
# TERMINATION OF THIS AGREEMENT.
#

# Initializations.

# Constants.
cmd=`basename $0`                       # name by which command called
tmpDir=$cmd-$$
dumpRepo=dumpRepo		     # name of temporary repo for dump

# Variables (may be overridden by arguments).
verbose=0				# verbose mode
exitstatus=0                            # upon error, set to non-zero and exit
interrupt=0                             # upon interrupt, set to 1
repositoryPath=				# URL to repository
dumpFile=				# absolute path to dump file
tmpParentDir=/var/tmp				# temporary directory to use

# Functions.

# Display error message and usage information and then exit.
usage() {
    echo ""
    echo $1
    echo ""
    cat <<EOF
Usage: $cmd [options] repositoryPath dump [tmp directory]
--verbose               print actions that program takes
--help                  display this message
EOF
    bye 1;
}

# Exit gracefully.
# Usage: bye [(status [message]]
bye() {
    if [ $# -gt 0 ]; then
        exitstatus=$1
        shift
    fi
    if [ $# -gt 0 ]; then
        echo "$*"
    elif [ $interrupt -eq 1 ]; then
        echo ""
    fi
    if [ -d $tmpDir ]; then
	echo "Cleaning up $tmpDir..."
	[ $verbose = 1 ] && echo rm -rf $tmpDir
	rm -rf $tmpDir
	echo "Cleaning up $tmpDir...done"
    fi
    exit $exitstatus
}

# Handle an interrupt.
intr() {
    echo ""
    interrupt=1
    bye 1
}

# Parse command line.
while [ $# != 0 ]; do
    case "$1" in
	-v|--v*) verbose=1;;
	-h|--h*) usage;;
	-*)   usage "Unknown argument $1";;
	*)
	    if [ "$repositoryPath" = "" ]; then
		repositoryPath=$1;
	    elif [ "$dumpFile" = "" ]; then
		dumpFile=$1;
	    else
		tmpParentDir=$1;
		if [ $# != 1 ]; then
		    usage "Too many arguments"
		fi
	    fi;;
    esac
    shift
done

trap intr 2

# Create temporary directory. Do this now to ensure that paths are
# absolute.
tmpDir="$tmpParentDir/$tmpDir"
mkdir $tmpDir || bye 1
cd $tmpDir || bye 1

# Verify arguments.
if [ "$repositoryPath" = "" ]; then
    usage "Please specify a path to your repository"
fi
if [ "$dumpFile" = "" ]; then
    usage "Please specify a dump file"
fi
if [ "$tmpParentDir" = "" ]; then
    usage "Please specify a temporary directory"
fi

repository=file://$repositoryPath
if ! `svn info $repository > /dev/null 2>&1`; then
    bye 1 "Repository $repository not found"
fi
if [ ! -r $dumpFile ]; then
    bye 1 "Dump file $dumpFile not readable"
fi
if [ ! -d $tmpParentDir ]; then
    bye 1 "Temporary directory $tmpParentDir not found"
fi

# Replay dump.
echo "Replaying `basename $dumpFile` for $repository..."
[ $verbose = 1 ] && echo "svnadmin create $dumpRepo"
svnadmin create $dumpRepo || bye 1
[ $verbose = 1 ] && echo "svnadmin load --quiet $dumpRepo < $dumpFile"
svnadmin load --quiet $dumpRepo < $dumpFile || bye 1
echo "Replaying `basename $dumpFile` for $repository...done"

# Extract logs.
# TODO Limit logs to what's in dumpRepo.
rev=`svn info -rHEAD file:///$tmpDir/$dumpRepo | awk '/^Revision/{print $2}'`
repositoryRev=`svn info -rHEAD $repository | awk '/^Revision/{print $2}'`
echo "Loaded $rev revisions (repository has $repositoryRev revisions)"

echo "Extracting log for $repository..."
[ $verbose = 1 ] && echo "svn log -v -r1:$rev $repository > repository.log"
svn log -v -r1:$rev $repository > repository.log || bye 1
echo "Extracting log for $repository...done"

echo "Extracting log for `basename $dumpFile`..."
[ $verbose = 1 ] && echo "svn log -v -r1:HEAD file:///$tmpDir/$dumpRepo > dump.log"
svn log -v -r1:HEAD file:///$tmpDir/$dumpRepo > dump.log || bye 1
echo "Extracting log for `basename $dumpFile`...done"

# Compare logs.
[ $verbose = 1 ] && echo "diff repository.log dump.log"
diff repository.log dump.log || bye 1

echo Backup seems to be OK

bye 0

